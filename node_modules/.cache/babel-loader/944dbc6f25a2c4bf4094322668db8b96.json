{"ast":null,"code":"import { getAssetPath } from '@stencil/core/internal/client';\nvar CACHED_MAP;\nvar getIconMap = function getIconMap() {\n  if (typeof window === 'undefined') {\n    return new Map();\n  } else {\n    if (!CACHED_MAP) {\n      var win = window;\n      win.Ionicons = win.Ionicons || {};\n      CACHED_MAP = win.Ionicons.map = win.Ionicons.map || new Map();\n    }\n    return CACHED_MAP;\n  }\n};\nvar addIcons = function addIcons(icons) {\n  var map = getIconMap();\n  Object.keys(icons).forEach(function (name) {\n    return map.set(name, icons[name]);\n  });\n};\nvar getUrl = function getUrl(i) {\n  var url = getSrc(i.src);\n  if (url) {\n    return url;\n  }\n  url = getName(i.name, i.icon, i.mode, i.ios, i.md);\n  if (url) {\n    return getNamedUrl(url);\n  }\n  if (i.icon) {\n    url = getSrc(i.icon);\n    if (url) {\n      return url;\n    }\n    url = getSrc(i.icon[i.mode]);\n    if (url) {\n      return url;\n    }\n  }\n  return null;\n};\nvar getNamedUrl = function getNamedUrl(iconName) {\n  var url = getIconMap().get(iconName);\n  if (url) {\n    return url;\n  }\n  return getAssetPath(\"svg/\".concat(iconName, \".svg\"));\n};\nvar getName = function getName(iconName, icon, mode, ios, md) {\n  // default to \"md\" if somehow the mode wasn't set\n  mode = (mode && toLower(mode)) === 'ios' ? 'ios' : 'md';\n  // if an icon was passed in using the ios or md attributes\n  // set the iconName to whatever was passed in\n  if (ios && mode === 'ios') {\n    iconName = toLower(ios);\n  } else if (md && mode === 'md') {\n    iconName = toLower(md);\n  } else {\n    if (!iconName && icon && !isSrc(icon)) {\n      iconName = icon;\n    }\n    if (isStr(iconName)) {\n      iconName = toLower(iconName);\n    }\n  }\n  if (!isStr(iconName) || iconName.trim() === '') {\n    return null;\n  }\n  // only allow alpha characters and dash\n  var invalidChars = iconName.replace(/[a-z]|-|\\d/gi, '');\n  if (invalidChars !== '') {\n    return null;\n  }\n  return iconName;\n};\nvar getSrc = function getSrc(src) {\n  if (isStr(src)) {\n    src = src.trim();\n    if (isSrc(src)) {\n      return src;\n    }\n  }\n  return null;\n};\nvar isSrc = function isSrc(str) {\n  return str.length > 0 && /(\\/|\\.)/.test(str);\n};\nvar isStr = function isStr(val) {\n  return typeof val === 'string';\n};\nvar toLower = function toLower(val) {\n  return val.toLowerCase();\n};\n/**\n * Elements inside of web components sometimes need to inherit global attributes\n * set on the host. For example, the inner input in `ion-input` should inherit\n * the `title` attribute that developers set directly on `ion-input`. This\n * helper function should be called in componentWillLoad and assigned to a variable\n * that is later used in the render function.\n *\n * This does not need to be reactive as changing attributes on the host element\n * does not trigger a re-render.\n */\nvar inheritAttributes = function inheritAttributes(el) {\n  var attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var attributeObject = {};\n  attributes.forEach(function (attr) {\n    if (el.hasAttribute(attr)) {\n      var value = el.getAttribute(attr);\n      if (value !== null) {\n        attributeObject[attr] = el.getAttribute(attr);\n      }\n      el.removeAttribute(attr);\n    }\n  });\n  return attributeObject;\n};\nexport { addIcons as a, inheritAttributes as b, getName as c, getUrl as g, isStr as i };","map":null,"metadata":{},"sourceType":"module"}