{"ast":null,"code":"import _defineProperty from \"/Users/mvp/Documents/Projects/pure-weather-capacitor---v2.0.0/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"/Users/mvp/Documents/Projects/pure-weather-capacitor---v2.0.0/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"/Users/mvp/Documents/Projects/pure-weather-capacitor---v2.0.0/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/mvp/Documents/Projects/pure-weather-capacitor---v2.0.0/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/mvp/Documents/Projects/pure-weather-capacitor---v2.0.0/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/mvp/Documents/Projects/pure-weather-capacitor---v2.0.0/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/mvp/Documents/Projects/pure-weather-capacitor---v2.0.0/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/mvp/Documents/Projects/pure-weather-capacitor---v2.0.0/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/mvp/Documents/Projects/pure-weather-capacitor---v2.0.0/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == typeof h && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator.return && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(typeof e + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { proxyCustomElement, HTMLElement, createEvent, writeTask, h, Host } from '@stencil/core/internal/client';\nimport { startFocusVisible } from './focus-visible.js';\nimport { r as raf, e as renderHiddenInput, g as getElementRoot } from './helpers.js';\nimport { a as printIonError, p as printIonWarning } from './index6.js';\nimport { i as isRTL } from './dir.js';\nimport { c as createColorClasses } from './theme.js';\nimport { a as chevronBack, f as chevronForward, c as chevronDown, g as caretUpSharp, h as caretDownSharp } from './index7.js';\nimport { b as getIonMode } from './ionic-global.js';\nimport { g as generateDayAriaLabel, a as getDay, i as isBefore, b as isAfter, c as isSameDay, d as getPreviousMonth, e as getNextMonth, v as validateParts, f as getPartsFromCalendarDay, h as getEndOfWeek, j as getStartOfWeek, k as getPreviousDay, l as getNextDay, m as getPreviousWeek, n as getNextWeek, p as parseMinParts, o as parseMaxParts, q as parseDate, w as warnIfValueOutOfBounds, r as convertToArrayOfNumbers, s as convertDataToISO, t as getToday, u as getClosestValidDate, x as getNumDaysInMonth, y as getCombinedDateColumnData, z as getMonthColumnData, A as getDayColumnData, B as getYearColumnData, C as isMonthFirstLocale, D as getTimeColumnsData, E as isLocaleDayPeriodRTL, F as getMonthAndYear, G as getDaysOfWeek, H as getDaysOfMonth, I as generateMonths, J as is24Hour, K as getLocalizedTime, L as getMonthAndDay, M as formatValue, N as getNextYear, O as getPreviousYear, P as clampDate, Q as parseAmPm, R as calculateHourFromAMPM } from './data.js';\nimport { d as defineCustomElement$c } from './backdrop.js';\nimport { d as defineCustomElement$b } from './button.js';\nimport { d as defineCustomElement$a } from './buttons.js';\nimport { d as defineCustomElement$9 } from './icon.js';\nimport { d as defineCustomElement$8 } from './item.js';\nimport { d as defineCustomElement$7 } from './label.js';\nimport { d as defineCustomElement$6 } from './note.js';\nimport { d as defineCustomElement$5 } from './picker-column-internal.js';\nimport { d as defineCustomElement$4 } from './picker-internal.js';\nimport { d as defineCustomElement$3 } from './popover.js';\nimport { d as defineCustomElement$2 } from './ripple-effect.js';\nvar isYearDisabled = function isYearDisabled(refYear, minParts, maxParts) {\n  if (minParts && minParts.year > refYear) {\n    return true;\n  }\n  if (maxParts && maxParts.year < refYear) {\n    return true;\n  }\n  return false;\n};\n/**\n * Returns true if a given day should\n * not be interactive according to its value,\n * or the max/min dates.\n */\nvar isDayDisabled = function isDayDisabled(refParts, minParts, maxParts, dayValues) {\n  /**\n   * If this is a filler date (i.e. padding)\n   * then the date is disabled.\n   */\n  if (refParts.day === null) {\n    return true;\n  }\n  /**\n   * If user passed in a list of acceptable day values\n   * check to make sure that the date we are looking\n   * at is in this array.\n   */\n  if (dayValues !== undefined && !dayValues.includes(refParts.day)) {\n    return true;\n  }\n  /**\n   * Given a min date, perform the following\n   * checks. If any of them are true, then the\n   * day should be disabled:\n   * 1. Is the current year < the min allowed year?\n   * 2. Is the current year === min allowed year,\n   * but the current month < the min allowed month?\n   * 3. Is the current year === min allowed year, the\n   * current month === min allow month, but the current\n   * day < the min allowed day?\n   */\n  if (minParts && isBefore(refParts, minParts)) {\n    return true;\n  }\n  /**\n   * Given a max date, perform the following\n   * checks. If any of them are true, then the\n   * day should be disabled:\n   * 1. Is the current year > the max allowed year?\n   * 2. Is the current year === max allowed year,\n   * but the current month > the max allowed month?\n   * 3. Is the current year === max allowed year, the\n   * current month === max allow month, but the current\n   * day > the max allowed day?\n   */\n  if (maxParts && isAfter(refParts, maxParts)) {\n    return true;\n  }\n  /**\n   * If none of these checks\n   * passed then the date should\n   * be interactive.\n   */\n  return false;\n};\n/**\n * Given a locale, a date, the selected date(s), and today's date,\n * generate the state for a given calendar day button.\n */\nvar getCalendarDayState = function getCalendarDayState(locale, refParts, activeParts, todayParts, minParts, maxParts, dayValues) {\n  /**\n   * activeParts signals what day(s) are currently selected in the datetime.\n   * If multiple=\"true\", this will be an array, but the logic in this util\n   * is the same whether we have one selected day or many because we're only\n   * calculating the state for one button. So, we treat a single activeParts value\n   * the same as an array of length one.\n   */\n  var activePartsArray = Array.isArray(activeParts) ? activeParts : [activeParts];\n  /**\n   * The day button is active if it is selected, or in other words, if refParts\n   * matches at least one selected date.\n   */\n  var isActive = activePartsArray.find(function (parts) {\n    return isSameDay(refParts, parts);\n  }) !== undefined;\n  var isToday = isSameDay(refParts, todayParts);\n  var disabled = isDayDisabled(refParts, minParts, maxParts, dayValues);\n  /**\n   * Note that we always return one object regardless of whether activeParts\n   * was an array, since we pare down to one value for isActive.\n   */\n  return {\n    disabled: disabled,\n    isActive: isActive,\n    isToday: isToday,\n    ariaSelected: isActive ? 'true' : null,\n    ariaLabel: generateDayAriaLabel(locale, isToday, refParts),\n    text: refParts.day != null ? getDay(locale, refParts) : null\n  };\n};\n/**\n * Returns `true` if the month is disabled given the\n * current date value and min/max date constraints.\n */\nvar isMonthDisabled = function isMonthDisabled(refParts, _ref) {\n  var minParts = _ref.minParts,\n    maxParts = _ref.maxParts;\n  // If the year is disabled then the month is disabled.\n  if (isYearDisabled(refParts.year, minParts, maxParts)) {\n    return true;\n  }\n  // If the date value is before the min date, then the month is disabled.\n  // If the date value is after the max date, then the month is disabled.\n  if (minParts && isBefore(refParts, minParts) || maxParts && isAfter(refParts, maxParts)) {\n    return true;\n  }\n  return false;\n};\n/**\n * Given a working date, an optional minimum date range,\n * and an optional maximum date range; determine if the\n * previous navigation button is disabled.\n */\nvar isPrevMonthDisabled = function isPrevMonthDisabled(refParts, minParts, maxParts) {\n  var prevMonth = Object.assign(Object.assign({}, getPreviousMonth(refParts)), {\n    day: null\n  });\n  return isMonthDisabled(prevMonth, {\n    minParts: minParts,\n    maxParts: maxParts\n  });\n};\n/**\n * Given a working date and a maximum date range,\n * determine if the next navigation button is disabled.\n */\nvar isNextMonthDisabled = function isNextMonthDisabled(refParts, maxParts) {\n  var nextMonth = Object.assign(Object.assign({}, getNextMonth(refParts)), {\n    day: null\n  });\n  return isMonthDisabled(nextMonth, {\n    maxParts: maxParts\n  });\n};\n/**\n * Given the value of the highlightedDates property\n * and an ISO string, return the styles to use for\n * that date, or undefined if none are found.\n */\nvar getHighlightStyles = function getHighlightStyles(highlightedDates, dateIsoString, el) {\n  if (Array.isArray(highlightedDates)) {\n    var dateStringWithoutTime = dateIsoString.split('T')[0];\n    var matchingHighlight = highlightedDates.find(function (hd) {\n      return hd.date === dateStringWithoutTime;\n    });\n    if (matchingHighlight) {\n      return {\n        textColor: matchingHighlight.textColor,\n        backgroundColor: matchingHighlight.backgroundColor\n      };\n    }\n  } else {\n    /**\n     * Wrap in a try-catch to prevent exceptions in the user's function\n     * from interrupting the calendar's rendering.\n     */\n    try {\n      return highlightedDates(dateIsoString);\n    } catch (e) {\n      printIonError('Exception thrown from provided `highlightedDates` callback. Please check your function and try again.', el, e);\n    }\n  }\n  return undefined;\n};\nvar datetimeIosCss = \":host{display:-ms-flexbox;display:flex;-ms-flex-flow:column;flex-flow:column;background:var(--background);overflow:hidden}ion-picker-column-internal{min-width:26px}:host(.datetime-size-fixed){width:auto;height:auto}:host(.datetime-size-fixed:not(.datetime-prefer-wheel)){max-width:350px}:host(.datetime-size-fixed.datetime-prefer-wheel){min-width:350px;max-width:-webkit-max-content;max-width:-moz-max-content;max-width:max-content}:host(.datetime-size-cover){width:100%}:host .calendar-body,:host .datetime-year{opacity:0}:host(:not(.datetime-ready)) .datetime-year{position:absolute;pointer-events:none}:host(.datetime-ready) .calendar-body{opacity:1}:host(.datetime-ready) .datetime-year{display:none;opacity:1}:host .wheel-order-year-first .day-column{-ms-flex-order:3;order:3;text-align:end}:host .wheel-order-year-first .month-column{-ms-flex-order:2;order:2;text-align:end}:host .wheel-order-year-first .year-column{-ms-flex-order:1;order:1;text-align:start}:host .datetime-calendar,:host .datetime-year{display:-ms-flexbox;display:flex;-ms-flex:1 1 auto;flex:1 1 auto;-ms-flex-flow:column;flex-flow:column}:host(.show-month-and-year) .datetime-year{display:-ms-flexbox;display:flex}@supports (background: -webkit-named-image(apple-pay-logo-black)) and (not (aspect-ratio: 1/1)){:host(.show-month-and-year) .calendar-next-prev,:host(.show-month-and-year) .calendar-days-of-week,:host(.show-month-and-year) .calendar-body,:host(.show-month-and-year) .datetime-time{position:absolute;visibility:hidden;pointer-events:none}@supports (inset-inline-start: 0){:host(.show-month-and-year) .calendar-next-prev,:host(.show-month-and-year) .calendar-days-of-week,:host(.show-month-and-year) .calendar-body,:host(.show-month-and-year) .datetime-time{inset-inline-start:-99999px}}@supports not (inset-inline-start: 0){:host(.show-month-and-year) .calendar-next-prev,:host(.show-month-and-year) .calendar-days-of-week,:host(.show-month-and-year) .calendar-body,:host(.show-month-and-year) .datetime-time{left:-99999px}:host-context([dir=rtl]):host(.show-month-and-year) .calendar-next-prev,:host-context([dir=rtl]).show-month-and-year .calendar-next-prev,:host-context([dir=rtl]):host(.show-month-and-year) .calendar-days-of-week,:host-context([dir=rtl]).show-month-and-year .calendar-days-of-week,:host-context([dir=rtl]):host(.show-month-and-year) .calendar-body,:host-context([dir=rtl]).show-month-and-year .calendar-body,:host-context([dir=rtl]):host(.show-month-and-year) .datetime-time,:host-context([dir=rtl]).show-month-and-year .datetime-time{left:unset;right:unset;right:-99999px}@supports selector(:dir(rtl)){:host(.show-month-and-year) .calendar-next-prev:dir(rtl),:host(.show-month-and-year) .calendar-days-of-week:dir(rtl),:host(.show-month-and-year) .calendar-body:dir(rtl),:host(.show-month-and-year) .datetime-time:dir(rtl){left:unset;right:unset;right:-99999px}}}}@supports (not (background: -webkit-named-image(apple-pay-logo-black))) or ((background: -webkit-named-image(apple-pay-logo-black)) and (aspect-ratio: 1/1)){:host(.show-month-and-year) .calendar-next-prev,:host(.show-month-and-year) .calendar-days-of-week,:host(.show-month-and-year) .calendar-body,:host(.show-month-and-year) .datetime-time{display:none}}:host(.month-year-picker-open) .datetime-footer{display:none}:host(.datetime-readonly),:host(.datetime-disabled){pointer-events:none}:host(.datetime-disabled){opacity:0.4}:host .datetime-header .datetime-title{text-overflow:ellipsis;white-space:nowrap;overflow:hidden}:host .datetime-action-buttons.has-clear-button{width:100%}:host .datetime-action-buttons ion-buttons{display:-ms-flexbox;display:flex;-ms-flex-pack:justify;justify-content:space-between}:host .calendar-action-buttons{display:-ms-flexbox;display:flex;-ms-flex-pack:justify;justify-content:space-between}:host .calendar-action-buttons ion-item,:host .calendar-action-buttons ion-button{--background:translucent}:host .calendar-action-buttons ion-item ion-label{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center}:host .calendar-action-buttons ion-item ion-icon{-webkit-padding-start:4px;padding-inline-start:4px;-webkit-padding-end:0;padding-inline-end:0;padding-top:0;padding-bottom:0}:host .calendar-days-of-week{display:grid;grid-template-columns:repeat(7, 1fr);text-align:center}:host .calendar-body{display:-ms-flexbox;display:flex;-ms-flex-positive:1;flex-grow:1;-webkit-scroll-snap-type:x mandatory;-ms-scroll-snap-type:x mandatory;scroll-snap-type:x mandatory;overflow-x:scroll;overflow-y:hidden;scrollbar-width:none;outline:none}:host .calendar-body .calendar-month{display:-ms-flexbox;display:flex;-ms-flex-flow:column;flex-flow:column;scroll-snap-align:start;scroll-snap-stop:always;-ms-flex-negative:0;flex-shrink:0;width:100%}:host .calendar-body .calendar-month-disabled{scroll-snap-align:none}:host .calendar-body::-webkit-scrollbar{display:none}:host .calendar-body .calendar-month-grid{display:grid;grid-template-columns:repeat(7, 1fr)}:host .calendar-day-wrapper{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;min-width:0;min-height:0;overflow:visible}:host .calendar-day{border-radius:50%;-webkit-padding-start:0px;padding-inline-start:0px;-webkit-padding-end:0px;padding-inline-end:0px;padding-top:0px;padding-bottom:0px;-webkit-margin-start:0px;margin-inline-start:0px;-webkit-margin-end:0px;margin-inline-end:0px;margin-top:0px;margin-bottom:0px;display:-ms-flexbox;display:flex;position:relative;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;border:none;outline:none;background:none;color:currentColor;font-family:var(--ion-font-family, inherit);cursor:pointer;-webkit-appearance:none;-moz-appearance:none;appearance:none;z-index:0}:host .calendar-day[disabled]{pointer-events:none;opacity:0.4}.calendar-day:focus{background:rgba(var(--ion-color-base-rgb), 0.2);-webkit-box-shadow:0px 0px 0px 4px rgba(var(--ion-color-base-rgb), 0.2);box-shadow:0px 0px 0px 4px rgba(var(--ion-color-base-rgb), 0.2)}:host .datetime-time{display:-ms-flexbox;display:flex;-ms-flex-pack:justify;justify-content:space-between}:host(.datetime-presentation-time) .datetime-time{padding-left:0;padding-right:0;padding-top:0;padding-bottom:0}:host ion-popover{--height:200px}:host .time-header{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center}:host .time-body{border-radius:8px;-webkit-padding-start:12px;padding-inline-start:12px;-webkit-padding-end:12px;padding-inline-end:12px;padding-top:6px;padding-bottom:6px;display:-ms-flexbox;display:flex;border:none;background:var(--ion-color-step-300, #edeef0);color:var(--ion-text-color, #000);font-family:inherit;font-size:inherit;cursor:pointer;-webkit-appearance:none;-moz-appearance:none;appearance:none}:host .time-body-active{color:var(--ion-color-base)}:host(.in-item){position:static}:host(.show-month-and-year) .calendar-action-buttons ion-item{--color:var(--ion-color-base)}:host{--background:var(--ion-color-light, #ffffff);--background-rgb:var(--ion-color-light-rgb);--title-color:var(--ion-color-step-600, #666666)}:host(.datetime-presentation-date-time:not(.datetime-prefer-wheel)),:host(.datetime-presentation-time-date:not(.datetime-prefer-wheel)),:host(.datetime-presentation-date:not(.datetime-prefer-wheel)){min-height:350px}:host .datetime-header{-webkit-padding-start:16px;padding-inline-start:16px;-webkit-padding-end:16px;padding-inline-end:16px;padding-top:16px;padding-bottom:16px;border-bottom:0.55px solid var(--ion-color-step-200, #cccccc);font-size:14px}:host .datetime-header .datetime-title{color:var(--title-color)}:host .datetime-header .datetime-selected-date{margin-top:10px}:host .calendar-action-buttons ion-item{--padding-start:16px;--background-hover:transparent;--background-activated:transparent;font-size:16px;font-weight:600}:host .calendar-action-buttons ion-item ion-icon,:host .calendar-action-buttons ion-buttons ion-button{color:var(--ion-color-base)}:host .calendar-action-buttons ion-buttons{padding-left:0;padding-right:0;padding-top:8px;padding-bottom:0}:host .calendar-action-buttons ion-buttons ion-button{margin-left:0;margin-right:0;margin-top:0;margin-bottom:0}:host .calendar-days-of-week{-webkit-padding-start:8px;padding-inline-start:8px;-webkit-padding-end:8px;padding-inline-end:8px;padding-top:0;padding-bottom:0;color:var(--ion-color-step-300, #b3b3b3);font-size:12px;font-weight:600;line-height:24px;text-transform:uppercase}:host .calendar-body .calendar-month .calendar-month-grid{-webkit-padding-start:8px;padding-inline-start:8px;-webkit-padding-end:8px;padding-inline-end:8px;padding-top:8px;padding-bottom:8px;-ms-flex-align:center;align-items:center;height:calc(100% - 16px)}:host .calendar-day-wrapper{-webkit-padding-start:4px;padding-inline-start:4px;-webkit-padding-end:4px;padding-inline-end:4px;padding-top:4px;padding-bottom:4px;height:0;min-height:16px}:host .calendar-day{width:40px;min-width:40px;height:40px;font-size:20px}.calendar-day.calendar-day-active{background:rgba(var(--ion-color-base-rgb), 0.2)}:host .calendar-day.calendar-day-today{color:var(--ion-color-base)}:host .calendar-day.calendar-day-active{color:var(--ion-color-base);font-weight:600}:host .calendar-day.calendar-day-today.calendar-day-active{color:var(--ion-color-contrast)}:host .datetime-time{-webkit-padding-start:16px;padding-inline-start:16px;-webkit-padding-end:16px;padding-inline-end:16px;padding-top:8px;padding-bottom:16px;font-size:16px}:host .datetime-time .time-header{font-weight:600}:host .datetime-buttons{-webkit-padding-start:8px;padding-inline-start:8px;-webkit-padding-end:8px;padding-inline-end:8px;padding-top:8px;padding-bottom:8px;border-top:0.55px solid var(--ion-color-step-200, #cccccc)}:host .datetime-buttons ::slotted(ion-buttons),:host .datetime-buttons ion-buttons{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:justify;justify-content:space-between}:host .datetime-action-buttons{width:100%}\";\nvar datetimeMdCss = \":host{display:-ms-flexbox;display:flex;-ms-flex-flow:column;flex-flow:column;background:var(--background);overflow:hidden}ion-picker-column-internal{min-width:26px}:host(.datetime-size-fixed){width:auto;height:auto}:host(.datetime-size-fixed:not(.datetime-prefer-wheel)){max-width:350px}:host(.datetime-size-fixed.datetime-prefer-wheel){min-width:350px;max-width:-webkit-max-content;max-width:-moz-max-content;max-width:max-content}:host(.datetime-size-cover){width:100%}:host .calendar-body,:host .datetime-year{opacity:0}:host(:not(.datetime-ready)) .datetime-year{position:absolute;pointer-events:none}:host(.datetime-ready) .calendar-body{opacity:1}:host(.datetime-ready) .datetime-year{display:none;opacity:1}:host .wheel-order-year-first .day-column{-ms-flex-order:3;order:3;text-align:end}:host .wheel-order-year-first .month-column{-ms-flex-order:2;order:2;text-align:end}:host .wheel-order-year-first .year-column{-ms-flex-order:1;order:1;text-align:start}:host .datetime-calendar,:host .datetime-year{display:-ms-flexbox;display:flex;-ms-flex:1 1 auto;flex:1 1 auto;-ms-flex-flow:column;flex-flow:column}:host(.show-month-and-year) .datetime-year{display:-ms-flexbox;display:flex}@supports (background: -webkit-named-image(apple-pay-logo-black)) and (not (aspect-ratio: 1/1)){:host(.show-month-and-year) .calendar-next-prev,:host(.show-month-and-year) .calendar-days-of-week,:host(.show-month-and-year) .calendar-body,:host(.show-month-and-year) .datetime-time{position:absolute;visibility:hidden;pointer-events:none}@supports (inset-inline-start: 0){:host(.show-month-and-year) .calendar-next-prev,:host(.show-month-and-year) .calendar-days-of-week,:host(.show-month-and-year) .calendar-body,:host(.show-month-and-year) .datetime-time{inset-inline-start:-99999px}}@supports not (inset-inline-start: 0){:host(.show-month-and-year) .calendar-next-prev,:host(.show-month-and-year) .calendar-days-of-week,:host(.show-month-and-year) .calendar-body,:host(.show-month-and-year) .datetime-time{left:-99999px}:host-context([dir=rtl]):host(.show-month-and-year) .calendar-next-prev,:host-context([dir=rtl]).show-month-and-year .calendar-next-prev,:host-context([dir=rtl]):host(.show-month-and-year) .calendar-days-of-week,:host-context([dir=rtl]).show-month-and-year .calendar-days-of-week,:host-context([dir=rtl]):host(.show-month-and-year) .calendar-body,:host-context([dir=rtl]).show-month-and-year .calendar-body,:host-context([dir=rtl]):host(.show-month-and-year) .datetime-time,:host-context([dir=rtl]).show-month-and-year .datetime-time{left:unset;right:unset;right:-99999px}@supports selector(:dir(rtl)){:host(.show-month-and-year) .calendar-next-prev:dir(rtl),:host(.show-month-and-year) .calendar-days-of-week:dir(rtl),:host(.show-month-and-year) .calendar-body:dir(rtl),:host(.show-month-and-year) .datetime-time:dir(rtl){left:unset;right:unset;right:-99999px}}}}@supports (not (background: -webkit-named-image(apple-pay-logo-black))) or ((background: -webkit-named-image(apple-pay-logo-black)) and (aspect-ratio: 1/1)){:host(.show-month-and-year) .calendar-next-prev,:host(.show-month-and-year) .calendar-days-of-week,:host(.show-month-and-year) .calendar-body,:host(.show-month-and-year) .datetime-time{display:none}}:host(.month-year-picker-open) .datetime-footer{display:none}:host(.datetime-readonly),:host(.datetime-disabled){pointer-events:none}:host(.datetime-disabled){opacity:0.4}:host .datetime-header .datetime-title{text-overflow:ellipsis;white-space:nowrap;overflow:hidden}:host .datetime-action-buttons.has-clear-button{width:100%}:host .datetime-action-buttons ion-buttons{display:-ms-flexbox;display:flex;-ms-flex-pack:justify;justify-content:space-between}:host .calendar-action-buttons{display:-ms-flexbox;display:flex;-ms-flex-pack:justify;justify-content:space-between}:host .calendar-action-buttons ion-item,:host .calendar-action-buttons ion-button{--background:translucent}:host .calendar-action-buttons ion-item ion-label{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center}:host .calendar-action-buttons ion-item ion-icon{-webkit-padding-start:4px;padding-inline-start:4px;-webkit-padding-end:0;padding-inline-end:0;padding-top:0;padding-bottom:0}:host .calendar-days-of-week{display:grid;grid-template-columns:repeat(7, 1fr);text-align:center}:host .calendar-body{display:-ms-flexbox;display:flex;-ms-flex-positive:1;flex-grow:1;-webkit-scroll-snap-type:x mandatory;-ms-scroll-snap-type:x mandatory;scroll-snap-type:x mandatory;overflow-x:scroll;overflow-y:hidden;scrollbar-width:none;outline:none}:host .calendar-body .calendar-month{display:-ms-flexbox;display:flex;-ms-flex-flow:column;flex-flow:column;scroll-snap-align:start;scroll-snap-stop:always;-ms-flex-negative:0;flex-shrink:0;width:100%}:host .calendar-body .calendar-month-disabled{scroll-snap-align:none}:host .calendar-body::-webkit-scrollbar{display:none}:host .calendar-body .calendar-month-grid{display:grid;grid-template-columns:repeat(7, 1fr)}:host .calendar-day-wrapper{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;min-width:0;min-height:0;overflow:visible}:host .calendar-day{border-radius:50%;-webkit-padding-start:0px;padding-inline-start:0px;-webkit-padding-end:0px;padding-inline-end:0px;padding-top:0px;padding-bottom:0px;-webkit-margin-start:0px;margin-inline-start:0px;-webkit-margin-end:0px;margin-inline-end:0px;margin-top:0px;margin-bottom:0px;display:-ms-flexbox;display:flex;position:relative;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;border:none;outline:none;background:none;color:currentColor;font-family:var(--ion-font-family, inherit);cursor:pointer;-webkit-appearance:none;-moz-appearance:none;appearance:none;z-index:0}:host .calendar-day[disabled]{pointer-events:none;opacity:0.4}.calendar-day:focus{background:rgba(var(--ion-color-base-rgb), 0.2);-webkit-box-shadow:0px 0px 0px 4px rgba(var(--ion-color-base-rgb), 0.2);box-shadow:0px 0px 0px 4px rgba(var(--ion-color-base-rgb), 0.2)}:host .datetime-time{display:-ms-flexbox;display:flex;-ms-flex-pack:justify;justify-content:space-between}:host(.datetime-presentation-time) .datetime-time{padding-left:0;padding-right:0;padding-top:0;padding-bottom:0}:host ion-popover{--height:200px}:host .time-header{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center}:host .time-body{border-radius:8px;-webkit-padding-start:12px;padding-inline-start:12px;-webkit-padding-end:12px;padding-inline-end:12px;padding-top:6px;padding-bottom:6px;display:-ms-flexbox;display:flex;border:none;background:var(--ion-color-step-300, #edeef0);color:var(--ion-text-color, #000);font-family:inherit;font-size:inherit;cursor:pointer;-webkit-appearance:none;-moz-appearance:none;appearance:none}:host .time-body-active{color:var(--ion-color-base)}:host(.in-item){position:static}:host(.show-month-and-year) .calendar-action-buttons ion-item{--color:var(--ion-color-base)}:host{--background:var(--ion-color-step-100, #ffffff);--title-color:var(--ion-color-contrast)}:host .datetime-header{-webkit-padding-start:20px;padding-inline-start:20px;-webkit-padding-end:20px;padding-inline-end:20px;padding-top:20px;padding-bottom:20px;background:var(--ion-color-base);color:var(--title-color)}:host .datetime-header .datetime-title{font-size:12px;text-transform:uppercase}:host .datetime-header .datetime-selected-date{margin-top:30px;font-size:34px}:host .datetime-calendar .calendar-action-buttons ion-item{--padding-start:20px}:host .calendar-action-buttons ion-item,:host .calendar-action-buttons ion-button{--color:var(--ion-color-step-650, #595959)}:host .calendar-days-of-week{-webkit-padding-start:10px;padding-inline-start:10px;-webkit-padding-end:10px;padding-inline-end:10px;padding-top:0px;padding-bottom:0px;color:var(--ion-color-step-500, gray);font-size:14px;line-height:36px}:host .calendar-body .calendar-month .calendar-month-grid{-webkit-padding-start:10px;padding-inline-start:10px;-webkit-padding-end:10px;padding-inline-end:10px;padding-top:4px;padding-bottom:4px;grid-template-rows:repeat(6, 1fr)}:host .calendar-day{width:42px;min-width:42px;height:42px;font-size:14px}:host .calendar-day.calendar-day-today{border:1px solid var(--ion-color-base);color:var(--ion-color-base)}:host .calendar-day.calendar-day-active{color:var(--ion-color-contrast)}.calendar-day.calendar-day-active{border:1px solid var(--ion-color-base);background:var(--ion-color-base)}:host .datetime-time{-webkit-padding-start:16px;padding-inline-start:16px;-webkit-padding-end:16px;padding-inline-end:16px;padding-top:8px;padding-bottom:8px}:host .time-header{color:var(--ion-color-step-650, #595959)}:host(.datetime-presentation-month) .datetime-year,:host(.datetime-presentation-year) .datetime-year,:host(.datetime-presentation-month-year) .datetime-year{margin-top:20px;margin-bottom:20px}:host .datetime-buttons{-webkit-padding-start:10px;padding-inline-start:10px;-webkit-padding-end:10px;padding-inline-end:10px;padding-top:10px;padding-bottom:10px;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:end;justify-content:flex-end}:host .datetime-view-buttons ion-button{color:var(--ion-color-step-800, #333333)}\";\nvar Datetime = /*@__PURE__*/proxyCustomElement( /*#__PURE__*/function (_HTMLElement) {\n  _inherits(Datetime, _HTMLElement);\n  function Datetime() {\n    var _this;\n    _classCallCheck(this, Datetime);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Datetime).call(this));\n    _this.__registerHost();\n    _this.__attachShadow();\n    _this.ionCancel = createEvent(_assertThisInitialized(_assertThisInitialized(_this)), \"ionCancel\", 7);\n    _this.ionChange = createEvent(_assertThisInitialized(_assertThisInitialized(_this)), \"ionChange\", 7);\n    _this.ionValueChange = createEvent(_assertThisInitialized(_assertThisInitialized(_this)), \"ionValueChange\", 7);\n    _this.ionFocus = createEvent(_assertThisInitialized(_assertThisInitialized(_this)), \"ionFocus\", 7);\n    _this.ionBlur = createEvent(_assertThisInitialized(_assertThisInitialized(_this)), \"ionBlur\", 7);\n    _this.ionStyle = createEvent(_assertThisInitialized(_assertThisInitialized(_this)), \"ionStyle\", 7);\n    _this.ionRender = createEvent(_assertThisInitialized(_assertThisInitialized(_this)), \"ionRender\", 7);\n    _this.inputId = \"ion-dt-\".concat(datetimeIds++);\n    _this.prevPresentation = null;\n    _this.warnIfIncorrectValueUsage = function () {\n      var _assertThisInitialize = _assertThisInitialized(_assertThisInitialized(_this)),\n        multiple = _assertThisInitialize.multiple,\n        value = _assertThisInitialize.value;\n      if (!multiple && Array.isArray(value)) {\n        /**\n         * We do some processing on the `value` array so\n         * that it looks more like an array when logged to\n         * the console.\n         * Example given ['a', 'b']\n         * Default toString() behavior: a,b\n         * Custom behavior: ['a', 'b']\n         */\n        printIonWarning(\"ion-datetime was passed an array of values, but multiple=\\\"false\\\". This is incorrect usage and may result in unexpected behaviors. To dismiss this warning, pass a string to the \\\"value\\\" property when multiple=\\\"false\\\".\\n\\n  Value Passed: [\".concat(value.map(function (v) {\n          return \"'\".concat(v, \"'\");\n        }).join(', '), \"]\\n\"), _this.el);\n      }\n    };\n    _this.setValue = function (value) {\n      _this.value = value;\n      _this.ionChange.emit({\n        value: value\n      });\n    };\n    /**\n     * Returns the DatetimePart interface\n     * to use when rendering an initial set of\n     * data. This should be used when rendering an\n     * interface in an environment where the `value`\n     * may not be set. This function works\n     * by returning the first selected date and then\n     * falling back to defaultParts if no active date\n     * is selected.\n     */\n    _this.getActivePartsWithFallback = function () {\n      var _a;\n      var _assertThisInitialize2 = _assertThisInitialized(_assertThisInitialized(_this)),\n        defaultParts = _assertThisInitialize2.defaultParts;\n      return (_a = _this.getActivePart()) !== null && _a !== void 0 ? _a : defaultParts;\n    };\n    _this.getActivePart = function () {\n      var _assertThisInitialize3 = _assertThisInitialized(_assertThisInitialized(_this)),\n        activeParts = _assertThisInitialize3.activeParts;\n      return Array.isArray(activeParts) ? activeParts[0] : activeParts;\n    };\n    _this.closeParentOverlay = function () {\n      var popoverOrModal = _this.el.closest('ion-modal, ion-popover');\n      if (popoverOrModal) {\n        popoverOrModal.dismiss();\n      }\n    };\n    _this.setWorkingParts = function (parts) {\n      _this.workingParts = Object.assign({}, parts);\n    };\n    _this.setActiveParts = function (parts) {\n      var removeDate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var _assertThisInitialize4 = _assertThisInitialized(_assertThisInitialized(_this)),\n        multiple = _assertThisInitialize4.multiple,\n        minParts = _assertThisInitialize4.minParts,\n        maxParts = _assertThisInitialize4.maxParts,\n        activeParts = _assertThisInitialize4.activeParts;\n      /**\n       * When setting the active parts, it is possible\n       * to set invalid data. For example,\n       * when updating January 31 to February,\n       * February 31 does not exist. As a result\n       * we need to validate the active parts and\n       * ensure that we are only setting valid dates.\n       * Additionally, we need to update the working parts\n       * too in the event that the validated parts are different.\n       */\n      var validatedParts = validateParts(parts, minParts, maxParts);\n      _this.setWorkingParts(validatedParts);\n      if (multiple) {\n        var activePartsArray = Array.isArray(activeParts) ? activeParts : [activeParts];\n        if (removeDate) {\n          _this.activeParts = activePartsArray.filter(function (p) {\n            return !isSameDay(p, validatedParts);\n          });\n        } else {\n          _this.activeParts = [].concat(_toConsumableArray(activePartsArray), [validatedParts]);\n        }\n      } else {\n        _this.activeParts = Object.assign({}, validatedParts);\n      }\n      var hasSlottedButtons = _this.el.querySelector('[slot=\"buttons\"]') !== null;\n      if (hasSlottedButtons || _this.showDefaultButtons) {\n        return;\n      }\n      _this.confirm();\n    };\n    _this.initializeKeyboardListeners = function () {\n      var calendarBodyRef = _this.calendarBodyRef;\n      if (!calendarBodyRef) {\n        return;\n      }\n      var root = _this.el.shadowRoot;\n      /**\n       * Get a reference to the month\n       * element we are currently viewing.\n       */\n      var currentMonth = calendarBodyRef.querySelector('.calendar-month:nth-of-type(2)');\n      /**\n       * When focusing the calendar body, we want to pass focus\n       * to the working day, but other days should\n       * only be accessible using the arrow keys. Pressing\n       * Tab should jump between bodies of selectable content.\n       */\n      var checkCalendarBodyFocus = function checkCalendarBodyFocus(ev) {\n        var _a;\n        var record = ev[0];\n        /**\n         * If calendar body was already focused\n         * when this fired or if the calendar body\n         * if not currently focused, we should not re-focus\n         * the inner day.\n         */\n        if (((_a = record.oldValue) === null || _a === void 0 ? void 0 : _a.includes('ion-focused')) || !calendarBodyRef.classList.contains('ion-focused')) {\n          return;\n        }\n        _this.focusWorkingDay(currentMonth);\n      };\n      var mo = new MutationObserver(checkCalendarBodyFocus);\n      mo.observe(calendarBodyRef, {\n        attributeFilter: ['class'],\n        attributeOldValue: true\n      });\n      _this.destroyKeyboardMO = function () {\n        mo === null || mo === void 0 ? void 0 : mo.disconnect();\n      };\n      /**\n       * We must use keydown not keyup as we want\n       * to prevent scrolling when using the arrow keys.\n       */\n      calendarBodyRef.addEventListener('keydown', function (ev) {\n        var activeElement = root.activeElement;\n        if (!activeElement || !activeElement.classList.contains('calendar-day')) {\n          return;\n        }\n        var parts = getPartsFromCalendarDay(activeElement);\n        var partsToFocus;\n        switch (ev.key) {\n          case 'ArrowDown':\n            ev.preventDefault();\n            partsToFocus = getNextWeek(parts);\n            break;\n          case 'ArrowUp':\n            ev.preventDefault();\n            partsToFocus = getPreviousWeek(parts);\n            break;\n          case 'ArrowRight':\n            ev.preventDefault();\n            partsToFocus = getNextDay(parts);\n            break;\n          case 'ArrowLeft':\n            ev.preventDefault();\n            partsToFocus = getPreviousDay(parts);\n            break;\n          case 'Home':\n            ev.preventDefault();\n            partsToFocus = getStartOfWeek(parts);\n            break;\n          case 'End':\n            ev.preventDefault();\n            partsToFocus = getEndOfWeek(parts);\n            break;\n          case 'PageUp':\n            ev.preventDefault();\n            partsToFocus = ev.shiftKey ? getPreviousYear(parts) : getPreviousMonth(parts);\n            break;\n          case 'PageDown':\n            ev.preventDefault();\n            partsToFocus = ev.shiftKey ? getNextYear(parts) : getNextMonth(parts);\n            break;\n          /**\n           * Do not preventDefault here\n           * as we do not want to override other\n           * browser defaults such as pressing Enter/Space\n           * to select a day.\n           */\n          default:\n            return;\n        }\n        /**\n         * If the day we want to move focus to is\n         * disabled, do not do anything.\n         */\n        if (isDayDisabled(partsToFocus, _this.minParts, _this.maxParts)) {\n          return;\n        }\n        _this.setWorkingParts(Object.assign(Object.assign({}, _this.workingParts), partsToFocus));\n        /**\n         * Give view a chance to re-render\n         * then move focus to the new working day\n         */\n        requestAnimationFrame(function () {\n          return _this.focusWorkingDay(currentMonth);\n        });\n      });\n    };\n    _this.focusWorkingDay = function (currentMonth) {\n      /**\n       * Get the number of padding days so\n       * we know how much to offset our next selector by\n       * to grab the correct calendar-day element.\n       */\n      var padding = currentMonth.querySelectorAll('.calendar-day-padding');\n      var day = _this.workingParts.day;\n      if (day === null) {\n        return;\n      }\n      /**\n       * Get the calendar day element\n       * and focus it.\n       */\n      var dayEl = currentMonth.querySelector(\".calendar-day-wrapper:nth-of-type(\".concat(padding.length + day, \") .calendar-day\"));\n      if (dayEl) {\n        dayEl.focus();\n      }\n    };\n    _this.processMinParts = function () {\n      var _assertThisInitialize5 = _assertThisInitialized(_assertThisInitialized(_this)),\n        min = _assertThisInitialize5.min,\n        defaultParts = _assertThisInitialize5.defaultParts;\n      if (min === undefined) {\n        _this.minParts = undefined;\n        return;\n      }\n      _this.minParts = parseMinParts(min, defaultParts);\n    };\n    _this.processMaxParts = function () {\n      var _assertThisInitialize6 = _assertThisInitialized(_assertThisInitialized(_this)),\n        max = _assertThisInitialize6.max,\n        defaultParts = _assertThisInitialize6.defaultParts;\n      if (max === undefined) {\n        _this.maxParts = undefined;\n        return;\n      }\n      _this.maxParts = parseMaxParts(max, defaultParts);\n    };\n    _this.initializeCalendarListener = function () {\n      var calendarBodyRef = _this.calendarBodyRef;\n      if (!calendarBodyRef) {\n        return;\n      }\n      /**\n       * For performance reasons, we only render 3\n       * months at a time: The current month, the previous\n       * month, and the next month. We have a scroll listener\n       * on the calendar body to append/prepend new months.\n       *\n       * We can do this because Stencil is smart enough to not\n       * re-create the .calendar-month containers, but rather\n       * update the content within those containers.\n       *\n       * As an added bonus, WebKit has some troubles with\n       * scroll-snap-stop: always, so not rendering all of\n       * the months in a row allows us to mostly sidestep\n       * that issue.\n       */\n      var months = calendarBodyRef.querySelectorAll('.calendar-month');\n      var startMonth = months[0];\n      var workingMonth = months[1];\n      var endMonth = months[2];\n      var mode = getIonMode(_assertThisInitialized(_assertThisInitialized(_this)));\n      var needsiOSRubberBandFix = mode === 'ios' && typeof navigator !== 'undefined' && navigator.maxTouchPoints > 1;\n      /**\n       * Before setting up the scroll listener,\n       * scroll the middle month into view.\n       * scrollIntoView() will scroll entire page\n       * if element is not in viewport. Use scrollLeft instead.\n       */\n      writeTask(function () {\n        calendarBodyRef.scrollLeft = startMonth.clientWidth * (isRTL(_this.el) ? -1 : 1);\n        var getChangedMonth = function getChangedMonth(parts) {\n          var box = calendarBodyRef.getBoundingClientRect();\n          /**\n           * If the current scroll position is all the way to the left\n           * then we have scrolled to the previous month.\n           * Otherwise, assume that we have scrolled to the next\n           * month. We have a tolerance of 2px to account for\n           * sub pixel rendering.\n           *\n           * Check below the next line ensures that we did not\n           * swipe and abort (i.e. we swiped but we are still on the current month).\n           */\n          var month = calendarBodyRef.scrollLeft <= 2 ? startMonth : endMonth;\n          /**\n           * The edge of the month must be lined up with\n           * the edge of the calendar body in order for\n           * the component to update. Otherwise, it\n           * may be the case that the user has paused their\n           * swipe or the browser has not finished snapping yet.\n           * Rather than check if the x values are equal,\n           * we give it a tolerance of 2px to account for\n           * sub pixel rendering.\n           */\n          var monthBox = month.getBoundingClientRect();\n          if (Math.abs(monthBox.x - box.x) > 2) return;\n          /**\n           * If we're force-rendering a month, assume we've\n           * scrolled to that and return it.\n           *\n           * If forceRenderDate is ever used in a context where the\n           * forced month is not immediately auto-scrolled to, this\n           * should be updated to also check whether `month` has the\n           * same month and year as the forced date.\n           */\n          var _assertThisInitialize7 = _assertThisInitialized(_assertThisInitialized(_this)),\n            forceRenderDate = _assertThisInitialize7.forceRenderDate;\n          if (forceRenderDate !== undefined) {\n            return {\n              month: forceRenderDate.month,\n              year: forceRenderDate.year,\n              day: forceRenderDate.day\n            };\n          }\n          /**\n           * From here, we can determine if the start\n           * month or the end month was scrolled into view.\n           * If no month was changed, then we can return from\n           * the scroll callback early.\n           */\n          if (month === startMonth) {\n            return getPreviousMonth(parts);\n          } else if (month === endMonth) {\n            return getNextMonth(parts);\n          } else {\n            return;\n          }\n        };\n        var updateActiveMonth = function updateActiveMonth() {\n          if (needsiOSRubberBandFix) {\n            calendarBodyRef.style.removeProperty('pointer-events');\n            appliediOSRubberBandFix = false;\n          }\n          /**\n           * If the month did not change\n           * then we can return early.\n           */\n          var newDate = getChangedMonth(_this.workingParts);\n          if (!newDate) return;\n          var month = newDate.month,\n            day = newDate.day,\n            year = newDate.year;\n          if (isMonthDisabled({\n            month: month,\n            year: year,\n            day: null\n          }, {\n            minParts: Object.assign(Object.assign({}, _this.minParts), {\n              day: null\n            }),\n            maxParts: Object.assign(Object.assign({}, _this.maxParts), {\n              day: null\n            })\n          })) {\n            return;\n          }\n          /**\n           * Prevent scrolling for other browsers\n           * to give the DOM time to update and the container\n           * time to properly snap.\n           */\n          calendarBodyRef.style.setProperty('overflow', 'hidden');\n          /**\n           * Use a writeTask here to ensure\n           * that the state is updated and the\n           * correct month is scrolled into view\n           * in the same frame. This is not\n           * typically a problem on newer devices\n           * but older/slower device may have a flicker\n           * if we did not do this.\n           */\n          writeTask(function () {\n            _this.setWorkingParts(Object.assign(Object.assign({}, _this.workingParts), {\n              month: month,\n              day: day,\n              year: year\n            }));\n            calendarBodyRef.scrollLeft = workingMonth.clientWidth * (isRTL(_this.el) ? -1 : 1);\n            calendarBodyRef.style.removeProperty('overflow');\n            if (_this.resolveForceDateScrolling) {\n              _this.resolveForceDateScrolling();\n            }\n          });\n        };\n        /**\n         * When the container finishes scrolling we\n         * need to update the DOM with the selected month.\n         */\n        var scrollTimeout;\n        /**\n         * We do not want to attempt to set pointer-events\n         * multiple times within a single swipe gesture as\n         * that adds unnecessary work to the main thread.\n         */\n        var appliediOSRubberBandFix = false;\n        var scrollCallback = function scrollCallback() {\n          if (scrollTimeout) {\n            clearTimeout(scrollTimeout);\n          }\n          /**\n           * On iOS it is possible to quickly rubber band\n           * the scroll area before the scroll timeout has fired.\n           * This results in users reaching the end of the scrollable\n           * container before the DOM has updated.\n           * By setting `pointer-events: none` we can ensure that\n           * subsequent swipes do not happen while the container\n           * is snapping.\n           */\n          if (!appliediOSRubberBandFix && needsiOSRubberBandFix) {\n            calendarBodyRef.style.setProperty('pointer-events', 'none');\n            appliediOSRubberBandFix = true;\n          }\n          // Wait ~3 frames\n          scrollTimeout = setTimeout(updateActiveMonth, 50);\n        };\n        calendarBodyRef.addEventListener('scroll', scrollCallback);\n        _this.destroyCalendarListener = function () {\n          calendarBodyRef.removeEventListener('scroll', scrollCallback);\n        };\n      });\n    };\n    /**\n     * Clean up all listeners except for the overlay\n     * listener. This is so that we can re-create the listeners\n     * if the datetime has been hidden/presented by a modal or popover.\n     */\n    _this.destroyInteractionListeners = function () {\n      var _assertThisInitialize8 = _assertThisInitialized(_assertThisInitialized(_this)),\n        destroyCalendarListener = _assertThisInitialize8.destroyCalendarListener,\n        destroyKeyboardMO = _assertThisInitialize8.destroyKeyboardMO;\n      if (destroyCalendarListener !== undefined) {\n        destroyCalendarListener();\n      }\n      if (destroyKeyboardMO !== undefined) {\n        destroyKeyboardMO();\n      }\n    };\n    _this.processValue = function (value) {\n      var hasValue = value !== null && value !== undefined && (!Array.isArray(value) || value.length > 0);\n      var valueToProcess = hasValue ? parseDate(value) : _this.defaultParts;\n      var _assertThisInitialize9 = _assertThisInitialized(_assertThisInitialized(_this)),\n        minParts = _assertThisInitialize9.minParts,\n        maxParts = _assertThisInitialize9.maxParts,\n        workingParts = _assertThisInitialize9.workingParts,\n        el = _assertThisInitialize9.el;\n      _this.warnIfIncorrectValueUsage();\n      /**\n       * Return early if the value wasn't parsed correctly, such as\n       * if an improperly formatted date string was provided.\n       */\n      if (!valueToProcess) {\n        return;\n      }\n      /**\n       * Datetime should only warn of out of bounds values\n       * if set by the user. If the `value` is undefined,\n       * we will default to today's date which may be out\n       * of bounds. In this case, the warning makes it look\n       * like the developer did something wrong which is\n       * not true.\n       */\n      if (hasValue) {\n        warnIfValueOutOfBounds(valueToProcess, minParts, maxParts);\n      }\n      /**\n       * If there are multiple values, pick an arbitrary one to clamp to. This way,\n       * if the values are across months, we always show at least one of them. Note\n       * that the values don't necessarily have to be in order.\n       */\n      var singleValue = Array.isArray(valueToProcess) ? valueToProcess[0] : valueToProcess;\n      var targetValue = clampDate(singleValue, minParts, maxParts);\n      var month = targetValue.month,\n        day = targetValue.day,\n        year = targetValue.year,\n        hour = targetValue.hour,\n        minute = targetValue.minute;\n      var ampm = parseAmPm(hour);\n      /**\n       * Since `activeParts` indicates a value that\n       * been explicitly selected either by the\n       * user or the app, only update `activeParts`\n       * if the `value` property is set.\n       */\n      if (hasValue) {\n        if (Array.isArray(valueToProcess)) {\n          _this.activeParts = _toConsumableArray(valueToProcess);\n        } else {\n          _this.activeParts = {\n            month: month,\n            day: day,\n            year: year,\n            hour: hour,\n            minute: minute,\n            ampm: ampm\n          };\n        }\n      } else {\n        /**\n         * Reset the active parts if the value is not set.\n         * This will clear the selected calendar day when\n         * performing a clear action or using the reset() method.\n         */\n        _this.activeParts = [];\n      }\n      /**\n       * Only animate if:\n       * 1. We're using grid style (wheel style pickers should just jump to new value)\n       * 2. The month and/or year actually changed, and both are defined (otherwise there's nothing to animate to)\n       * 3. The calendar body is visible (prevents animation when in collapsed datetime-button, for example)\n       * 4. The month/year picker is not open (since you wouldn't see the animation anyway)\n       */\n      var didChangeMonth = month !== undefined && month !== workingParts.month || year !== undefined && year !== workingParts.year;\n      var bodyIsVisible = el.classList.contains('datetime-ready');\n      var _assertThisInitialize10 = _assertThisInitialized(_assertThisInitialized(_this)),\n        isGridStyle = _assertThisInitialize10.isGridStyle,\n        showMonthAndYear = _assertThisInitialize10.showMonthAndYear;\n      if (isGridStyle && didChangeMonth && bodyIsVisible && !showMonthAndYear) {\n        _this.animateToDate(targetValue);\n      } else {\n        /**\n         * We only need to do this if we didn't just animate to a new month,\n         * since that calls prevMonth/nextMonth which calls setWorkingParts for us.\n         */\n        _this.setWorkingParts({\n          month: month,\n          day: day,\n          year: year,\n          hour: hour,\n          minute: minute,\n          ampm: ampm\n        });\n      }\n    };\n    _this.animateToDate = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(targetValue) {\n        var _assertThisInitialize11, workingParts, forceDateScrollingPromise, targetMonthIsBefore;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _assertThisInitialize11 = _assertThisInitialized(_assertThisInitialized(_this)), workingParts = _assertThisInitialize11.workingParts;\n              /**\n               * Tell other render functions that we need to force the\n               * target month to appear in place of the actual next/prev month.\n               * Because this is a State variable, a rerender will be triggered\n               * automatically, updating the rendered months.\n               */\n              _this.forceRenderDate = targetValue;\n              /**\n               * Flag that we've started scrolling to the forced date.\n               * The resolve function will be called by the datetime's\n               * scroll listener when it's done updating everything.\n               * This is a replacement for making prev/nextMonth async,\n               * since the logic we're waiting on is in a listener.\n               */\n              forceDateScrollingPromise = new Promise(function (resolve) {\n                _this.resolveForceDateScrolling = resolve;\n              });\n              /**\n               * Animate smoothly to the forced month. This will also update\n               * workingParts and correct the surrounding months for us.\n               */\n              targetMonthIsBefore = isBefore(targetValue, workingParts);\n              targetMonthIsBefore ? _this.prevMonth() : _this.nextMonth();\n              _context.next = 7;\n              return forceDateScrollingPromise;\n            case 7:\n              _this.resolveForceDateScrolling = undefined;\n              _this.forceRenderDate = undefined;\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    _this.onFocus = function () {\n      _this.ionFocus.emit();\n    };\n    _this.onBlur = function () {\n      _this.ionBlur.emit();\n    };\n    _this.hasValue = function () {\n      return _this.value != null;\n    };\n    _this.nextMonth = function () {\n      var calendarBodyRef = _this.calendarBodyRef;\n      if (!calendarBodyRef) {\n        return;\n      }\n      var nextMonth = calendarBodyRef.querySelector('.calendar-month:last-of-type');\n      if (!nextMonth) {\n        return;\n      }\n      var left = nextMonth.offsetWidth * 2;\n      calendarBodyRef.scrollTo({\n        top: 0,\n        left: left * (isRTL(_this.el) ? -1 : 1),\n        behavior: 'smooth'\n      });\n    };\n    _this.prevMonth = function () {\n      var calendarBodyRef = _this.calendarBodyRef;\n      if (!calendarBodyRef) {\n        return;\n      }\n      var prevMonth = calendarBodyRef.querySelector('.calendar-month:first-of-type');\n      if (!prevMonth) {\n        return;\n      }\n      calendarBodyRef.scrollTo({\n        top: 0,\n        left: 0,\n        behavior: 'smooth'\n      });\n    };\n    _this.toggleMonthAndYearView = function () {\n      _this.showMonthAndYear = !_this.showMonthAndYear;\n    };\n    _this.showMonthAndYear = false;\n    _this.activeParts = [];\n    _this.workingParts = {\n      month: 5,\n      day: 28,\n      year: 2021,\n      hour: 13,\n      minute: 52,\n      ampm: 'pm'\n    };\n    _this.isTimePopoverOpen = false;\n    _this.forceRenderDate = undefined;\n    _this.color = 'primary';\n    _this.name = _this.inputId;\n    _this.disabled = false;\n    _this.readonly = false;\n    _this.isDateEnabled = undefined;\n    _this.min = undefined;\n    _this.max = undefined;\n    _this.presentation = 'date-time';\n    _this.cancelText = 'Cancel';\n    _this.doneText = 'Done';\n    _this.clearText = 'Clear';\n    _this.yearValues = undefined;\n    _this.monthValues = undefined;\n    _this.dayValues = undefined;\n    _this.hourValues = undefined;\n    _this.minuteValues = undefined;\n    _this.locale = 'default';\n    _this.firstDayOfWeek = 0;\n    _this.titleSelectedDatesFormatter = undefined;\n    _this.multiple = false;\n    _this.highlightedDates = undefined;\n    _this.value = undefined;\n    _this.showDefaultTitle = false;\n    _this.showDefaultButtons = false;\n    _this.showClearButton = false;\n    _this.showDefaultTimeLabel = true;\n    _this.hourCycle = undefined;\n    _this.size = 'fixed';\n    _this.preferWheel = false;\n    return _this;\n  }\n  _createClass(Datetime, [{\n    key: \"disabledChanged\",\n    value: function disabledChanged() {\n      this.emitStyle();\n    }\n  }, {\n    key: \"minChanged\",\n    value: function minChanged() {\n      this.processMinParts();\n    }\n  }, {\n    key: \"maxChanged\",\n    value: function maxChanged() {\n      this.processMaxParts();\n    }\n  }, {\n    key: \"yearValuesChanged\",\n    value: function yearValuesChanged() {\n      this.parsedYearValues = convertToArrayOfNumbers(this.yearValues);\n    }\n  }, {\n    key: \"monthValuesChanged\",\n    value: function monthValuesChanged() {\n      this.parsedMonthValues = convertToArrayOfNumbers(this.monthValues);\n    }\n  }, {\n    key: \"dayValuesChanged\",\n    value: function dayValuesChanged() {\n      this.parsedDayValues = convertToArrayOfNumbers(this.dayValues);\n    }\n  }, {\n    key: \"hourValuesChanged\",\n    value: function hourValuesChanged() {\n      this.parsedHourValues = convertToArrayOfNumbers(this.hourValues);\n    }\n  }, {\n    key: \"minuteValuesChanged\",\n    value: function minuteValuesChanged() {\n      this.parsedMinuteValues = convertToArrayOfNumbers(this.minuteValues);\n    }\n    /**\n     * Update the datetime value when the value changes\n     */\n  }, {\n    key: \"valueChanged\",\n    value: function () {\n      var _valueChanged = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var value;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              value = this.value;\n              if (this.hasValue()) {\n                this.processValue(value);\n              }\n              this.emitStyle();\n              this.ionValueChange.emit({\n                value: value\n              });\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function valueChanged() {\n        return _valueChanged.apply(this, arguments);\n      }\n      return valueChanged;\n    }()\n    /**\n     * Confirms the selected datetime value, updates the\n     * `value` property, and optionally closes the popover\n     * or modal that the datetime was presented in.\n     */\n  }, {\n    key: \"confirm\",\n    value: function () {\n      var _confirm = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var closeOverlay,\n          isCalendarPicker,\n          activeParts,\n          activePartsIsArray,\n          _args3 = arguments;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              closeOverlay = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : false;\n              isCalendarPicker = this.isCalendarPicker, activeParts = this.activeParts;\n              /**\n               * We only update the value if the presentation is not a calendar picker.\n               */\n              if (activeParts !== undefined || !isCalendarPicker) {\n                activePartsIsArray = Array.isArray(activeParts);\n                if (activePartsIsArray && activeParts.length === 0) {\n                  this.setValue(undefined);\n                } else {\n                  this.setValue(convertDataToISO(activeParts));\n                }\n              }\n              if (closeOverlay) {\n                this.closeParentOverlay();\n              }\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function confirm() {\n        return _confirm.apply(this, arguments);\n      }\n      return confirm;\n    }()\n    /**\n     * Resets the internal state of the datetime but does not update the value.\n     * Passing a valid ISO-8601 string will reset the state of the component to the provided date.\n     * If no value is provided, the internal state will be reset to the clamped value of the min, max and today.\n     */\n  }, {\n    key: \"reset\",\n    value: function () {\n      var _reset = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(startDate) {\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              this.processValue(startDate);\n            case 1:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }));\n      function reset(_x2) {\n        return _reset.apply(this, arguments);\n      }\n      return reset;\n    }()\n    /**\n     * Emits the ionCancel event and\n     * optionally closes the popover\n     * or modal that the datetime was\n     * presented in.\n     */\n  }, {\n    key: \"cancel\",\n    value: function () {\n      var _cancel = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var closeOverlay,\n          _args5 = arguments;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              closeOverlay = _args5.length > 0 && _args5[0] !== undefined ? _args5[0] : false;\n              this.ionCancel.emit();\n              if (closeOverlay) {\n                this.closeParentOverlay();\n              }\n            case 3:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, this);\n      }));\n      function cancel() {\n        return _cancel.apply(this, arguments);\n      }\n      return cancel;\n    }()\n  }, {\n    key: \"connectedCallback\",\n    value: function connectedCallback() {\n      this.clearFocusVisible = startFocusVisible(this.el).destroy;\n    }\n  }, {\n    key: \"disconnectedCallback\",\n    value: function disconnectedCallback() {\n      if (this.clearFocusVisible) {\n        this.clearFocusVisible();\n        this.clearFocusVisible = undefined;\n      }\n    }\n  }, {\n    key: \"initializeListeners\",\n    value: function initializeListeners() {\n      this.initializeCalendarListener();\n      this.initializeKeyboardListeners();\n    }\n  }, {\n    key: \"componentDidLoad\",\n    value: function componentDidLoad() {\n      var _this2 = this;\n      /**\n       * If a scrollable element is hidden using `display: none`,\n       * it will not have a scroll height meaning we cannot scroll elements\n       * into view. As a result, we will need to wait for the datetime to become\n       * visible if used inside of a modal or a popover otherwise the scrollable\n       * areas will not have the correct values snapped into place.\n       */\n      var visibleCallback = function visibleCallback(entries) {\n        var ev = entries[0];\n        if (!ev.isIntersecting) {\n          return;\n        }\n        _this2.initializeListeners();\n        /**\n         * TODO FW-2793: Datetime needs a frame to ensure that it\n         * can properly scroll contents into view. As a result\n         * we hide the scrollable content until after that frame\n         * so users do not see the content quickly shifting. The downside\n         * is that the content will pop into view a frame after. Maybe there\n         * is a better way to handle this?\n         */\n        writeTask(function () {\n          _this2.el.classList.add('datetime-ready');\n        });\n      };\n      var visibleIO = new IntersectionObserver(visibleCallback, {\n        threshold: 0.01\n      });\n      /**\n       * Use raf to avoid a race condition between the component loading and\n       * its display animation starting (such as when shown in a modal). This\n       * could cause the datetime to start at a visibility of 0, erroneously\n       * triggering the `hiddenIO` observer below.\n       */\n      raf(function () {\n        return visibleIO === null || visibleIO === void 0 ? void 0 : visibleIO.observe(_this2.el);\n      });\n      /**\n       * We need to clean up listeners when the datetime is hidden\n       * in a popover/modal so that we can properly scroll containers\n       * back into view if they are re-presented. When the datetime is hidden\n       * the scroll areas have scroll widths/heights of 0px, so any snapping\n       * we did originally has been lost.\n       */\n      var hiddenCallback = function hiddenCallback(entries) {\n        var ev = entries[0];\n        if (ev.isIntersecting) {\n          return;\n        }\n        _this2.destroyInteractionListeners();\n        /**\n         * When datetime is hidden, we need to make sure that\n         * the month/year picker is closed. Otherwise,\n         * it will be open when the datetime re-appears\n         * and the scroll area of the calendar grid will be 0.\n         * As a result, the wrong month will be shown.\n         */\n        _this2.showMonthAndYear = false;\n        writeTask(function () {\n          _this2.el.classList.remove('datetime-ready');\n        });\n      };\n      var hiddenIO = new IntersectionObserver(hiddenCallback, {\n        threshold: 0\n      });\n      raf(function () {\n        return hiddenIO === null || hiddenIO === void 0 ? void 0 : hiddenIO.observe(_this2.el);\n      });\n      /**\n       * Datetime uses Ionic components that emit\n       * ionFocus and ionBlur. These events are\n       * composed meaning they will cross\n       * the shadow dom boundary. We need to\n       * stop propagation on these events otherwise\n       * developers will see 2 ionFocus or 2 ionBlur\n       * events at a time.\n       */\n      var root = getElementRoot(this.el);\n      root.addEventListener('ionFocus', function (ev) {\n        return ev.stopPropagation();\n      });\n      root.addEventListener('ionBlur', function (ev) {\n        return ev.stopPropagation();\n      });\n    }\n    /**\n     * When the presentation is changed, all calendar content is recreated,\n     * so we need to re-init behavior with the new elements.\n     */\n  }, {\n    key: \"componentDidRender\",\n    value: function componentDidRender() {\n      var _this3 = this;\n      var presentation = this.presentation,\n        prevPresentation = this.prevPresentation,\n        calendarBodyRef = this.calendarBodyRef,\n        minParts = this.minParts,\n        preferWheel = this.preferWheel;\n      /**\n       * TODO(FW-2165)\n       * Remove this when https://bugs.webkit.org/show_bug.cgi?id=235960 is fixed.\n       * When using `min`, we add `scroll-snap-align: none`\n       * to the disabled month so that users cannot scroll to it.\n       * This triggers a bug in WebKit where the scroll position is reset.\n       * Since the month change logic is handled by a scroll listener,\n       * this causes the month to change leading to `scroll-snap-align`\n       * changing again, thus changing the scroll position again and causing\n       * an infinite loop.\n       * This issue only applies to the calendar grid, so we can disable\n       * it if the calendar grid is not being used.\n       */\n      var hasCalendarGrid = !preferWheel && ['date-time', 'time-date', 'date'].includes(presentation);\n      if (minParts !== undefined && hasCalendarGrid && calendarBodyRef) {\n        var workingMonth = calendarBodyRef.querySelector('.calendar-month:nth-of-type(1)');\n        if (workingMonth) {\n          calendarBodyRef.scrollLeft = workingMonth.clientWidth * (isRTL(this.el) ? -1 : 1);\n        }\n      }\n      if (prevPresentation === null) {\n        this.prevPresentation = presentation;\n        return;\n      }\n      if (presentation === prevPresentation) {\n        return;\n      }\n      this.prevPresentation = presentation;\n      this.destroyInteractionListeners();\n      this.initializeListeners();\n      /**\n       * The month/year picker from the date interface\n       * should be closed as it is not available in non-date\n       * interfaces.\n       */\n      this.showMonthAndYear = false;\n      raf(function () {\n        _this3.ionRender.emit();\n      });\n    }\n  }, {\n    key: \"componentWillLoad\",\n    value: function componentWillLoad() {\n      var el = this.el,\n        highlightedDates = this.highlightedDates,\n        multiple = this.multiple,\n        presentation = this.presentation,\n        preferWheel = this.preferWheel;\n      if (multiple) {\n        if (presentation !== 'date') {\n          printIonWarning('Multiple date selection is only supported for presentation=\"date\".', el);\n        }\n        if (preferWheel) {\n          printIonWarning('Multiple date selection is not supported with preferWheel=\"true\".', el);\n        }\n      }\n      if (highlightedDates !== undefined) {\n        if (presentation !== 'date' && presentation !== 'date-time' && presentation !== 'time-date') {\n          printIonWarning('The highlightedDates property is only supported with the date, date-time, and time-date presentations.', el);\n        }\n        if (preferWheel) {\n          printIonWarning('The highlightedDates property is not supported with preferWheel=\"true\".', el);\n        }\n      }\n      var hourValues = this.parsedHourValues = convertToArrayOfNumbers(this.hourValues);\n      var minuteValues = this.parsedMinuteValues = convertToArrayOfNumbers(this.minuteValues);\n      var monthValues = this.parsedMonthValues = convertToArrayOfNumbers(this.monthValues);\n      var yearValues = this.parsedYearValues = convertToArrayOfNumbers(this.yearValues);\n      var dayValues = this.parsedDayValues = convertToArrayOfNumbers(this.dayValues);\n      var todayParts = this.todayParts = parseDate(getToday());\n      this.defaultParts = getClosestValidDate(todayParts, monthValues, dayValues, yearValues, hourValues, minuteValues);\n      this.processMinParts();\n      this.processMaxParts();\n      this.processValue(this.value);\n      this.emitStyle();\n    }\n  }, {\n    key: \"emitStyle\",\n    value: function emitStyle() {\n      this.ionStyle.emit({\n        interactive: true,\n        datetime: true,\n        'interactive-disabled': this.disabled\n      });\n    }\n    /**\n     * Universal render methods\n     * These are pieces of datetime that\n     * are rendered independently of presentation.\n     */\n  }, {\n    key: \"renderFooter\",\n    value: function renderFooter() {\n      var _this4 = this,\n        _class;\n      var showDefaultButtons = this.showDefaultButtons,\n        showClearButton = this.showClearButton;\n      var hasSlottedButtons = this.el.querySelector('[slot=\"buttons\"]') !== null;\n      if (!hasSlottedButtons && !showDefaultButtons && !showClearButton) {\n        return;\n      }\n      var clearButtonClick = function clearButtonClick() {\n        _this4.reset();\n        _this4.setValue(undefined);\n      };\n      /**\n       * By default we render two buttons:\n       * Cancel - Dismisses the datetime and\n       * does not update the `value` prop.\n       * OK - Dismisses the datetime and\n       * updates the `value` prop.\n       */\n      return h(\"div\", {\n        class: \"datetime-footer\"\n      }, h(\"div\", {\n        class: \"datetime-buttons\"\n      }, h(\"div\", {\n        class: (_class = {}, _defineProperty(_class, 'datetime-action-buttons', true), _defineProperty(_class, 'has-clear-button', this.showClearButton), _class)\n      }, h(\"slot\", {\n        name: \"buttons\"\n      }, h(\"ion-buttons\", null, showDefaultButtons && h(\"ion-button\", {\n        id: \"cancel-button\",\n        color: this.color,\n        onClick: function onClick() {\n          return _this4.cancel(true);\n        }\n      }, this.cancelText), h(\"div\", null, showClearButton && h(\"ion-button\", {\n        id: \"clear-button\",\n        color: this.color,\n        onClick: function onClick() {\n          return clearButtonClick();\n        }\n      }, this.clearText), showDefaultButtons && h(\"ion-button\", {\n        id: \"confirm-button\",\n        color: this.color,\n        onClick: function onClick() {\n          return _this4.confirm(true);\n        }\n      }, this.doneText)))))));\n    }\n    /**\n     * Wheel picker render methods\n     */\n  }, {\n    key: \"renderWheelPicker\",\n    value: function renderWheelPicker() {\n      var forcePresentation = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.presentation;\n      /**\n       * If presentation=\"time-date\" we switch the\n       * order of the render array here instead of\n       * manually reordering each date/time picker\n       * column with CSS. This allows for additional\n       * flexibility if we need to render subsets\n       * of the date/time data or do additional ordering\n       * within the child render functions.\n       */\n      var renderArray = forcePresentation === 'time-date' ? [this.renderTimePickerColumns(forcePresentation), this.renderDatePickerColumns(forcePresentation)] : [this.renderDatePickerColumns(forcePresentation), this.renderTimePickerColumns(forcePresentation)];\n      return h(\"ion-picker-internal\", null, renderArray);\n    }\n  }, {\n    key: \"renderDatePickerColumns\",\n    value: function renderDatePickerColumns(forcePresentation) {\n      return forcePresentation === 'date-time' || forcePresentation === 'time-date' ? this.renderCombinedDatePickerColumn() : this.renderIndividualDatePickerColumns(forcePresentation);\n    }\n  }, {\n    key: \"renderCombinedDatePickerColumn\",\n    value: function renderCombinedDatePickerColumn() {\n      var _this5 = this;\n      var defaultParts = this.defaultParts,\n        workingParts = this.workingParts,\n        locale = this.locale,\n        minParts = this.minParts,\n        maxParts = this.maxParts,\n        todayParts = this.todayParts,\n        isDateEnabled = this.isDateEnabled;\n      var activePart = this.getActivePartsWithFallback();\n      /**\n       * By default, generate a range of 3 months:\n       * Previous month, current month, and next month\n       */\n      var monthsToRender = generateMonths(workingParts);\n      var lastMonth = monthsToRender[monthsToRender.length - 1];\n      /**\n       * Ensure that users can select the entire window of dates.\n       */\n      monthsToRender[0].day = 1;\n      lastMonth.day = getNumDaysInMonth(lastMonth.month, lastMonth.year);\n      /**\n       * Narrow the dates rendered based on min/max dates (if any).\n       * The `min` date is used if the min is after the generated min month.\n       * The `max` date is used if the max is before the generated max month.\n       * This ensures that the sliding window always stays at 3 months\n       * but still allows future dates to be lazily rendered based on any min/max\n       * constraints.\n       */\n      var min = minParts !== undefined && isAfter(minParts, monthsToRender[0]) ? minParts : monthsToRender[0];\n      var max = maxParts !== undefined && isBefore(maxParts, lastMonth) ? maxParts : lastMonth;\n      var result = getCombinedDateColumnData(locale, todayParts, min, max, this.parsedDayValues, this.parsedMonthValues);\n      var items = result.items;\n      var parts = result.parts;\n      if (isDateEnabled) {\n        items = items.map(function (itemObject, index) {\n          var referenceParts = parts[index];\n          var disabled;\n          try {\n            /**\n             * The `isDateEnabled` implementation is try-catch wrapped\n             * to prevent exceptions in the user's function from\n             * interrupting the calendar rendering.\n             */\n            disabled = !isDateEnabled(convertDataToISO(referenceParts));\n          } catch (e) {\n            printIonError('Exception thrown from provided `isDateEnabled` function. Please check your function and try again.', e);\n          }\n          return Object.assign(Object.assign({}, itemObject), {\n            disabled: disabled\n          });\n        });\n      }\n      /**\n       * If we have selected a day already, then default the column\n       * to that value. Otherwise, set it to the default date.\n       */\n      var todayString = workingParts.day !== null ? \"\".concat(workingParts.year, \"-\").concat(workingParts.month, \"-\").concat(workingParts.day) : \"\".concat(defaultParts.year, \"-\").concat(defaultParts.month, \"-\").concat(defaultParts.day);\n      return h(\"ion-picker-column-internal\", {\n        class: \"date-column\",\n        color: this.color,\n        items: items,\n        value: todayString,\n        onIonChange: function onIonChange(ev) {\n          // TODO(FW-1823) Remove this when iOS 14 support is dropped.\n          // Due to a Safari 14 issue we need to destroy\n          // the scroll listener before we update state\n          // and trigger a re-render.\n          if (_this5.destroyCalendarListener) {\n            _this5.destroyCalendarListener();\n          }\n          var value = ev.detail.value;\n          var findPart = parts.find(function (_ref3) {\n            var month = _ref3.month,\n              day = _ref3.day,\n              year = _ref3.year;\n            return value === \"\".concat(year, \"-\").concat(month, \"-\").concat(day);\n          });\n          _this5.setWorkingParts(Object.assign(Object.assign({}, workingParts), findPart));\n          _this5.setActiveParts(Object.assign(Object.assign({}, activePart), findPart));\n          // We can re-attach the scroll listener after\n          // the working parts have been updated.\n          _this5.initializeCalendarListener();\n          ev.stopPropagation();\n        }\n      });\n    }\n  }, {\n    key: \"renderIndividualDatePickerColumns\",\n    value: function renderIndividualDatePickerColumns(forcePresentation) {\n      var workingParts = this.workingParts,\n        isDateEnabled = this.isDateEnabled;\n      var shouldRenderMonths = forcePresentation !== 'year' && forcePresentation !== 'time';\n      var months = shouldRenderMonths ? getMonthColumnData(this.locale, workingParts, this.minParts, this.maxParts, this.parsedMonthValues) : [];\n      var shouldRenderDays = forcePresentation === 'date';\n      var days = shouldRenderDays ? getDayColumnData(this.locale, workingParts, this.minParts, this.maxParts, this.parsedDayValues) : [];\n      if (isDateEnabled) {\n        days = days.map(function (dayObject) {\n          var value = dayObject.value;\n          var valueNum = typeof value === 'string' ? parseInt(value) : value;\n          var referenceParts = {\n            month: workingParts.month,\n            day: valueNum,\n            year: workingParts.year\n          };\n          var disabled;\n          try {\n            /**\n             * The `isDateEnabled` implementation is try-catch wrapped\n             * to prevent exceptions in the user's function from\n             * interrupting the calendar rendering.\n             */\n            disabled = !isDateEnabled(convertDataToISO(referenceParts));\n          } catch (e) {\n            printIonError('Exception thrown from provided `isDateEnabled` function. Please check your function and try again.', e);\n          }\n          return Object.assign(Object.assign({}, dayObject), {\n            disabled: disabled\n          });\n        });\n      }\n      var shouldRenderYears = forcePresentation !== 'month' && forcePresentation !== 'time';\n      var years = shouldRenderYears ? getYearColumnData(this.locale, this.defaultParts, this.minParts, this.maxParts, this.parsedYearValues) : [];\n      /**\n       * Certain locales show the day before the month.\n       */\n      var showMonthFirst = isMonthFirstLocale(this.locale, {\n        month: 'numeric',\n        day: 'numeric'\n      });\n      var renderArray = [];\n      if (showMonthFirst) {\n        renderArray = [this.renderMonthPickerColumn(months), this.renderDayPickerColumn(days), this.renderYearPickerColumn(years)];\n      } else {\n        renderArray = [this.renderDayPickerColumn(days), this.renderMonthPickerColumn(months), this.renderYearPickerColumn(years)];\n      }\n      return renderArray;\n    }\n  }, {\n    key: \"renderDayPickerColumn\",\n    value: function renderDayPickerColumn(days) {\n      var _this6 = this;\n      var _a;\n      if (days.length === 0) {\n        return [];\n      }\n      var workingParts = this.workingParts;\n      var activePart = this.getActivePartsWithFallback();\n      return h(\"ion-picker-column-internal\", {\n        class: \"day-column\",\n        color: this.color,\n        items: days,\n        value: (_a = workingParts.day !== null ? workingParts.day : this.defaultParts.day) !== null && _a !== void 0 ? _a : undefined,\n        onIonChange: function onIonChange(ev) {\n          // TODO(FW-1823) Remove this when iOS 14 support is dropped.\n          // Due to a Safari 14 issue we need to destroy\n          // the scroll listener before we update state\n          // and trigger a re-render.\n          if (_this6.destroyCalendarListener) {\n            _this6.destroyCalendarListener();\n          }\n          _this6.setWorkingParts(Object.assign(Object.assign({}, workingParts), {\n            day: ev.detail.value\n          }));\n          _this6.setActiveParts(Object.assign(Object.assign({}, activePart), {\n            day: ev.detail.value\n          }));\n          // We can re-attach the scroll listener after\n          // the working parts have been updated.\n          _this6.initializeCalendarListener();\n          ev.stopPropagation();\n        }\n      });\n    }\n  }, {\n    key: \"renderMonthPickerColumn\",\n    value: function renderMonthPickerColumn(months) {\n      var _this7 = this;\n      if (months.length === 0) {\n        return [];\n      }\n      var workingParts = this.workingParts;\n      var activePart = this.getActivePartsWithFallback();\n      return h(\"ion-picker-column-internal\", {\n        class: \"month-column\",\n        color: this.color,\n        items: months,\n        value: workingParts.month,\n        onIonChange: function onIonChange(ev) {\n          // TODO(FW-1823) Remove this when iOS 14 support is dropped.\n          // Due to a Safari 14 issue we need to destroy\n          // the scroll listener before we update state\n          // and trigger a re-render.\n          if (_this7.destroyCalendarListener) {\n            _this7.destroyCalendarListener();\n          }\n          _this7.setWorkingParts(Object.assign(Object.assign({}, workingParts), {\n            month: ev.detail.value\n          }));\n          _this7.setActiveParts(Object.assign(Object.assign({}, activePart), {\n            month: ev.detail.value\n          }));\n          // We can re-attach the scroll listener after\n          // the working parts have been updated.\n          _this7.initializeCalendarListener();\n          ev.stopPropagation();\n        }\n      });\n    }\n  }, {\n    key: \"renderYearPickerColumn\",\n    value: function renderYearPickerColumn(years) {\n      var _this8 = this;\n      if (years.length === 0) {\n        return [];\n      }\n      var workingParts = this.workingParts;\n      var activePart = this.getActivePartsWithFallback();\n      return h(\"ion-picker-column-internal\", {\n        class: \"year-column\",\n        color: this.color,\n        items: years,\n        value: workingParts.year,\n        onIonChange: function onIonChange(ev) {\n          // TODO(FW-1823) Remove this when iOS 14 support is dropped.\n          // Due to a Safari 14 issue we need to destroy\n          // the scroll listener before we update state\n          // and trigger a re-render.\n          if (_this8.destroyCalendarListener) {\n            _this8.destroyCalendarListener();\n          }\n          _this8.setWorkingParts(Object.assign(Object.assign({}, workingParts), {\n            year: ev.detail.value\n          }));\n          _this8.setActiveParts(Object.assign(Object.assign({}, activePart), {\n            year: ev.detail.value\n          }));\n          // We can re-attach the scroll listener after\n          // the working parts have been updated.\n          _this8.initializeCalendarListener();\n          ev.stopPropagation();\n        }\n      });\n    }\n  }, {\n    key: \"renderTimePickerColumns\",\n    value: function renderTimePickerColumns(forcePresentation) {\n      if (['date', 'month', 'month-year', 'year'].includes(forcePresentation)) {\n        return [];\n      }\n      /**\n       * If a user has not selected a date,\n       * then we should show all times. If the\n       * user has selected a date (even if it has\n       * not been confirmed yet), we should apply\n       * the max and min restrictions so that the\n       * time picker shows values that are\n       * appropriate for the selected date.\n       */\n      var activePart = this.getActivePart();\n      var userHasSelectedDate = activePart !== undefined;\n      var _getTimeColumnsData = getTimeColumnsData(this.locale, this.workingParts, this.hourCycle, userHasSelectedDate ? this.minParts : undefined, userHasSelectedDate ? this.maxParts : undefined, this.parsedHourValues, this.parsedMinuteValues),\n        hoursData = _getTimeColumnsData.hoursData,\n        minutesData = _getTimeColumnsData.minutesData,\n        dayPeriodData = _getTimeColumnsData.dayPeriodData;\n      return [this.renderHourPickerColumn(hoursData), this.renderMinutePickerColumn(minutesData), this.renderDayPeriodPickerColumn(dayPeriodData)];\n    }\n  }, {\n    key: \"renderHourPickerColumn\",\n    value: function renderHourPickerColumn(hoursData) {\n      var _this9 = this;\n      var workingParts = this.workingParts;\n      if (hoursData.length === 0) return [];\n      var activePart = this.getActivePartsWithFallback();\n      return h(\"ion-picker-column-internal\", {\n        color: this.color,\n        value: activePart.hour,\n        items: hoursData,\n        numericInput: true,\n        onIonChange: function onIonChange(ev) {\n          _this9.setWorkingParts(Object.assign(Object.assign({}, workingParts), {\n            hour: ev.detail.value\n          }));\n          _this9.setActiveParts(Object.assign(Object.assign({}, activePart), {\n            hour: ev.detail.value\n          }));\n          ev.stopPropagation();\n        }\n      });\n    }\n  }, {\n    key: \"renderMinutePickerColumn\",\n    value: function renderMinutePickerColumn(minutesData) {\n      var _this10 = this;\n      var workingParts = this.workingParts;\n      if (minutesData.length === 0) return [];\n      var activePart = this.getActivePartsWithFallback();\n      return h(\"ion-picker-column-internal\", {\n        color: this.color,\n        value: activePart.minute,\n        items: minutesData,\n        numericInput: true,\n        onIonChange: function onIonChange(ev) {\n          _this10.setWorkingParts(Object.assign(Object.assign({}, workingParts), {\n            minute: ev.detail.value\n          }));\n          _this10.setActiveParts(Object.assign(Object.assign({}, activePart), {\n            minute: ev.detail.value\n          }));\n          ev.stopPropagation();\n        }\n      });\n    }\n  }, {\n    key: \"renderDayPeriodPickerColumn\",\n    value: function renderDayPeriodPickerColumn(dayPeriodData) {\n      var _this11 = this;\n      var workingParts = this.workingParts;\n      if (dayPeriodData.length === 0) {\n        return [];\n      }\n      var activePart = this.getActivePartsWithFallback();\n      var isDayPeriodRTL = isLocaleDayPeriodRTL(this.locale);\n      return h(\"ion-picker-column-internal\", {\n        style: isDayPeriodRTL ? {\n          order: '-1'\n        } : {},\n        color: this.color,\n        value: activePart.ampm,\n        items: dayPeriodData,\n        onIonChange: function onIonChange(ev) {\n          var hour = calculateHourFromAMPM(workingParts, ev.detail.value);\n          _this11.setWorkingParts(Object.assign(Object.assign({}, workingParts), {\n            ampm: ev.detail.value,\n            hour: hour\n          }));\n          _this11.setActiveParts(Object.assign(Object.assign({}, activePart), {\n            ampm: ev.detail.value,\n            hour: hour\n          }));\n          ev.stopPropagation();\n        }\n      });\n    }\n  }, {\n    key: \"renderWheelView\",\n    value: function renderWheelView(forcePresentation) {\n      var locale = this.locale;\n      var showMonthFirst = isMonthFirstLocale(locale);\n      var columnOrder = showMonthFirst ? 'month-first' : 'year-first';\n      return h(\"div\", {\n        class: _defineProperty({}, \"wheel-order-\".concat(columnOrder), true)\n      }, this.renderWheelPicker(forcePresentation));\n    }\n    /**\n     * Grid Render Methods\n     */\n  }, {\n    key: \"renderCalendarHeader\",\n    value: function renderCalendarHeader(mode) {\n      var _this12 = this;\n      var expandedIcon = mode === 'ios' ? chevronDown : caretUpSharp;\n      var collapsedIcon = mode === 'ios' ? chevronForward : caretDownSharp;\n      var prevMonthDisabled = isPrevMonthDisabled(this.workingParts, this.minParts, this.maxParts);\n      var nextMonthDisabled = isNextMonthDisabled(this.workingParts, this.maxParts);\n      // don't use the inheritAttributes util because it removes dir from the host, and we still need that\n      var hostDir = this.el.getAttribute('dir') || undefined;\n      return h(\"div\", {\n        class: \"calendar-header\"\n      }, h(\"div\", {\n        class: \"calendar-action-buttons\"\n      }, h(\"div\", {\n        class: \"calendar-month-year\"\n      }, h(\"ion-item\", {\n        part: \"month-year-button\",\n        ref: function ref(el) {\n          return _this12.monthYearToggleItemRef = el;\n        },\n        button: true,\n        \"aria-label\": \"Show year picker\",\n        detail: false,\n        lines: \"none\",\n        onClick: function onClick() {\n          var _a;\n          _this12.toggleMonthAndYearView();\n          /**\n           * TODO: FW-3547\n           *\n           * Currently there is not a way to set the aria-label on the inner button\n           * on the `ion-item` and have it be reactive to changes. This is a workaround\n           * until we either refactor `ion-item` to a button or Stencil adds a way to\n           * have reactive props for built-in properties, such as `aria-label`.\n           */\n          var monthYearToggleItemRef = _this12.monthYearToggleItemRef;\n          if (monthYearToggleItemRef) {\n            var btn = (_a = monthYearToggleItemRef.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector('.item-native');\n            if (btn) {\n              var monthYearAriaLabel = _this12.showMonthAndYear ? 'Hide year picker' : 'Show year picker';\n              btn.setAttribute('aria-label', monthYearAriaLabel);\n            }\n          }\n        }\n      }, h(\"ion-label\", null, getMonthAndYear(this.locale, this.workingParts), h(\"ion-icon\", {\n        \"aria-hidden\": \"true\",\n        icon: this.showMonthAndYear ? expandedIcon : collapsedIcon,\n        lazy: false,\n        flipRtl: true\n      })))), h(\"div\", {\n        class: \"calendar-next-prev\"\n      }, h(\"ion-buttons\", null, h(\"ion-button\", {\n        \"aria-label\": \"Previous month\",\n        disabled: prevMonthDisabled,\n        onClick: function onClick() {\n          return _this12.prevMonth();\n        }\n      }, h(\"ion-icon\", {\n        dir: hostDir,\n        \"aria-hidden\": \"true\",\n        slot: \"icon-only\",\n        icon: chevronBack,\n        lazy: false,\n        flipRtl: true\n      })), h(\"ion-button\", {\n        \"aria-label\": \"Next month\",\n        disabled: nextMonthDisabled,\n        onClick: function onClick() {\n          return _this12.nextMonth();\n        }\n      }, h(\"ion-icon\", {\n        dir: hostDir,\n        \"aria-hidden\": \"true\",\n        slot: \"icon-only\",\n        icon: chevronForward,\n        lazy: false,\n        flipRtl: true\n      }))))), h(\"div\", {\n        class: \"calendar-days-of-week\",\n        \"aria-hidden\": \"true\"\n      }, getDaysOfWeek(this.locale, mode, this.firstDayOfWeek % 7).map(function (d) {\n        return h(\"div\", {\n          class: \"day-of-week\"\n        }, d);\n      })));\n    }\n  }, {\n    key: \"renderMonth\",\n    value: function renderMonth(month, year) {\n      var _this13 = this;\n      var yearAllowed = this.parsedYearValues === undefined || this.parsedYearValues.includes(year);\n      var monthAllowed = this.parsedMonthValues === undefined || this.parsedMonthValues.includes(month);\n      var isCalMonthDisabled = !yearAllowed || !monthAllowed;\n      var swipeDisabled = isMonthDisabled({\n        month: month,\n        year: year,\n        day: null\n      }, {\n        // The day is not used when checking if a month is disabled.\n        // Users should be able to access the min or max month, even if the\n        // min/max date is out of bounds (e.g. min is set to Feb 15, Feb should not be disabled).\n        minParts: Object.assign(Object.assign({}, this.minParts), {\n          day: null\n        }),\n        maxParts: Object.assign(Object.assign({}, this.maxParts), {\n          day: null\n        })\n      });\n      // The working month should never have swipe disabled.\n      // Otherwise the CSS scroll snap will not work and the user\n      // can free-scroll the calendar.\n      var isWorkingMonth = this.workingParts.month === month && this.workingParts.year === year;\n      var activePart = this.getActivePartsWithFallback();\n      return h(\"div\", {\n        \"aria-hidden\": !isWorkingMonth ? 'true' : null,\n        class: {\n          'calendar-month': true,\n          // Prevents scroll snap swipe gestures for months outside of the min/max bounds\n          'calendar-month-disabled': !isWorkingMonth && swipeDisabled\n        }\n      }, h(\"div\", {\n        class: \"calendar-month-grid\"\n      }, getDaysOfMonth(month, year, this.firstDayOfWeek % 7).map(function (dateObject, index) {\n        var day = dateObject.day,\n          dayOfWeek = dateObject.dayOfWeek;\n        var el = _this13.el,\n          highlightedDates = _this13.highlightedDates,\n          isDateEnabled = _this13.isDateEnabled,\n          multiple = _this13.multiple;\n        var referenceParts = {\n          month: month,\n          day: day,\n          year: year\n        };\n        var isCalendarPadding = day === null;\n        var _getCalendarDayState = getCalendarDayState(_this13.locale, referenceParts, _this13.activeParts, _this13.todayParts, _this13.minParts, _this13.maxParts, _this13.parsedDayValues),\n          isActive = _getCalendarDayState.isActive,\n          isToday = _getCalendarDayState.isToday,\n          ariaLabel = _getCalendarDayState.ariaLabel,\n          ariaSelected = _getCalendarDayState.ariaSelected,\n          disabled = _getCalendarDayState.disabled,\n          text = _getCalendarDayState.text;\n        var dateIsoString = convertDataToISO(referenceParts);\n        var isCalDayDisabled = isCalMonthDisabled || disabled;\n        if (!isCalDayDisabled && isDateEnabled !== undefined) {\n          try {\n            /**\n             * The `isDateEnabled` implementation is try-catch wrapped\n             * to prevent exceptions in the user's function from\n             * interrupting the calendar rendering.\n             */\n            isCalDayDisabled = !isDateEnabled(dateIsoString);\n          } catch (e) {\n            printIonError('Exception thrown from provided `isDateEnabled` function. Please check your function and try again.', el, e);\n          }\n        }\n        var dateStyle = undefined;\n        /**\n         * Custom highlight styles should not override the style for selected dates,\n         * nor apply to \"filler days\" at the start of the grid.\n         */\n        if (highlightedDates !== undefined && !isActive && day !== null) {\n          dateStyle = getHighlightStyles(highlightedDates, dateIsoString, el);\n        }\n        var dateParts = undefined;\n        // \"Filler days\" at the beginning of the grid should not get the calendar day\n        // CSS parts added to them\n        if (!isCalendarPadding) {\n          dateParts = \"calendar-day\".concat(isActive ? ' active' : '').concat(isToday ? ' today' : '').concat(isCalDayDisabled ? ' disabled' : '');\n        }\n        return h(\"div\", {\n          class: \"calendar-day-wrapper\"\n        }, h(\"button\", {\n          // We need to use !important for the inline styles here because\n          // otherwise the CSS shadow parts will override these styles.\n          // See https://github.com/WICG/webcomponents/issues/847\n          // Both the CSS shadow parts and highlightedDates styles are\n          // provided by the developer, but highlightedDates styles should\n          // always take priority.\n          ref: function ref(el) {\n            if (el) {\n              el.style.setProperty('color', \"\".concat(dateStyle ? dateStyle.textColor : ''), 'important');\n              el.style.setProperty('background-color', \"\".concat(dateStyle ? dateStyle.backgroundColor : ''), 'important');\n            }\n          },\n          tabindex: \"-1\",\n          \"data-day\": day,\n          \"data-month\": month,\n          \"data-year\": year,\n          \"data-index\": index,\n          \"data-day-of-week\": dayOfWeek,\n          disabled: isCalDayDisabled,\n          class: {\n            'calendar-day-padding': isCalendarPadding,\n            'calendar-day': true,\n            'calendar-day-active': isActive,\n            'calendar-day-today': isToday\n          },\n          part: dateParts,\n          \"aria-hidden\": isCalendarPadding ? 'true' : null,\n          \"aria-selected\": ariaSelected,\n          \"aria-label\": ariaLabel,\n          onClick: function onClick() {\n            if (isCalendarPadding) {\n              return;\n            }\n            _this13.setWorkingParts(Object.assign(Object.assign({}, _this13.workingParts), {\n              month: month,\n              day: day,\n              year: year\n            }));\n            // multiple only needs date info, so we can wipe out other fields like time\n            if (multiple) {\n              _this13.setActiveParts({\n                month: month,\n                day: day,\n                year: year\n              }, isActive);\n            } else {\n              _this13.setActiveParts(Object.assign(Object.assign({}, activePart), {\n                month: month,\n                day: day,\n                year: year\n              }));\n            }\n          }\n        }, text));\n      })));\n    }\n  }, {\n    key: \"renderCalendarBody\",\n    value: function renderCalendarBody() {\n      var _this14 = this;\n      return h(\"div\", {\n        class: \"calendar-body ion-focusable\",\n        ref: function ref(el) {\n          return _this14.calendarBodyRef = el;\n        },\n        tabindex: \"0\"\n      }, generateMonths(this.workingParts, this.forceRenderDate).map(function (_ref4) {\n        var month = _ref4.month,\n          year = _ref4.year;\n        return _this14.renderMonth(month, year);\n      }));\n    }\n  }, {\n    key: \"renderCalendar\",\n    value: function renderCalendar(mode) {\n      return h(\"div\", {\n        class: \"datetime-calendar\",\n        key: \"datetime-calendar\"\n      }, this.renderCalendarHeader(mode), this.renderCalendarBody());\n    }\n  }, {\n    key: \"renderTimeLabel\",\n    value: function renderTimeLabel() {\n      var hasSlottedTimeLabel = this.el.querySelector('[slot=\"time-label\"]') !== null;\n      if (!hasSlottedTimeLabel && !this.showDefaultTimeLabel) {\n        return;\n      }\n      return h(\"slot\", {\n        name: \"time-label\"\n      }, \"Time\");\n    }\n  }, {\n    key: \"renderTimeOverlay\",\n    value: function renderTimeOverlay() {\n      var _this15 = this;\n      var hourCycle = this.hourCycle,\n        isTimePopoverOpen = this.isTimePopoverOpen,\n        locale = this.locale;\n      var use24Hour = is24Hour(locale, hourCycle);\n      var activePart = this.getActivePartsWithFallback();\n      return [h(\"div\", {\n        class: \"time-header\"\n      }, this.renderTimeLabel()), h(\"button\", {\n        class: {\n          'time-body': true,\n          'time-body-active': isTimePopoverOpen\n        },\n        part: \"time-button\".concat(isTimePopoverOpen ? ' active' : ''),\n        \"aria-expanded\": \"false\",\n        \"aria-haspopup\": \"true\",\n        onClick: function () {\n          var _onClick = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(ev) {\n            var popoverRef;\n            return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n              while (1) switch (_context6.prev = _context6.next) {\n                case 0:\n                  popoverRef = _this15.popoverRef;\n                  if (!popoverRef) {\n                    _context6.next = 7;\n                    break;\n                  }\n                  _this15.isTimePopoverOpen = true;\n                  popoverRef.present(new CustomEvent('ionShadowTarget', {\n                    detail: {\n                      ionShadowTarget: ev.target\n                    }\n                  }));\n                  _context6.next = 6;\n                  return popoverRef.onWillDismiss();\n                case 6:\n                  _this15.isTimePopoverOpen = false;\n                case 7:\n                case \"end\":\n                  return _context6.stop();\n              }\n            }, _callee6);\n          }));\n          function onClick(_x3) {\n            return _onClick.apply(this, arguments);\n          }\n          return onClick;\n        }()\n      }, getLocalizedTime(locale, activePart, use24Hour)), h(\"ion-popover\", {\n        alignment: \"center\",\n        translucent: true,\n        overlayIndex: 1,\n        arrow: false,\n        onWillPresent: function onWillPresent(ev) {\n          /**\n           * Intersection Observers do not consistently fire between Blink and Webkit\n           * when toggling the visibility of the popover and trying to scroll the picker\n           * column to the correct time value.\n           *\n           * This will correctly scroll the element position to the correct time value,\n           * before the popover is fully presented.\n           */\n          var cols = ev.target.querySelectorAll('ion-picker-column-internal');\n          // TODO (FW-615): Potentially remove this when intersection observers are fixed in picker column\n          cols.forEach(function (col) {\n            return col.scrollActiveItemIntoView();\n          });\n        },\n        style: {\n          '--offset-y': '-10px',\n          '--min-width': 'fit-content'\n        },\n        // Allow native browser keyboard events to support up/down/home/end key\n        // navigation within the time picker.\n        keyboardEvents: true,\n        ref: function ref(el) {\n          return _this15.popoverRef = el;\n        }\n      }, this.renderWheelPicker('time'))];\n    }\n  }, {\n    key: \"getHeaderSelectedDateText\",\n    value: function getHeaderSelectedDateText() {\n      var activeParts = this.activeParts,\n        multiple = this.multiple,\n        titleSelectedDatesFormatter = this.titleSelectedDatesFormatter;\n      var isArray = Array.isArray(activeParts);\n      var headerText;\n      if (multiple && isArray && activeParts.length !== 1) {\n        headerText = \"\".concat(activeParts.length, \" days\"); // default/fallback for multiple selection\n        if (titleSelectedDatesFormatter !== undefined) {\n          try {\n            headerText = titleSelectedDatesFormatter(convertDataToISO(activeParts));\n          } catch (e) {\n            printIonError('Exception in provided `titleSelectedDatesFormatter`: ', e);\n          }\n        }\n      } else {\n        // for exactly 1 day selected (multiple set or not), show a formatted version of that\n        headerText = getMonthAndDay(this.locale, this.getActivePartsWithFallback());\n      }\n      return headerText;\n    }\n  }, {\n    key: \"renderHeader\",\n    value: function renderHeader() {\n      var showExpandedHeader = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      var hasSlottedTitle = this.el.querySelector('[slot=\"title\"]') !== null;\n      if (!hasSlottedTitle && !this.showDefaultTitle) {\n        return;\n      }\n      return h(\"div\", {\n        class: \"datetime-header\"\n      }, h(\"div\", {\n        class: \"datetime-title\"\n      }, h(\"slot\", {\n        name: \"title\"\n      }, \"Select Date\")), showExpandedHeader && h(\"div\", {\n        class: \"datetime-selected-date\"\n      }, this.getHeaderSelectedDateText()));\n    }\n    /**\n     * Render time picker inside of datetime.\n     * Do not pass color prop to segment on\n     * iOS mode. MD segment has been customized and\n     * should take on the color prop, but iOS\n     * should just be the default segment.\n     */\n  }, {\n    key: \"renderTime\",\n    value: function renderTime() {\n      var presentation = this.presentation;\n      var timeOnlyPresentation = presentation === 'time';\n      return h(\"div\", {\n        class: \"datetime-time\"\n      }, timeOnlyPresentation ? this.renderWheelPicker() : this.renderTimeOverlay());\n    }\n    /**\n     * Renders the month/year picker that is\n     * displayed on the calendar grid.\n     * The .datetime-year class has additional\n     * styles that let us show/hide the\n     * picker when the user clicks on the\n     * toggle in the calendar header.\n     */\n  }, {\n    key: \"renderCalendarViewMonthYearPicker\",\n    value: function renderCalendarViewMonthYearPicker() {\n      return h(\"div\", {\n        class: \"datetime-year\"\n      }, this.renderWheelView('month-year'));\n    }\n    /**\n     * Render entry point\n     * All presentation types are rendered from here.\n     */\n  }, {\n    key: \"renderDatetime\",\n    value: function renderDatetime(mode) {\n      var presentation = this.presentation,\n        preferWheel = this.preferWheel;\n      /**\n       * Certain presentation types have separate grid and wheel displays.\n       * If preferWheel is true then we should show a wheel picker instead.\n       */\n      var hasWheelVariant = presentation === 'date' || presentation === 'date-time' || presentation === 'time-date';\n      if (preferWheel && hasWheelVariant) {\n        return [this.renderHeader(false), this.renderWheelView(), this.renderFooter()];\n      }\n      switch (presentation) {\n        case 'date-time':\n          return [this.renderHeader(), this.renderCalendar(mode), this.renderCalendarViewMonthYearPicker(), this.renderTime(), this.renderFooter()];\n        case 'time-date':\n          return [this.renderHeader(), this.renderTime(), this.renderCalendar(mode), this.renderCalendarViewMonthYearPicker(), this.renderFooter()];\n        case 'time':\n          return [this.renderHeader(false), this.renderTime(), this.renderFooter()];\n        case 'month':\n        case 'month-year':\n        case 'year':\n          return [this.renderHeader(false), this.renderWheelView(), this.renderFooter()];\n        default:\n          return [this.renderHeader(), this.renderCalendar(mode), this.renderCalendarViewMonthYearPicker(), this.renderFooter()];\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _createColorClasses;\n      var name = this.name,\n        value = this.value,\n        disabled = this.disabled,\n        el = this.el,\n        color = this.color,\n        readonly = this.readonly,\n        showMonthAndYear = this.showMonthAndYear,\n        preferWheel = this.preferWheel,\n        presentation = this.presentation,\n        size = this.size,\n        isGridStyle = this.isGridStyle;\n      var mode = getIonMode(this);\n      var isMonthAndYearPresentation = presentation === 'year' || presentation === 'month' || presentation === 'month-year';\n      var shouldShowMonthAndYear = showMonthAndYear || isMonthAndYearPresentation;\n      var monthYearPickerOpen = showMonthAndYear && !isMonthAndYearPresentation;\n      var hasDatePresentation = presentation === 'date' || presentation === 'date-time' || presentation === 'time-date';\n      var hasWheelVariant = hasDatePresentation && preferWheel;\n      renderHiddenInput(true, el, name, formatValue(value), disabled);\n      return h(Host, {\n        \"aria-disabled\": disabled ? 'true' : null,\n        onFocus: this.onFocus,\n        onBlur: this.onBlur,\n        class: Object.assign({}, createColorClasses(color, (_createColorClasses = {}, _defineProperty(_createColorClasses, mode, true), _defineProperty(_createColorClasses, 'datetime-readonly', readonly), _defineProperty(_createColorClasses, 'datetime-disabled', disabled), _defineProperty(_createColorClasses, 'show-month-and-year', shouldShowMonthAndYear), _defineProperty(_createColorClasses, 'month-year-picker-open', monthYearPickerOpen), _defineProperty(_createColorClasses, \"datetime-presentation-\".concat(presentation), true), _defineProperty(_createColorClasses, \"datetime-size-\".concat(size), true), _defineProperty(_createColorClasses, \"datetime-prefer-wheel\", hasWheelVariant), _defineProperty(_createColorClasses, \"datetime-grid\", isGridStyle), _createColorClasses)))\n      }, this.renderDatetime(mode));\n    }\n  }, {\n    key: \"isGridStyle\",\n    get: function get() {\n      var presentation = this.presentation,\n        preferWheel = this.preferWheel;\n      var hasDatePresentation = presentation === 'date' || presentation === 'date-time' || presentation === 'time-date';\n      return hasDatePresentation && !preferWheel;\n    }\n  }, {\n    key: \"isCalendarPicker\",\n    get: function get() {\n      var presentation = this.presentation;\n      return presentation === 'date' || presentation === 'date-time' || presentation === 'time-date';\n    }\n  }, {\n    key: \"el\",\n    get: function get() {\n      return this;\n    }\n  }], [{\n    key: \"watchers\",\n    get: function get() {\n      return {\n        \"disabled\": [\"disabledChanged\"],\n        \"min\": [\"minChanged\"],\n        \"max\": [\"maxChanged\"],\n        \"yearValues\": [\"yearValuesChanged\"],\n        \"monthValues\": [\"monthValuesChanged\"],\n        \"dayValues\": [\"dayValuesChanged\"],\n        \"hourValues\": [\"hourValuesChanged\"],\n        \"minuteValues\": [\"minuteValuesChanged\"],\n        \"value\": [\"valueChanged\"]\n      };\n    }\n  }, {\n    key: \"style\",\n    get: function get() {\n      return {\n        ios: datetimeIosCss,\n        md: datetimeMdCss\n      };\n    }\n  }]);\n  return Datetime;\n}(HTMLElement), [33, \"ion-datetime\", {\n  \"color\": [1],\n  \"name\": [1],\n  \"disabled\": [4],\n  \"readonly\": [4],\n  \"isDateEnabled\": [16],\n  \"min\": [1025],\n  \"max\": [1025],\n  \"presentation\": [1],\n  \"cancelText\": [1, \"cancel-text\"],\n  \"doneText\": [1, \"done-text\"],\n  \"clearText\": [1, \"clear-text\"],\n  \"yearValues\": [8, \"year-values\"],\n  \"monthValues\": [8, \"month-values\"],\n  \"dayValues\": [8, \"day-values\"],\n  \"hourValues\": [8, \"hour-values\"],\n  \"minuteValues\": [8, \"minute-values\"],\n  \"locale\": [1],\n  \"firstDayOfWeek\": [2, \"first-day-of-week\"],\n  \"titleSelectedDatesFormatter\": [16],\n  \"multiple\": [4],\n  \"highlightedDates\": [16],\n  \"value\": [1025],\n  \"showDefaultTitle\": [4, \"show-default-title\"],\n  \"showDefaultButtons\": [4, \"show-default-buttons\"],\n  \"showClearButton\": [4, \"show-clear-button\"],\n  \"showDefaultTimeLabel\": [4, \"show-default-time-label\"],\n  \"hourCycle\": [1, \"hour-cycle\"],\n  \"size\": [1],\n  \"preferWheel\": [4, \"prefer-wheel\"],\n  \"showMonthAndYear\": [32],\n  \"activeParts\": [32],\n  \"workingParts\": [32],\n  \"isTimePopoverOpen\": [32],\n  \"forceRenderDate\": [32],\n  \"confirm\": [64],\n  \"reset\": [64],\n  \"cancel\": [64]\n}, undefined, {\n  \"disabled\": [\"disabledChanged\"],\n  \"min\": [\"minChanged\"],\n  \"max\": [\"maxChanged\"],\n  \"yearValues\": [\"yearValuesChanged\"],\n  \"monthValues\": [\"monthValuesChanged\"],\n  \"dayValues\": [\"dayValuesChanged\"],\n  \"hourValues\": [\"hourValuesChanged\"],\n  \"minuteValues\": [\"minuteValuesChanged\"],\n  \"value\": [\"valueChanged\"]\n}]);\nvar datetimeIds = 0;\nfunction defineCustomElement$1() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n  var components = [\"ion-datetime\", \"ion-backdrop\", \"ion-button\", \"ion-buttons\", \"ion-icon\", \"ion-item\", \"ion-label\", \"ion-note\", \"ion-picker-column-internal\", \"ion-picker-internal\", \"ion-popover\", \"ion-ripple-effect\"];\n  components.forEach(function (tagName) {\n    switch (tagName) {\n      case \"ion-datetime\":\n        if (!customElements.get(tagName)) {\n          customElements.define(tagName, Datetime);\n        }\n        break;\n      case \"ion-backdrop\":\n        if (!customElements.get(tagName)) {\n          defineCustomElement$c();\n        }\n        break;\n      case \"ion-button\":\n        if (!customElements.get(tagName)) {\n          defineCustomElement$b();\n        }\n        break;\n      case \"ion-buttons\":\n        if (!customElements.get(tagName)) {\n          defineCustomElement$a();\n        }\n        break;\n      case \"ion-icon\":\n        if (!customElements.get(tagName)) {\n          defineCustomElement$9();\n        }\n        break;\n      case \"ion-item\":\n        if (!customElements.get(tagName)) {\n          defineCustomElement$8();\n        }\n        break;\n      case \"ion-label\":\n        if (!customElements.get(tagName)) {\n          defineCustomElement$7();\n        }\n        break;\n      case \"ion-note\":\n        if (!customElements.get(tagName)) {\n          defineCustomElement$6();\n        }\n        break;\n      case \"ion-picker-column-internal\":\n        if (!customElements.get(tagName)) {\n          defineCustomElement$5();\n        }\n        break;\n      case \"ion-picker-internal\":\n        if (!customElements.get(tagName)) {\n          defineCustomElement$4();\n        }\n        break;\n      case \"ion-popover\":\n        if (!customElements.get(tagName)) {\n          defineCustomElement$3();\n        }\n        break;\n      case \"ion-ripple-effect\":\n        if (!customElements.get(tagName)) {\n          defineCustomElement$2();\n        }\n        break;\n    }\n  });\n}\nvar IonDatetime = Datetime;\nvar defineCustomElement = defineCustomElement$1;\nexport { IonDatetime, defineCustomElement };","map":null,"metadata":{},"sourceType":"module"}