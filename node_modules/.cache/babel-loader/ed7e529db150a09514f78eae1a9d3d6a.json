{"ast":null,"code":"/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { d as doc } from './index5.js';\nimport { u as now, v as pointerCoord } from './helpers.js';\nvar startTapClick = function startTapClick(config) {\n  if (doc === undefined) {\n    return;\n  }\n  var lastTouch = -MOUSE_WAIT * 10;\n  var lastActivated = 0;\n  var activatableEle;\n  var activeRipple;\n  var activeDefer;\n  var useRippleEffect = config.getBoolean('animated', true) && config.getBoolean('rippleEffect', true);\n  var clearDefers = new WeakMap();\n  // Touch Events\n  var onTouchStart = function onTouchStart(ev) {\n    lastTouch = now(ev);\n    pointerDown(ev);\n  };\n  var onTouchEnd = function onTouchEnd(ev) {\n    lastTouch = now(ev);\n    pointerUp(ev);\n  };\n  var onMouseDown = function onMouseDown(ev) {\n    // Ignore right clicks\n    if (ev.button === 2) {\n      return;\n    }\n    var t = now(ev) - MOUSE_WAIT;\n    if (lastTouch < t) {\n      pointerDown(ev);\n    }\n  };\n  var onMouseUp = function onMouseUp(ev) {\n    var t = now(ev) - MOUSE_WAIT;\n    if (lastTouch < t) {\n      pointerUp(ev);\n    }\n  };\n  var cancelActive = function cancelActive() {\n    if (activeDefer) clearTimeout(activeDefer);\n    activeDefer = undefined;\n    if (activatableEle) {\n      removeActivated(false);\n      activatableEle = undefined;\n    }\n  };\n  var pointerDown = function pointerDown(ev) {\n    if (activatableEle) {\n      return;\n    }\n    setActivatedElement(getActivatableTarget(ev), ev);\n  };\n  var pointerUp = function pointerUp(ev) {\n    setActivatedElement(undefined, ev);\n  };\n  var setActivatedElement = function setActivatedElement(el, ev) {\n    // do nothing\n    if (el && el === activatableEle) {\n      return;\n    }\n    if (activeDefer) clearTimeout(activeDefer);\n    activeDefer = undefined;\n    var _pointerCoord = pointerCoord(ev),\n      x = _pointerCoord.x,\n      y = _pointerCoord.y; // deactivate selected\n    if (activatableEle) {\n      if (clearDefers.has(activatableEle)) {\n        throw new Error('internal error');\n      }\n      if (!activatableEle.classList.contains(ACTIVATED)) {\n        addActivated(activatableEle, x, y);\n      }\n      removeActivated(true);\n    }\n    // activate\n    if (el) {\n      var deferId = clearDefers.get(el);\n      if (deferId) {\n        clearTimeout(deferId);\n        clearDefers.delete(el);\n      }\n      el.classList.remove(ACTIVATED);\n      var callback = function callback() {\n        addActivated(el, x, y);\n        activeDefer = undefined;\n      };\n      if (isInstant(el)) {\n        callback();\n      } else {\n        activeDefer = setTimeout(callback, ADD_ACTIVATED_DEFERS);\n      }\n    }\n    activatableEle = el;\n  };\n  var addActivated = function addActivated(el, x, y) {\n    lastActivated = Date.now();\n    el.classList.add(ACTIVATED);\n    if (!useRippleEffect) return;\n    var rippleEffect = getRippleEffect(el);\n    if (rippleEffect !== null) {\n      removeRipple();\n      activeRipple = rippleEffect.addRipple(x, y);\n    }\n  };\n  var removeRipple = function removeRipple() {\n    if (activeRipple !== undefined) {\n      activeRipple.then(function (remove) {\n        return remove();\n      });\n      activeRipple = undefined;\n    }\n  };\n  var removeActivated = function removeActivated(smooth) {\n    removeRipple();\n    var active = activatableEle;\n    if (!active) {\n      return;\n    }\n    var time = CLEAR_STATE_DEFERS - Date.now() + lastActivated;\n    if (smooth && time > 0 && !isInstant(active)) {\n      var deferId = setTimeout(function () {\n        active.classList.remove(ACTIVATED);\n        clearDefers.delete(active);\n      }, CLEAR_STATE_DEFERS);\n      clearDefers.set(active, deferId);\n    } else {\n      active.classList.remove(ACTIVATED);\n    }\n  };\n  doc.addEventListener('ionGestureCaptured', cancelActive);\n  doc.addEventListener('touchstart', onTouchStart, true);\n  doc.addEventListener('touchcancel', onTouchEnd, true);\n  doc.addEventListener('touchend', onTouchEnd, true);\n  /**\n   * Tap click effects such as the ripple effect should\n   * not happen when scrolling. For example, if a user scrolls\n   * the page but also happens to do a touchstart on a button\n   * as part of the scroll, the ripple effect should not\n   * be dispatched. The ripple effect should only happen\n   * if the button is activated and the page is not scrolling.\n   *\n   * pointercancel is dispatched on a gesture when scrolling\n   * starts, so this lets us avoid having to listen for\n   * ion-content's scroll events.\n   */\n  doc.addEventListener('pointercancel', cancelActive, true);\n  doc.addEventListener('mousedown', onMouseDown, true);\n  doc.addEventListener('mouseup', onMouseUp, true);\n};\n// TODO(FW-2832): type\nvar getActivatableTarget = function getActivatableTarget(ev) {\n  if (ev.composedPath !== undefined) {\n    /**\n     * composedPath returns EventTarget[]. However,\n     * objects other than Element can be targets too.\n     * For example, AudioContext can be a target. In this\n     * case, we know that the event is a UIEvent so we\n     * can assume that the path will contain either Element\n     * or ShadowRoot.\n     */\n    var path = ev.composedPath();\n    for (var i = 0; i < path.length - 2; i++) {\n      var el = path[i];\n      if (!(el instanceof ShadowRoot) && el.classList.contains('ion-activatable')) {\n        return el;\n      }\n    }\n  } else {\n    return ev.target.closest('.ion-activatable');\n  }\n};\nvar isInstant = function isInstant(el) {\n  return el.classList.contains('ion-activatable-instant');\n};\nvar getRippleEffect = function getRippleEffect(el) {\n  if (el.shadowRoot) {\n    var ripple = el.shadowRoot.querySelector('ion-ripple-effect');\n    if (ripple) {\n      return ripple;\n    }\n  }\n  return el.querySelector('ion-ripple-effect');\n};\nvar ACTIVATED = 'ion-activated';\nvar ADD_ACTIVATED_DEFERS = 100;\nvar CLEAR_STATE_DEFERS = 150;\nvar MOUSE_WAIT = 2500;\nexport { startTapClick };","map":null,"metadata":{},"sourceType":"module"}