{"ast":null,"code":"import _defineProperty from \"/Users/mvp/Documents/Projects/pure-weather-capacitor---v2.0.0/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/mvp/Documents/Projects/pure-weather-capacitor---v2.0.0/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/mvp/Documents/Projects/pure-weather-capacitor---v2.0.0/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/mvp/Documents/Projects/pure-weather-capacitor---v2.0.0/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/mvp/Documents/Projects/pure-weather-capacitor---v2.0.0/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/mvp/Documents/Projects/pure-weather-capacitor---v2.0.0/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/mvp/Documents/Projects/pure-weather-capacitor---v2.0.0/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';\nimport { b as getIonMode } from './ionic-global.js';\nimport { c as createColorClasses, h as hostContext } from './theme.js';\nvar breadcrumbsIosCss = \":host{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-ms-flex-align:center;align-items:center}:host(.in-toolbar-color),:host(.in-toolbar-color) .breadcrumbs-collapsed-indicator ion-icon{color:var(--ion-color-contrast)}:host(.in-toolbar-color) .breadcrumbs-collapsed-indicator{background:rgba(var(--ion-color-contrast-rgb), 0.11)}:host(.in-toolbar){padding-left:20px;padding-right:20px;padding-top:0;padding-bottom:0;-ms-flex-pack:center;justify-content:center}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host(.in-toolbar){padding-left:unset;padding-right:unset;-webkit-padding-start:20px;padding-inline-start:20px;-webkit-padding-end:20px;padding-inline-end:20px}}\";\nvar breadcrumbsMdCss = \":host{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-ms-flex-align:center;align-items:center}:host(.in-toolbar-color),:host(.in-toolbar-color) .breadcrumbs-collapsed-indicator ion-icon{color:var(--ion-color-contrast)}:host(.in-toolbar-color) .breadcrumbs-collapsed-indicator{background:rgba(var(--ion-color-contrast-rgb), 0.11)}:host(.in-toolbar){padding-left:8px;padding-right:8px;padding-top:0;padding-bottom:0}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host(.in-toolbar){padding-left:unset;padding-right:unset;-webkit-padding-start:8px;padding-inline-start:8px;-webkit-padding-end:8px;padding-inline-end:8px}}\";\nvar Breadcrumbs = /*@__PURE__*/proxyCustomElement( /*#__PURE__*/function (_HTMLElement) {\n  _inherits(_class, _HTMLElement);\n  function _class() {\n    var _this;\n    _classCallCheck(this, _class);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(_class).call(this));\n    _this.__registerHost();\n    _this.__attachShadow();\n    _this.ionCollapsedClick = createEvent(_assertThisInitialized(_assertThisInitialized(_this)), \"ionCollapsedClick\", 7);\n    /**\n     * The number of breadcrumbs to show before the collapsed indicator.\n     * If `itemsBeforeCollapse` + `itemsAfterCollapse` is greater than `maxItems`,\n     * the breadcrumbs will not be collapsed.\n     */\n    _this.itemsBeforeCollapse = 1;\n    /**\n     * The number of breadcrumbs to show after the collapsed indicator.\n     * If `itemsBeforeCollapse` + `itemsAfterCollapse` is greater than `maxItems`,\n     * the breadcrumbs will not be collapsed.\n     */\n    _this.itemsAfterCollapse = 1;\n    _this.breadcrumbsInit = function () {\n      _this.setBreadcrumbSeparator();\n      _this.setMaxItems();\n    };\n    _this.resetActiveBreadcrumb = function () {\n      var breadcrumbs = _this.getBreadcrumbs();\n      // Only reset the active breadcrumb if we were the ones to change it\n      // otherwise use the one set on the component\n      var activeBreadcrumb = breadcrumbs.find(function (breadcrumb) {\n        return breadcrumb.active;\n      });\n      if (activeBreadcrumb && _this.activeChanged) {\n        activeBreadcrumb.active = false;\n      }\n    };\n    _this.setMaxItems = function () {\n      var _assertThisInitialize = _assertThisInitialized(_assertThisInitialized(_this)),\n        itemsAfterCollapse = _assertThisInitialize.itemsAfterCollapse,\n        itemsBeforeCollapse = _assertThisInitialize.itemsBeforeCollapse,\n        maxItems = _assertThisInitialize.maxItems;\n      var breadcrumbs = _this.getBreadcrumbs();\n      var _iterator = _createForOfIteratorHelper(breadcrumbs),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var breadcrumb = _step.value;\n          breadcrumb.showCollapsedIndicator = false;\n          breadcrumb.collapsed = false;\n        }\n        // If the number of breadcrumbs exceeds the maximum number of items\n        // that should show and the items before / after collapse do not\n        // exceed the maximum items then we need to collapse the breadcrumbs\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      var shouldCollapse = maxItems !== undefined && breadcrumbs.length > maxItems && itemsBeforeCollapse + itemsAfterCollapse <= maxItems;\n      if (shouldCollapse) {\n        // Show the collapsed indicator in the first breadcrumb that collapses\n        breadcrumbs.forEach(function (breadcrumb, index) {\n          if (index === itemsBeforeCollapse) {\n            breadcrumb.showCollapsedIndicator = true;\n          }\n          // Collapse all breadcrumbs that have an index greater than or equal to\n          // the number before collapse and an index less than the total number\n          // of breadcrumbs minus the items that should show after the collapse\n          if (index >= itemsBeforeCollapse && index < breadcrumbs.length - itemsAfterCollapse) {\n            breadcrumb.collapsed = true;\n          }\n        });\n      }\n    };\n    _this.setBreadcrumbSeparator = function () {\n      var _assertThisInitialize2 = _assertThisInitialized(_assertThisInitialized(_this)),\n        itemsAfterCollapse = _assertThisInitialize2.itemsAfterCollapse,\n        itemsBeforeCollapse = _assertThisInitialize2.itemsBeforeCollapse,\n        maxItems = _assertThisInitialize2.maxItems;\n      var breadcrumbs = _this.getBreadcrumbs();\n      // Check if an active breadcrumb exists already\n      var active = breadcrumbs.find(function (breadcrumb) {\n        return breadcrumb.active;\n      });\n      // Set the separator on all but the last breadcrumb\n      var _iterator2 = _createForOfIteratorHelper(breadcrumbs),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var breadcrumb = _step2.value;\n          // The only time the last breadcrumb changes is when\n          // itemsAfterCollapse is set to 0, in this case the\n          // last breadcrumb will be the collapsed indicator\n          var last = maxItems !== undefined && itemsAfterCollapse === 0 ? breadcrumb === breadcrumbs[itemsBeforeCollapse] : breadcrumb === breadcrumbs[breadcrumbs.length - 1];\n          breadcrumb.last = last;\n          // If the breadcrumb has defined whether or not to show the\n          // separator then use that value, otherwise check if it's the\n          // last breadcrumb\n          var separator = breadcrumb.separator !== undefined ? breadcrumb.separator : last ? undefined : true;\n          breadcrumb.separator = separator;\n          // If there is not an active breadcrumb already\n          // set the last one to active\n          if (!active && last) {\n            breadcrumb.active = true;\n            _this.activeChanged = true;\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    };\n    _this.getBreadcrumbs = function () {\n      return Array.from(_this.el.querySelectorAll('ion-breadcrumb'));\n    };\n    _this.slotChanged = function () {\n      _this.resetActiveBreadcrumb();\n      _this.breadcrumbsInit();\n    };\n    return _this;\n  }\n  _createClass(_class, [{\n    key: \"onCollapsedClick\",\n    value: function onCollapsedClick(ev) {\n      var breadcrumbs = this.getBreadcrumbs();\n      var collapsedBreadcrumbs = breadcrumbs.filter(function (breadcrumb) {\n        return breadcrumb.collapsed;\n      });\n      this.ionCollapsedClick.emit(Object.assign(Object.assign({}, ev.detail), {\n        collapsedBreadcrumbs: collapsedBreadcrumbs\n      }));\n    }\n  }, {\n    key: \"maxItemsChanged\",\n    value: function maxItemsChanged() {\n      this.resetActiveBreadcrumb();\n      this.breadcrumbsInit();\n    }\n  }, {\n    key: \"componentWillLoad\",\n    value: function componentWillLoad() {\n      this.breadcrumbsInit();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _createColorClasses;\n      var color = this.color,\n        collapsed = this.collapsed;\n      var mode = getIonMode(this);\n      return h(Host, {\n        class: createColorClasses(color, (_createColorClasses = {}, _defineProperty(_createColorClasses, mode, true), _defineProperty(_createColorClasses, 'in-toolbar', hostContext('ion-toolbar', this.el)), _defineProperty(_createColorClasses, 'in-toolbar-color', hostContext('ion-toolbar[color]', this.el)), _defineProperty(_createColorClasses, 'breadcrumbs-collapsed', collapsed), _createColorClasses))\n      }, h(\"slot\", {\n        onSlotchange: this.slotChanged\n      }));\n    }\n  }, {\n    key: \"el\",\n    get: function get() {\n      return this;\n    }\n  }], [{\n    key: \"watchers\",\n    get: function get() {\n      return {\n        \"maxItems\": [\"maxItemsChanged\"],\n        \"itemsBeforeCollapse\": [\"maxItemsChanged\"],\n        \"itemsAfterCollapse\": [\"maxItemsChanged\"]\n      };\n    }\n  }, {\n    key: \"style\",\n    get: function get() {\n      return {\n        ios: breadcrumbsIosCss,\n        md: breadcrumbsMdCss\n      };\n    }\n  }]);\n  return _class;\n}(HTMLElement), [33, \"ion-breadcrumbs\", {\n  \"color\": [1],\n  \"maxItems\": [2, \"max-items\"],\n  \"itemsBeforeCollapse\": [2, \"items-before-collapse\"],\n  \"itemsAfterCollapse\": [2, \"items-after-collapse\"],\n  \"collapsed\": [32],\n  \"activeChanged\": [32]\n}, [[0, \"collapsedClick\", \"onCollapsedClick\"]]]);\nfunction defineCustomElement$1() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n  var components = [\"ion-breadcrumbs\"];\n  components.forEach(function (tagName) {\n    switch (tagName) {\n      case \"ion-breadcrumbs\":\n        if (!customElements.get(tagName)) {\n          customElements.define(tagName, Breadcrumbs);\n        }\n        break;\n    }\n  });\n}\nvar IonBreadcrumbs = Breadcrumbs;\nvar defineCustomElement = defineCustomElement$1;\nexport { IonBreadcrumbs, defineCustomElement };","map":null,"metadata":{},"sourceType":"module"}