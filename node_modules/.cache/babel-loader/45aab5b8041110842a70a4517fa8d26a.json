{"ast":null,"code":"import _asyncToGenerator from \"/Users/mvp/Documents/Projects/pure-weather-capacitor---v2.0.0/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/mvp/Documents/Projects/pure-weather-capacitor---v2.0.0/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/mvp/Documents/Projects/pure-weather-capacitor---v2.0.0/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/mvp/Documents/Projects/pure-weather-capacitor---v2.0.0/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/mvp/Documents/Projects/pure-weather-capacitor---v2.0.0/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/mvp/Documents/Projects/pure-weather-capacitor---v2.0.0/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == typeof h && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator.return && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(typeof e + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { proxyCustomElement, HTMLElement, readTask, writeTask, forceUpdate, h, Host } from '@stencil/core/internal/client';\nimport { c as componentOnReady } from './helpers.js';\nvar CELL_TYPE_ITEM = 'item';\nvar CELL_TYPE_HEADER = 'header';\nvar CELL_TYPE_FOOTER = 'footer';\nvar NODE_CHANGE_NONE = 0;\nvar NODE_CHANGE_POSITION = 1;\nvar NODE_CHANGE_CELL = 2;\nvar MIN_READS = 2;\nvar updateVDom = function updateVDom(dom, heightIndex, cells, range) {\n  // reset dom\n  var _iterator = _createForOfIteratorHelper(dom),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var node = _step.value;\n      node.change = NODE_CHANGE_NONE;\n      node.d = true;\n    }\n    // try to match into exisiting dom\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  var toMutate = [];\n  var end = range.offset + range.length;\n  var _loop = function _loop() {\n    var cell = cells[i];\n    var node = dom.find(function (n) {\n      return n.d && n.cell === cell;\n    });\n    if (node) {\n      var top = heightIndex[i];\n      if (top !== node.top) {\n        node.top = top;\n        node.change = NODE_CHANGE_POSITION;\n      }\n      node.d = false;\n    } else {\n      toMutate.push(cell);\n    }\n  };\n  for (var i = range.offset; i < end; i++) {\n    _loop();\n  }\n  // needs to append\n  var pool = dom.filter(function (n) {\n    return n.d;\n  });\n  var _loop2 = function _loop2() {\n    var cell = _toMutate[_i];\n    var node = pool.find(function (n) {\n      return n.d && n.cell.type === cell.type;\n    });\n    var index = cell.i;\n    if (node) {\n      node.d = false;\n      node.change = NODE_CHANGE_CELL;\n      node.cell = cell;\n      node.top = heightIndex[index];\n    } else {\n      dom.push({\n        d: false,\n        cell: cell,\n        visible: true,\n        change: NODE_CHANGE_CELL,\n        top: heightIndex[index]\n      });\n    }\n  };\n  for (var _i = 0, _toMutate = toMutate; _i < _toMutate.length; _i++) {\n    _loop2();\n  }\n  dom.filter(function (n) {\n    return n.d && n.top !== -9999;\n  }).forEach(function (n) {\n    n.change = NODE_CHANGE_POSITION;\n    n.top = -9999;\n  });\n};\nvar doRender = function doRender(el, nodeRender, dom, updateCellHeight) {\n  var children = Array.from(el.children).filter(function (n) {\n    return n.tagName !== 'TEMPLATE';\n  });\n  var childrenNu = children.length;\n  var child;\n  for (var i = 0; i < dom.length; i++) {\n    var node = dom[i];\n    var cell = node.cell;\n    // the cell change, the content must be updated\n    if (node.change === NODE_CHANGE_CELL) {\n      if (i < childrenNu) {\n        child = children[i];\n        nodeRender(child, cell, i);\n      } else {\n        var newChild = createNode(el, cell.type);\n        child = nodeRender(newChild, cell, i) || newChild;\n        child.classList.add('virtual-item');\n        el.appendChild(child);\n      }\n      child['$ionCell'] = cell;\n    } else {\n      child = children[i];\n    }\n    // only update position when it changes\n    if (node.change !== NODE_CHANGE_NONE) {\n      child.style.transform = \"translate3d(0,\".concat(node.top, \"px,0)\");\n    }\n    // update visibility\n    var visible = cell.visible;\n    if (node.visible !== visible) {\n      if (visible) {\n        child.classList.remove('virtual-loading');\n      } else {\n        child.classList.add('virtual-loading');\n      }\n      node.visible = visible;\n    }\n    // dynamic height\n    if (cell.reads > 0) {\n      updateCellHeight(cell, child);\n      cell.reads--;\n    }\n  }\n};\nvar createNode = function createNode(el, type) {\n  var template = getTemplate(el, type);\n  if (template && el.ownerDocument) {\n    return el.ownerDocument.importNode(template.content, true).children[0];\n  }\n  return null;\n};\nvar getTemplate = function getTemplate(el, type) {\n  switch (type) {\n    case CELL_TYPE_ITEM:\n      return el.querySelector('template:not([name])');\n    case CELL_TYPE_HEADER:\n      return el.querySelector('template[name=header]');\n    case CELL_TYPE_FOOTER:\n      return el.querySelector('template[name=footer]');\n  }\n};\nvar getViewport = function getViewport(scrollTop, vierportHeight, margin) {\n  return {\n    top: Math.max(scrollTop - margin, 0),\n    bottom: scrollTop + vierportHeight + margin\n  };\n};\nvar getRange = function getRange(heightIndex, viewport, buffer) {\n  var topPos = viewport.top;\n  var bottomPos = viewport.bottom;\n  // find top index\n  var i = 0;\n  for (; i < heightIndex.length; i++) {\n    if (heightIndex[i] > topPos) {\n      break;\n    }\n  }\n  var offset = Math.max(i - buffer - 1, 0);\n  // find bottom index\n  for (; i < heightIndex.length; i++) {\n    if (heightIndex[i] >= bottomPos) {\n      break;\n    }\n  }\n  var end = Math.min(i + buffer, heightIndex.length);\n  var length = end - offset;\n  return {\n    offset: offset,\n    length: length\n  };\n};\nvar getShouldUpdate = function getShouldUpdate(dirtyIndex, currentRange, range) {\n  var end = range.offset + range.length;\n  return dirtyIndex <= end || currentRange.offset !== range.offset || currentRange.length !== range.length;\n};\nvar findCellIndex = function findCellIndex(cells, index) {\n  var max = cells.length > 0 ? cells[cells.length - 1].index : 0;\n  if (index === 0) {\n    return 0;\n  } else if (index === max + 1) {\n    return cells.length;\n  } else {\n    return cells.findIndex(function (c) {\n      return c.index === index;\n    });\n  }\n};\nvar inplaceUpdate = function inplaceUpdate(dst, src, offset) {\n  if (offset === 0 && src.length >= dst.length) {\n    return src;\n  }\n  for (var i = 0; i < src.length; i++) {\n    dst[i + offset] = src[i];\n  }\n  return dst;\n};\nvar _calcCells = function calcCells(items, itemHeight, headerHeight, footerHeight, headerFn, footerFn, approxHeaderHeight, approxFooterHeight, approxItemHeight, j, offset, len) {\n  var cells = [];\n  var end = len + offset;\n  for (var i = offset; i < end; i++) {\n    var item = items[i];\n    if (headerFn) {\n      var value = headerFn(item, i, items);\n      if (value != null) {\n        cells.push({\n          i: j++,\n          type: CELL_TYPE_HEADER,\n          value: value,\n          index: i,\n          height: headerHeight ? headerHeight(value, i) : approxHeaderHeight,\n          reads: headerHeight ? 0 : MIN_READS,\n          visible: !!headerHeight\n        });\n      }\n    }\n    cells.push({\n      i: j++,\n      type: CELL_TYPE_ITEM,\n      value: item,\n      index: i,\n      height: itemHeight ? itemHeight(item, i) : approxItemHeight,\n      reads: itemHeight ? 0 : MIN_READS,\n      visible: !!itemHeight\n    });\n    if (footerFn) {\n      var _value = footerFn(item, i, items);\n      if (_value != null) {\n        cells.push({\n          i: j++,\n          type: CELL_TYPE_FOOTER,\n          value: _value,\n          index: i,\n          height: footerHeight ? footerHeight(_value, i) : approxFooterHeight,\n          reads: footerHeight ? 0 : MIN_READS,\n          visible: !!footerHeight\n        });\n      }\n    }\n  }\n  return cells;\n};\nvar _calcHeightIndex = function calcHeightIndex(buf, cells, index) {\n  var acum = buf[index];\n  for (var i = index; i < buf.length; i++) {\n    buf[i] = acum;\n    acum += cells[i].height;\n  }\n  return acum;\n};\nvar resizeBuffer = function resizeBuffer(buf, len) {\n  if (!buf) {\n    return new Uint32Array(len);\n  }\n  if (buf.length === len) {\n    return buf;\n  } else if (len > buf.length) {\n    var newBuf = new Uint32Array(len);\n    newBuf.set(buf);\n    return newBuf;\n  } else {\n    return buf.subarray(0, len);\n  }\n};\nvar positionForIndex = function positionForIndex(index, cells, heightIndex) {\n  var cell = cells.find(function (c) {\n    return c.type === CELL_TYPE_ITEM && c.index === index;\n  });\n  if (cell) {\n    return heightIndex[cell.i];\n  }\n  return -1;\n};\nvar virtualScrollCss = \"ion-virtual-scroll{display:block;position:relative;width:100%;contain:strict;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}ion-virtual-scroll>.virtual-loading{opacity:0}ion-virtual-scroll>.virtual-item{position:absolute !important;top:0 !important;right:0 !important;left:0 !important;-webkit-transition-duration:0ms;transition-duration:0ms;will-change:transform}\";\nvar VirtualScroll = /*@__PURE__*/proxyCustomElement( /*#__PURE__*/function (_HTMLElement) {\n  _inherits(_class, _HTMLElement);\n  function _class() {\n    var _this;\n    _classCallCheck(this, _class);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(_class).call(this));\n    _this.__registerHost();\n    _this.range = {\n      offset: 0,\n      length: 0\n    };\n    _this.viewportHeight = 0;\n    _this.cells = [];\n    _this.virtualDom = [];\n    _this.isEnabled = false;\n    _this.viewportOffset = 0;\n    _this.currentScrollTop = 0;\n    _this.indexDirty = 0;\n    _this.lastItemLen = 0;\n    _this.totalHeight = 0;\n    /**\n     * It is important to provide this\n     * if virtual item height will be significantly larger than the default\n     * The approximate height of each virtual item template's cell.\n     * This dimension is used to help determine how many cells should\n     * be created when initialized, and to help calculate the height of\n     * the scrollable area. This height value can only use `px` units.\n     * Note that the actual rendered size of each cell comes from the\n     * app's CSS, whereas this approximation is used to help calculate\n     * initial dimensions before the item has been rendered.\n     */\n    _this.approxItemHeight = 45;\n    /**\n     * The approximate height of each header template's cell.\n     * This dimension is used to help determine how many cells should\n     * be created when initialized, and to help calculate the height of\n     * the scrollable area. This height value can only use `px` units.\n     * Note that the actual rendered size of each cell comes from the\n     * app's CSS, whereas this approximation is used to help calculate\n     * initial dimensions before the item has been rendered.\n     */\n    _this.approxHeaderHeight = 30;\n    /**\n     * The approximate width of each footer template's cell.\n     * This dimension is used to help determine how many cells should\n     * be created when initialized, and to help calculate the height of\n     * the scrollable area. This height value can only use `px` units.\n     * Note that the actual rendered size of each cell comes from the\n     * app's CSS, whereas this approximation is used to help calculate\n     * initial dimensions before the item has been rendered.\n     */\n    _this.approxFooterHeight = 30;\n    _this.onScroll = function () {\n      _this.updateVirtualScroll();\n    };\n    return _this;\n  }\n  _createClass(_class, [{\n    key: \"itemsChanged\",\n    value: function itemsChanged() {\n      this.calcCells();\n      this.updateVirtualScroll();\n    }\n  }, {\n    key: \"componentWillLoad\",\n    value: function componentWillLoad() {\n      console.warn(\"[Deprecation Warning]: ion-virtual-scroll has been deprecated and will be removed in Ionic Framework v7.0. See https://ionicframework.com/docs/angular/virtual-scroll for migration steps.\");\n    }\n  }, {\n    key: \"connectedCallback\",\n    value: function () {\n      var _connectedCallback = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var contentEl;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              contentEl = this.el.closest('ion-content');\n              if (contentEl) {\n                _context.next = 4;\n                break;\n              }\n              console.error('<ion-virtual-scroll> must be used inside an <ion-content>');\n              return _context.abrupt(\"return\");\n            case 4:\n              _context.next = 6;\n              return contentEl.getScrollElement();\n            case 6:\n              this.scrollEl = _context.sent;\n              this.contentEl = contentEl;\n              this.calcCells();\n              this.updateState();\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function connectedCallback() {\n        return _connectedCallback.apply(this, arguments);\n      }\n      return connectedCallback;\n    }()\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.updateState();\n    }\n  }, {\n    key: \"disconnectedCallback\",\n    value: function disconnectedCallback() {\n      this.scrollEl = undefined;\n    }\n  }, {\n    key: \"onResize\",\n    value: function onResize() {\n      this.calcCells();\n      this.updateVirtualScroll();\n    }\n    /**\n     * Returns the position of the virtual item at the given index.\n     */\n  }, {\n    key: \"positionForItem\",\n    value: function positionForItem(index) {\n      return Promise.resolve(positionForIndex(index, this.cells, this.getHeightIndex()));\n    }\n    /**\n     * This method marks a subset of items as dirty, so they can be re-rendered. Items should be marked as\n     * dirty any time the content or their style changes.\n     *\n     * The subset of items to be updated can are specifying by an offset and a length.\n     */\n  }, {\n    key: \"checkRange\",\n    value: function () {\n      var _checkRange = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(offset) {\n        var len,\n          length,\n          cellIndex,\n          cells,\n          _args2 = arguments;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              len = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : -1;\n              if (this.items) {\n                _context2.next = 3;\n                break;\n              }\n              return _context2.abrupt(\"return\");\n            case 3:\n              length = len === -1 ? this.items.length - offset : len;\n              cellIndex = findCellIndex(this.cells, offset);\n              cells = _calcCells(this.items, this.itemHeight, this.headerHeight, this.footerHeight, this.headerFn, this.footerFn, this.approxHeaderHeight, this.approxFooterHeight, this.approxItemHeight, cellIndex, offset, length);\n              this.cells = inplaceUpdate(this.cells, cells, cellIndex);\n              this.lastItemLen = this.items.length;\n              this.indexDirty = Math.max(offset - 1, 0);\n              this.scheduleUpdate();\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function checkRange(_x) {\n        return _checkRange.apply(this, arguments);\n      }\n      return checkRange;\n    }()\n    /**\n     * This method marks the tail the items array as dirty, so they can be re-rendered.\n     *\n     * It's equivalent to calling:\n     *\n     * ```js\n     * virtualScroll.checkRange(lastItemLen);\n     * ```\n     */\n  }, {\n    key: \"checkEnd\",\n    value: function () {\n      var _checkEnd = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              if (this.items) {\n                this.checkRange(this.lastItemLen);\n              }\n            case 1:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function checkEnd() {\n        return _checkEnd.apply(this, arguments);\n      }\n      return checkEnd;\n    }()\n  }, {\n    key: \"updateVirtualScroll\",\n    value: function updateVirtualScroll() {\n      // do nothing if virtual-scroll is disabled\n      if (!this.isEnabled || !this.scrollEl) {\n        return;\n      }\n      // unschedule future updates\n      if (this.timerUpdate) {\n        clearTimeout(this.timerUpdate);\n        this.timerUpdate = undefined;\n      }\n      // schedule DOM operations into the stencil queue\n      readTask(this.readVS.bind(this));\n      writeTask(this.writeVS.bind(this));\n    }\n  }, {\n    key: \"readVS\",\n    value: function readVS() {\n      var contentEl = this.contentEl,\n        scrollEl = this.scrollEl,\n        el = this.el;\n      var topOffset = 0;\n      var node = el;\n      while (node && node !== contentEl) {\n        topOffset += node.offsetTop;\n        node = node.offsetParent;\n      }\n      this.viewportOffset = topOffset;\n      if (scrollEl) {\n        this.viewportHeight = scrollEl.offsetHeight;\n        this.currentScrollTop = scrollEl.scrollTop;\n      }\n    }\n  }, {\n    key: \"writeVS\",\n    value: function writeVS() {\n      var dirtyIndex = this.indexDirty;\n      // get visible viewport\n      var scrollTop = this.currentScrollTop - this.viewportOffset;\n      var viewport = getViewport(scrollTop, this.viewportHeight, 100);\n      // compute lazily the height index\n      var heightIndex = this.getHeightIndex();\n      // get array bounds of visible cells base in the viewport\n      var range = getRange(heightIndex, viewport, 2);\n      // fast path, do nothing\n      var shouldUpdate = getShouldUpdate(dirtyIndex, this.range, range);\n      if (!shouldUpdate) {\n        return;\n      }\n      this.range = range;\n      // in place mutation of the virtual DOM\n      updateVDom(this.virtualDom, heightIndex, this.cells, range);\n      // Write DOM\n      // Different code paths taken depending of the render API used\n      if (this.nodeRender) {\n        doRender(this.el, this.nodeRender, this.virtualDom, this.updateCellHeight.bind(this));\n      } else if (this.domRender) {\n        this.domRender(this.virtualDom);\n      } else if (this.renderItem) {\n        forceUpdate(this);\n      }\n    }\n  }, {\n    key: \"updateCellHeight\",\n    value: function updateCellHeight(cell, node) {\n      var _this2 = this;\n      var update = function update() {\n        if (node['$ionCell'] === cell) {\n          var style = window.getComputedStyle(node);\n          var height = node.offsetHeight + parseFloat(style.getPropertyValue('margin-bottom'));\n          _this2.setCellHeight(cell, height);\n        }\n      };\n      if (node) {\n        componentOnReady(node, update);\n      } else {\n        update();\n      }\n    }\n  }, {\n    key: \"setCellHeight\",\n    value: function setCellHeight(cell, height) {\n      var index = cell.i;\n      // the cell might changed since the height update was scheduled\n      if (cell !== this.cells[index]) {\n        return;\n      }\n      if (cell.height !== height || cell.visible !== true) {\n        cell.visible = true;\n        cell.height = height;\n        this.indexDirty = Math.min(this.indexDirty, index);\n        this.scheduleUpdate();\n      }\n    }\n  }, {\n    key: \"scheduleUpdate\",\n    value: function scheduleUpdate() {\n      var _this3 = this;\n      clearTimeout(this.timerUpdate);\n      this.timerUpdate = setTimeout(function () {\n        return _this3.updateVirtualScroll();\n      }, 100);\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState() {\n      var shouldEnable = !!(this.scrollEl && this.cells);\n      if (shouldEnable !== this.isEnabled) {\n        this.enableScrollEvents(shouldEnable);\n        if (shouldEnable) {\n          this.updateVirtualScroll();\n        }\n      }\n    }\n  }, {\n    key: \"calcCells\",\n    value: function calcCells() {\n      if (!this.items) {\n        return;\n      }\n      this.lastItemLen = this.items.length;\n      this.cells = _calcCells(this.items, this.itemHeight, this.headerHeight, this.footerHeight, this.headerFn, this.footerFn, this.approxHeaderHeight, this.approxFooterHeight, this.approxItemHeight, 0, 0, this.lastItemLen);\n      this.indexDirty = 0;\n    }\n  }, {\n    key: \"getHeightIndex\",\n    value: function getHeightIndex() {\n      if (this.indexDirty !== Infinity) {\n        this.calcHeightIndex(this.indexDirty);\n      }\n      return this.heightIndex;\n    }\n  }, {\n    key: \"calcHeightIndex\",\n    value: function calcHeightIndex() {\n      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      // TODO: optimize, we don't need to calculate all the cells\n      this.heightIndex = resizeBuffer(this.heightIndex, this.cells.length);\n      this.totalHeight = _calcHeightIndex(this.heightIndex, this.cells, index);\n      this.indexDirty = Infinity;\n    }\n  }, {\n    key: \"enableScrollEvents\",\n    value: function enableScrollEvents(shouldListen) {\n      var _this4 = this;\n      if (this.rmEvent) {\n        this.rmEvent();\n        this.rmEvent = undefined;\n      }\n      var scrollEl = this.scrollEl;\n      if (scrollEl) {\n        this.isEnabled = shouldListen;\n        scrollEl.addEventListener('scroll', this.onScroll);\n        this.rmEvent = function () {\n          scrollEl.removeEventListener('scroll', _this4.onScroll);\n        };\n      }\n    }\n  }, {\n    key: \"renderVirtualNode\",\n    value: function renderVirtualNode(node) {\n      var _node$cell = node.cell,\n        type = _node$cell.type,\n        value = _node$cell.value,\n        index = _node$cell.index;\n      switch (type) {\n        case CELL_TYPE_ITEM:\n          return this.renderItem(value, index);\n        case CELL_TYPE_HEADER:\n          return this.renderHeader(value, index);\n        case CELL_TYPE_FOOTER:\n          return this.renderFooter(value, index);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this5 = this;\n      return h(Host, {\n        style: {\n          height: \"\".concat(this.totalHeight, \"px\")\n        }\n      }, this.renderItem && h(VirtualProxy, {\n        dom: this.virtualDom\n      }, this.virtualDom.map(function (node) {\n        return _this5.renderVirtualNode(node);\n      })));\n    }\n  }, {\n    key: \"el\",\n    get: function get() {\n      return this;\n    }\n  }], [{\n    key: \"watchers\",\n    get: function get() {\n      return {\n        \"itemHeight\": [\"itemsChanged\"],\n        \"headerHeight\": [\"itemsChanged\"],\n        \"footerHeight\": [\"itemsChanged\"],\n        \"items\": [\"itemsChanged\"]\n      };\n    }\n  }, {\n    key: \"style\",\n    get: function get() {\n      return virtualScrollCss;\n    }\n  }]);\n  return _class;\n}(HTMLElement), [0, \"ion-virtual-scroll\", {\n  \"approxItemHeight\": [2, \"approx-item-height\"],\n  \"approxHeaderHeight\": [2, \"approx-header-height\"],\n  \"approxFooterHeight\": [2, \"approx-footer-height\"],\n  \"headerFn\": [16],\n  \"footerFn\": [16],\n  \"items\": [16],\n  \"itemHeight\": [16],\n  \"headerHeight\": [16],\n  \"footerHeight\": [16],\n  \"renderItem\": [16],\n  \"renderHeader\": [16],\n  \"renderFooter\": [16],\n  \"nodeRender\": [16],\n  \"domRender\": [16],\n  \"totalHeight\": [32],\n  \"positionForItem\": [64],\n  \"checkRange\": [64],\n  \"checkEnd\": [64]\n}, [[9, \"resize\", \"onResize\"]]]);\nvar VirtualProxy = function VirtualProxy(_ref, children, utils) {\n  var dom = _ref.dom;\n  return utils.map(children, function (child, i) {\n    var node = dom[i];\n    var vattrs = child.vattrs || {};\n    var classes = vattrs.class || '';\n    classes += 'virtual-item ';\n    if (!node.visible) {\n      classes += 'virtual-loading';\n    }\n    return Object.assign(Object.assign({}, child), {\n      vattrs: Object.assign(Object.assign({}, vattrs), {\n        class: classes,\n        style: Object.assign(Object.assign({}, vattrs.style), {\n          transform: \"translate3d(0,\".concat(node.top, \"px,0)\")\n        })\n      })\n    });\n  });\n};\nfunction defineCustomElement$1() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n  var components = [\"ion-virtual-scroll\"];\n  components.forEach(function (tagName) {\n    switch (tagName) {\n      case \"ion-virtual-scroll\":\n        if (!customElements.get(tagName)) {\n          customElements.define(tagName, VirtualScroll);\n        }\n        break;\n    }\n  });\n}\nvar IonVirtualScroll = VirtualScroll;\nvar defineCustomElement = defineCustomElement$1;\nexport { IonVirtualScroll, defineCustomElement };","map":null,"metadata":{},"sourceType":"module"}