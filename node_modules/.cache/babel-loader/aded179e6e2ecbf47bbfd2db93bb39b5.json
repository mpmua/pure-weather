{"ast":null,"code":"import _slicedToArray from \"/Users/mvp/Documents/Projects/pure-weather-capacitor---v2.0.0/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/mvp/Documents/Projects/pure-weather-capacitor---v2.0.0/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/mvp/Documents/Projects/pure-weather-capacitor---v2.0.0/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { Context, setPlatformHelpers, setMode, getMode } from '@stencil/core/internal/client';\n\n// TODO(FW-2832): types\nvar Config = /*#__PURE__*/function () {\n  function Config() {\n    _classCallCheck(this, Config);\n    this.m = new Map();\n  }\n  _createClass(Config, [{\n    key: \"reset\",\n    value: function reset(configObj) {\n      this.m = new Map(Object.entries(configObj));\n    }\n  }, {\n    key: \"get\",\n    value: function get(key, fallback) {\n      var value = this.m.get(key);\n      return value !== undefined ? value : fallback;\n    }\n  }, {\n    key: \"getBoolean\",\n    value: function getBoolean(key) {\n      var fallback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var val = this.m.get(key);\n      if (val === undefined) {\n        return fallback;\n      }\n      if (typeof val === 'string') {\n        return val === 'true';\n      }\n      return !!val;\n    }\n  }, {\n    key: \"getNumber\",\n    value: function getNumber(key, fallback) {\n      var val = parseFloat(this.m.get(key));\n      return isNaN(val) ? fallback !== undefined ? fallback : NaN : val;\n    }\n  }, {\n    key: \"set\",\n    value: function set(key, value) {\n      this.m.set(key, value);\n    }\n  }]);\n  return Config;\n}();\nvar config = /*@__PURE__*/new Config();\nvar configFromSession = function configFromSession(win) {\n  try {\n    var configStr = win.sessionStorage.getItem(IONIC_SESSION_KEY);\n    return configStr !== null ? JSON.parse(configStr) : {};\n  } catch (e) {\n    return {};\n  }\n};\nvar saveConfig = function saveConfig(win, c) {\n  try {\n    win.sessionStorage.setItem(IONIC_SESSION_KEY, JSON.stringify(c));\n  } catch (e) {\n    return;\n  }\n};\nvar configFromURL = function configFromURL(win) {\n  var configObj = {};\n  win.location.search.slice(1).split('&').map(function (entry) {\n    return entry.split('=');\n  }).map(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n      key = _ref2[0],\n      value = _ref2[1];\n    return [decodeURIComponent(key), decodeURIComponent(value)];\n  }).filter(function (_ref3) {\n    var _ref4 = _slicedToArray(_ref3, 1),\n      key = _ref4[0];\n    return startsWith(key, IONIC_PREFIX);\n  }).map(function (_ref5) {\n    var _ref6 = _slicedToArray(_ref5, 2),\n      key = _ref6[0],\n      value = _ref6[1];\n    return [key.slice(IONIC_PREFIX.length), value];\n  }).forEach(function (_ref7) {\n    var _ref8 = _slicedToArray(_ref7, 2),\n      key = _ref8[0],\n      value = _ref8[1];\n    configObj[key] = value;\n  });\n  return configObj;\n};\nvar startsWith = function startsWith(input, search) {\n  return input.substr(0, search.length) === search;\n};\nvar IONIC_PREFIX = 'ionic:';\nvar IONIC_SESSION_KEY = 'ionic-persist-config';\nvar getPlatforms = function getPlatforms(win) {\n  return setupPlatforms(win);\n};\nvar isPlatform = function isPlatform(winOrPlatform, platform) {\n  if (typeof winOrPlatform === 'string') {\n    platform = winOrPlatform;\n    winOrPlatform = undefined;\n  }\n  return getPlatforms(winOrPlatform).includes(platform);\n};\nvar setupPlatforms = function setupPlatforms() {\n  var win = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window;\n  if (typeof win === 'undefined') {\n    return [];\n  }\n  win.Ionic = win.Ionic || {};\n  var platforms = win.Ionic.platforms;\n  if (platforms == null) {\n    platforms = win.Ionic.platforms = detectPlatforms(win);\n    platforms.forEach(function (p) {\n      return win.document.documentElement.classList.add(\"plt-\".concat(p));\n    });\n  }\n  return platforms;\n};\nvar detectPlatforms = function detectPlatforms(win) {\n  var customPlatformMethods = config.get('platform');\n  return Object.keys(PLATFORMS_MAP).filter(function (p) {\n    var customMethod = customPlatformMethods === null || customPlatformMethods === void 0 ? void 0 : customPlatformMethods[p];\n    return typeof customMethod === 'function' ? customMethod(win) : PLATFORMS_MAP[p](win);\n  });\n};\nvar isMobileWeb = function isMobileWeb(win) {\n  return isMobile(win) && !isHybrid(win);\n};\nvar isIpad = function isIpad(win) {\n  // iOS 12 and below\n  if (testUserAgent(win, /iPad/i)) {\n    return true;\n  }\n  // iOS 13+\n  if (testUserAgent(win, /Macintosh/i) && isMobile(win)) {\n    return true;\n  }\n  return false;\n};\nvar isIphone = function isIphone(win) {\n  return testUserAgent(win, /iPhone/i);\n};\nvar isIOS = function isIOS(win) {\n  return testUserAgent(win, /iPhone|iPod/i) || isIpad(win);\n};\nvar isAndroid = function isAndroid(win) {\n  return testUserAgent(win, /android|sink/i);\n};\nvar isAndroidTablet = function isAndroidTablet(win) {\n  return isAndroid(win) && !testUserAgent(win, /mobile/i);\n};\nvar isPhablet = function isPhablet(win) {\n  var width = win.innerWidth;\n  var height = win.innerHeight;\n  var smallest = Math.min(width, height);\n  var largest = Math.max(width, height);\n  return smallest > 390 && smallest < 520 && largest > 620 && largest < 800;\n};\nvar isTablet = function isTablet(win) {\n  var width = win.innerWidth;\n  var height = win.innerHeight;\n  var smallest = Math.min(width, height);\n  var largest = Math.max(width, height);\n  return isIpad(win) || isAndroidTablet(win) || smallest > 460 && smallest < 820 && largest > 780 && largest < 1400;\n};\nvar isMobile = function isMobile(win) {\n  return matchMedia(win, '(any-pointer:coarse)');\n};\nvar isDesktop = function isDesktop(win) {\n  return !isMobile(win);\n};\nvar isHybrid = function isHybrid(win) {\n  return isCordova(win) || isCapacitorNative(win);\n};\nvar isCordova = function isCordova(win) {\n  return !!(win['cordova'] || win['phonegap'] || win['PhoneGap']);\n};\nvar isCapacitorNative = function isCapacitorNative(win) {\n  var capacitor = win['Capacitor'];\n  return !!(capacitor === null || capacitor === void 0 ? void 0 : capacitor.isNative);\n};\nvar isElectron = function isElectron(win) {\n  return testUserAgent(win, /electron/i);\n};\nvar isPWA = function isPWA(win) {\n  var _a;\n  return !!(((_a = win.matchMedia) === null || _a === void 0 ? void 0 : _a.call(win, '(display-mode: standalone)').matches) || win.navigator.standalone);\n};\nvar testUserAgent = function testUserAgent(win, expr) {\n  return expr.test(win.navigator.userAgent);\n};\nvar matchMedia = function matchMedia(win, query) {\n  var _a;\n  return (_a = win.matchMedia) === null || _a === void 0 ? void 0 : _a.call(win, query).matches;\n};\nvar PLATFORMS_MAP = {\n  ipad: isIpad,\n  iphone: isIphone,\n  ios: isIOS,\n  android: isAndroid,\n  phablet: isPhablet,\n  tablet: isTablet,\n  cordova: isCordova,\n  capacitor: isCapacitorNative,\n  electron: isElectron,\n  pwa: isPWA,\n  mobile: isMobile,\n  mobileweb: isMobileWeb,\n  desktop: isDesktop,\n  hybrid: isHybrid\n};\nvar defaultMode;\nvar getIonMode = function getIonMode(ref) {\n  return ref && getMode(ref) || defaultMode;\n};\nvar initialize = function initialize() {\n  var userConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  if (typeof window === 'undefined') {\n    return;\n  }\n  var doc = window.document;\n  var win = window;\n  Context.config = config;\n  var Ionic = win.Ionic = win.Ionic || {};\n  var platformHelpers = {};\n  if (userConfig._ael) {\n    platformHelpers.ael = userConfig._ael;\n  }\n  if (userConfig._rel) {\n    platformHelpers.rel = userConfig._rel;\n  }\n  if (userConfig._ce) {\n    platformHelpers.ce = userConfig._ce;\n  }\n  setPlatformHelpers(platformHelpers);\n  // create the Ionic.config from raw config object (if it exists)\n  // and convert Ionic.config into a ConfigApi that has a get() fn\n  var configObj = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, configFromSession(win)), {\n    persistConfig: false\n  }), Ionic.config), configFromURL(win)), userConfig);\n  config.reset(configObj);\n  if (config.getBoolean('persistConfig')) {\n    saveConfig(win, configObj);\n  }\n  // Setup platforms\n  setupPlatforms(win);\n  // first see if the mode was set as an attribute on <html>\n  // which could have been set by the user, or by pre-rendering\n  // otherwise get the mode via config settings, and fallback to md\n  Ionic.config = config;\n  Ionic.mode = defaultMode = config.get('mode', doc.documentElement.getAttribute('mode') || (isPlatform(win, 'ios') ? 'ios' : 'md'));\n  config.set('mode', defaultMode);\n  doc.documentElement.setAttribute('mode', defaultMode);\n  doc.documentElement.classList.add(defaultMode);\n  if (config.getBoolean('_testing')) {\n    config.set('animated', false);\n  }\n  var isIonicElement = function isIonicElement(elm) {\n    var _a;\n    return (_a = elm.tagName) === null || _a === void 0 ? void 0 : _a.startsWith('ION-');\n  };\n  var isAllowedIonicModeValue = function isAllowedIonicModeValue(elmMode) {\n    return ['ios', 'md'].includes(elmMode);\n  };\n  setMode(function (elm) {\n    while (elm) {\n      var elmMode = elm.mode || elm.getAttribute('mode');\n      if (elmMode) {\n        if (isAllowedIonicModeValue(elmMode)) {\n          return elmMode;\n        } else if (isIonicElement(elm)) {\n          console.warn('Invalid ionic mode: \"' + elmMode + '\", expected: \"ios\" or \"md\"');\n        }\n      }\n      elm = elm.parentElement;\n    }\n    return defaultMode;\n  });\n};\nexport { isPlatform as a, getIonMode as b, config as c, getPlatforms as g, initialize as i };","map":null,"metadata":{},"sourceType":"module"}