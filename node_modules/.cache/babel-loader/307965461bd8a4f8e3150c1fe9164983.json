{"ast":null,"code":"import _defineProperty from \"/Users/mvp/Documents/Projects/pure-weather-capacitor---v2.0.0/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"/Users/mvp/Documents/Projects/pure-weather-capacitor---v2.0.0/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/mvp/Documents/Projects/pure-weather-capacitor---v2.0.0/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/mvp/Documents/Projects/pure-weather-capacitor---v2.0.0/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/mvp/Documents/Projects/pure-weather-capacitor---v2.0.0/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/mvp/Documents/Projects/pure-weather-capacitor---v2.0.0/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/mvp/Documents/Projects/pure-weather-capacitor---v2.0.0/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/mvp/Documents/Projects/pure-weather-capacitor---v2.0.0/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == typeof h && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator.return && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(typeof e + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { proxyCustomElement, HTMLElement, createEvent, writeTask, h, Host } from '@stencil/core/internal/client';\nimport { c as config, b as getIonMode } from './ionic-global.js';\nimport { q as pointerCoord } from './helpers.js';\nimport { i as isRTL } from './dir.js';\nimport { c as createColorClasses, h as hostContext } from './theme.js';\nvar segmentIosCss = \":host{--ripple-color:currentColor;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;display:-ms-flexbox;display:flex;position:relative;-ms-flex-align:stretch;align-items:stretch;-ms-flex-pack:center;justify-content:center;width:100%;background:var(--background);font-family:var(--ion-font-family, inherit);text-align:center;contain:paint;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}:host(.segment-scrollable){-ms-flex-pack:start;justify-content:start;width:auto;overflow-x:auto}:host(.segment-scrollable::-webkit-scrollbar){display:none}:host{--background:rgba(var(--ion-text-color-rgb, 0, 0, 0), 0.065);border-radius:8px;overflow:hidden;z-index:0}:host(.ion-color){background:rgba(var(--ion-color-base-rgb), 0.065)}:host(.in-toolbar){margin-left:auto;margin-right:auto;margin-top:0;margin-bottom:0;width:auto}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host(.in-toolbar){margin-left:unset;margin-right:unset;-webkit-margin-start:auto;margin-inline-start:auto;-webkit-margin-end:auto;margin-inline-end:auto}}:host(.in-toolbar:not(.ion-color)){background:var(--ion-toolbar-segment-background, var(--background))}:host(.in-toolbar-color:not(.ion-color)){background:rgba(var(--ion-color-contrast-rgb), 0.11)}\";\nvar segmentMdCss = \":host{--ripple-color:currentColor;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;display:-ms-flexbox;display:flex;position:relative;-ms-flex-align:stretch;align-items:stretch;-ms-flex-pack:center;justify-content:center;width:100%;background:var(--background);font-family:var(--ion-font-family, inherit);text-align:center;contain:paint;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}:host(.segment-scrollable){-ms-flex-pack:start;justify-content:start;width:auto;overflow-x:auto}:host(.segment-scrollable::-webkit-scrollbar){display:none}:host{--background:transparent}:host(.segment-scrollable) ::slotted(ion-segment-button){min-width:auto}\";\nvar Segment = /*@__PURE__*/proxyCustomElement( /*#__PURE__*/function (_HTMLElement) {\n  _inherits(_class, _HTMLElement);\n  function _class() {\n    var _this;\n    _classCallCheck(this, _class);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(_class).call(this));\n    _this.__registerHost();\n    _this.__attachShadow();\n    _this.ionChange = createEvent(_assertThisInitialized(_assertThisInitialized(_this)), \"ionChange\", 7);\n    _this.ionSelect = createEvent(_assertThisInitialized(_assertThisInitialized(_this)), \"ionSelect\", 7);\n    _this.ionStyle = createEvent(_assertThisInitialized(_assertThisInitialized(_this)), \"ionStyle\", 7);\n    _this.didInit = false;\n    _this.activated = false;\n    /**\n     * If `true`, the user cannot interact with the segment.\n     */\n    _this.disabled = false;\n    /**\n     * If `true`, the segment buttons will overflow and the user can swipe to see them.\n     * In addition, this will disable the gesture to drag the indicator between the buttons\n     * in order to swipe to see hidden buttons.\n     */\n    _this.scrollable = false;\n    /**\n     * If `true`, users will be able to swipe between segment buttons to activate them.\n     */\n    _this.swipeGesture = true;\n    /**\n     * If `true`, navigating to an `ion-segment-button` with the keyboard will focus and select the element.\n     * If `false`, keyboard navigation will only focus the `ion-segment-button` element.\n     */\n    _this.selectOnFocus = false;\n    _this.onClick = function (ev) {\n      var current = ev.target;\n      var previous = _this.checked;\n      // If the current element is a segment then that means\n      // the user tried to swipe to a segment button and\n      // click a segment button at the same time so we should\n      // not update the checked segment button\n      if (current.tagName === 'ION-SEGMENT') {\n        return;\n      }\n      _this.value = current.value;\n      if (_this.scrollable || !_this.swipeGesture) {\n        if (previous) {\n          _this.checkButton(previous, current);\n        } else {\n          _this.setCheckedClasses();\n        }\n      }\n      _this.checked = current;\n    };\n    _this.getSegmentButton = function (selector) {\n      var buttons = _this.getButtons().filter(function (button) {\n        return !button.disabled;\n      });\n      var currIndex = buttons.findIndex(function (button) {\n        return button === document.activeElement;\n      });\n      switch (selector) {\n        case 'first':\n          return buttons[0];\n        case 'last':\n          return buttons[buttons.length - 1];\n        case 'next':\n          return buttons[currIndex + 1] || buttons[0];\n        case 'previous':\n          return buttons[currIndex - 1] || buttons[buttons.length - 1];\n        default:\n          return null;\n      }\n    };\n    return _this;\n  }\n  _createClass(_class, [{\n    key: \"colorChanged\",\n    value: function colorChanged(value, oldValue) {\n      /**\n       * If color is set after not having\n       * previously been set (or vice versa),\n       * we need to emit style so the segment-buttons\n       * can apply their color classes properly.\n       */\n      if (oldValue === undefined && value !== undefined || oldValue !== undefined && value === undefined) {\n        this.emitStyle();\n      }\n    }\n  }, {\n    key: \"swipeGestureChanged\",\n    value: function swipeGestureChanged() {\n      this.gestureChanged();\n    }\n  }, {\n    key: \"valueChanged\",\n    value: function valueChanged(value, oldValue) {\n      this.ionSelect.emit({\n        value: value\n      });\n      if (oldValue !== '' || this.didInit) {\n        if (!this.activated) {\n          this.ionChange.emit({\n            value: value\n          });\n        } else {\n          this.valueAfterGesture = value;\n        }\n      }\n    }\n  }, {\n    key: \"disabledChanged\",\n    value: function disabledChanged() {\n      this.gestureChanged();\n      var buttons = this.getButtons();\n      var _iterator = _createForOfIteratorHelper(buttons),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var button = _step.value;\n          button.disabled = this.disabled;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"gestureChanged\",\n    value: function gestureChanged() {\n      if (this.gesture) {\n        this.gesture.enable(!this.scrollable && !this.disabled && this.swipeGesture);\n      }\n    }\n  }, {\n    key: \"connectedCallback\",\n    value: function connectedCallback() {\n      this.emitStyle();\n    }\n  }, {\n    key: \"componentWillLoad\",\n    value: function componentWillLoad() {\n      this.emitStyle();\n    }\n  }, {\n    key: \"componentDidLoad\",\n    value: function () {\n      var _componentDidLoad = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var _this2 = this;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              this.setCheckedClasses();\n              this.ensureFocusable();\n              _context.next = 4;\n              return import('./index2.js');\n            case 4:\n              this.gesture = _context.sent.createGesture({\n                el: this.el,\n                gestureName: 'segment',\n                gesturePriority: 100,\n                threshold: 0,\n                passive: false,\n                onStart: function onStart(ev) {\n                  return _this2.onStart(ev);\n                },\n                onMove: function onMove(ev) {\n                  return _this2.onMove(ev);\n                },\n                onEnd: function onEnd(ev) {\n                  return _this2.onEnd(ev);\n                }\n              });\n              this.gestureChanged();\n              if (this.disabled) {\n                this.disabledChanged();\n              }\n              this.didInit = true;\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function componentDidLoad() {\n        return _componentDidLoad.apply(this, arguments);\n      }\n      return componentDidLoad;\n    }()\n  }, {\n    key: \"onStart\",\n    value: function onStart(detail) {\n      this.activate(detail);\n    }\n  }, {\n    key: \"onMove\",\n    value: function onMove(detail) {\n      this.setNextIndex(detail);\n    }\n  }, {\n    key: \"onEnd\",\n    value: function onEnd(detail) {\n      this.setActivated(false);\n      var checkedValidButton = this.setNextIndex(detail, true);\n      detail.event.stopImmediatePropagation();\n      if (checkedValidButton) {\n        this.addRipple(detail);\n      }\n      var value = this.valueAfterGesture;\n      if (value !== undefined) {\n        this.ionChange.emit({\n          value: value\n        });\n        this.valueAfterGesture = undefined;\n      }\n    }\n  }, {\n    key: \"getButtons\",\n    value: function getButtons() {\n      return Array.from(this.el.querySelectorAll('ion-segment-button'));\n    }\n    /**\n     * The gesture blocks the segment button ripple. This\n     * function adds the ripple based on the checked segment\n     * and where the cursor ended.\n     */\n  }, {\n    key: \"addRipple\",\n    value: function addRipple(detail) {\n      var _this3 = this;\n      var useRippleEffect = config.getBoolean('animated', true) && config.getBoolean('rippleEffect', true);\n      if (!useRippleEffect) {\n        return;\n      }\n      var buttons = this.getButtons();\n      var checked = buttons.find(function (button) {\n        return button.value === _this3.value;\n      });\n      var root = checked.shadowRoot || checked;\n      var ripple = root.querySelector('ion-ripple-effect');\n      if (!ripple) {\n        return;\n      }\n      var _pointerCoord = pointerCoord(detail.event),\n        x = _pointerCoord.x,\n        y = _pointerCoord.y;\n      ripple.addRipple(x, y).then(function (remove) {\n        return remove();\n      });\n    }\n    /*\n     * Activate both the segment and the buttons\n     * due to a bug with ::slotted in Safari\n     */\n  }, {\n    key: \"setActivated\",\n    value: function setActivated(activated) {\n      var buttons = this.getButtons();\n      buttons.forEach(function (button) {\n        if (activated) {\n          button.classList.add('segment-button-activated');\n        } else {\n          button.classList.remove('segment-button-activated');\n        }\n      });\n      this.activated = activated;\n    }\n  }, {\n    key: \"activate\",\n    value: function activate(detail) {\n      var _this4 = this;\n      var clicked = detail.event.target;\n      var buttons = this.getButtons();\n      var checked = buttons.find(function (button) {\n        return button.value === _this4.value;\n      });\n      // Make sure we are only checking for activation on a segment button\n      // since disabled buttons will get the click on the segment\n      if (clicked.tagName !== 'ION-SEGMENT-BUTTON') {\n        return;\n      }\n      // If there are no checked buttons, set the current button to checked\n      if (!checked) {\n        this.value = clicked.value;\n        this.setCheckedClasses();\n      }\n      // If the gesture began on the clicked button with the indicator\n      // then we should activate the indicator\n      if (this.value === clicked.value) {\n        this.setActivated(true);\n      }\n    }\n  }, {\n    key: \"getIndicator\",\n    value: function getIndicator(button) {\n      var root = button.shadowRoot || button;\n      return root.querySelector('.segment-button-indicator');\n    }\n  }, {\n    key: \"checkButton\",\n    value: function checkButton(previous, current) {\n      var previousIndicator = this.getIndicator(previous);\n      var currentIndicator = this.getIndicator(current);\n      if (previousIndicator === null || currentIndicator === null) {\n        return;\n      }\n      var previousClientRect = previousIndicator.getBoundingClientRect();\n      var currentClientRect = currentIndicator.getBoundingClientRect();\n      var widthDelta = previousClientRect.width / currentClientRect.width;\n      var xPosition = previousClientRect.left - currentClientRect.left;\n      // Scale the indicator width to match the previous indicator width\n      // and translate it on top of the previous indicator\n      var transform = \"translate3d(\".concat(xPosition, \"px, 0, 0) scaleX(\").concat(widthDelta, \")\");\n      writeTask(function () {\n        // Remove the transition before positioning on top of the previous indicator\n        currentIndicator.classList.remove('segment-button-indicator-animated');\n        currentIndicator.style.setProperty('transform', transform);\n        // Force a repaint to ensure the transform happens\n        currentIndicator.getBoundingClientRect();\n        // Add the transition to move the indicator into place\n        currentIndicator.classList.add('segment-button-indicator-animated');\n        // Remove the transform to slide the indicator back to the button clicked\n        currentIndicator.style.setProperty('transform', '');\n      });\n      this.value = current.value;\n      this.setCheckedClasses();\n    }\n  }, {\n    key: \"setCheckedClasses\",\n    value: function setCheckedClasses() {\n      var _this5 = this;\n      var buttons = this.getButtons();\n      var index = buttons.findIndex(function (button) {\n        return button.value === _this5.value;\n      });\n      var next = index + 1;\n      // Keep track of the currently checked button\n      this.checked = buttons.find(function (button) {\n        return button.value === _this5.value;\n      });\n      var _iterator2 = _createForOfIteratorHelper(buttons),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var button = _step2.value;\n          button.classList.remove('segment-button-after-checked');\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      if (next < buttons.length) {\n        buttons[next].classList.add('segment-button-after-checked');\n      }\n    }\n  }, {\n    key: \"setNextIndex\",\n    value: function setNextIndex(detail) {\n      var _this6 = this;\n      var isEnd = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var rtl = isRTL(this.el);\n      var activated = this.activated;\n      var buttons = this.getButtons();\n      var index = buttons.findIndex(function (button) {\n        return button.value === _this6.value;\n      });\n      var previous = buttons[index];\n      var current;\n      var nextIndex;\n      if (index === -1) {\n        return;\n      }\n      // Get the element that the touch event started on in case\n      // it was the checked button, then we will move the indicator\n      var rect = previous.getBoundingClientRect();\n      var left = rect.left;\n      var width = rect.width;\n      // Get the element that the gesture is on top of based on the currentX of the\n      // gesture event and the Y coordinate of the starting element, since the gesture\n      // can move up and down off of the segment\n      var currentX = detail.currentX;\n      var previousY = rect.top + rect.height / 2;\n      /**\n       * Segment can be used inside the shadow dom\n       * so doing document.elementFromPoint would never\n       * return a segment button in that instance.\n       * We use getRootNode to which will return the parent\n       * shadow root if used inside a shadow component and\n       * returns document otherwise.\n       */\n      var root = this.el.getRootNode();\n      var nextEl = root.elementFromPoint(currentX, previousY);\n      var decreaseIndex = rtl ? currentX > left + width : currentX < left;\n      var increaseIndex = rtl ? currentX < left : currentX > left + width;\n      // If the indicator is currently activated then we have started the gesture\n      // on top of the checked button so we need to slide the indicator\n      // by checking the button next to it as we move\n      if (activated && !isEnd) {\n        // Decrease index, move left in LTR & right in RTL\n        if (decreaseIndex) {\n          var newIndex = index - 1;\n          if (newIndex >= 0) {\n            nextIndex = newIndex;\n          }\n          // Increase index, moves right in LTR & left in RTL\n        } else if (increaseIndex) {\n          if (activated && !isEnd) {\n            var _newIndex = index + 1;\n            if (_newIndex < buttons.length) {\n              nextIndex = _newIndex;\n            }\n          }\n        }\n        if (nextIndex !== undefined && !buttons[nextIndex].disabled) {\n          current = buttons[nextIndex];\n        }\n      }\n      // If the indicator is not activated then we will just set the indicator\n      // to the element where the gesture ended\n      if (!activated && isEnd) {\n        current = nextEl;\n      }\n      if (current != null) {\n        /**\n         * If current element is ion-segment then that means\n         * user tried to select a disabled ion-segment-button,\n         * and we should not update the ripple.\n         */\n        if (current.tagName === 'ION-SEGMENT') {\n          return false;\n        }\n        if (previous !== current) {\n          this.checkButton(previous, current);\n        }\n      }\n      return true;\n    }\n  }, {\n    key: \"emitStyle\",\n    value: function emitStyle() {\n      this.ionStyle.emit({\n        segment: true\n      });\n    }\n  }, {\n    key: \"onKeyDown\",\n    value: function onKeyDown(ev) {\n      var rtl = isRTL(this.el);\n      var keyDownSelectsButton = this.selectOnFocus;\n      var current;\n      switch (ev.key) {\n        case 'ArrowRight':\n          ev.preventDefault();\n          current = rtl ? this.getSegmentButton('previous') : this.getSegmentButton('next');\n          break;\n        case 'ArrowLeft':\n          ev.preventDefault();\n          current = rtl ? this.getSegmentButton('next') : this.getSegmentButton('previous');\n          break;\n        case 'Home':\n          ev.preventDefault();\n          current = this.getSegmentButton('first');\n          break;\n        case 'End':\n          ev.preventDefault();\n          current = this.getSegmentButton('last');\n          break;\n        case ' ':\n        case 'Enter':\n          ev.preventDefault();\n          current = document.activeElement;\n          keyDownSelectsButton = true;\n      }\n      if (!current) {\n        return;\n      }\n      if (keyDownSelectsButton) {\n        var previous = this.checked || current;\n        this.checkButton(previous, current);\n      }\n      current.focus();\n    }\n    /* By default, focus is delegated to the selected `ion-segment-button`.\n     * If there is no selected button, focus will instead pass to the first child button.\n     **/\n  }, {\n    key: \"ensureFocusable\",\n    value: function ensureFocusable() {\n      var _a;\n      if (this.value !== undefined) {\n        return;\n      }\n      var buttons = this.getButtons();\n      (_a = buttons[0]) === null || _a === void 0 ? void 0 : _a.setAttribute('tabindex', '0');\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _createColorClasses;\n      var mode = getIonMode(this);\n      return h(Host, {\n        role: \"tablist\",\n        onClick: this.onClick,\n        class: createColorClasses(this.color, (_createColorClasses = {}, _defineProperty(_createColorClasses, mode, true), _defineProperty(_createColorClasses, 'in-toolbar', hostContext('ion-toolbar', this.el)), _defineProperty(_createColorClasses, 'in-toolbar-color', hostContext('ion-toolbar[color]', this.el)), _defineProperty(_createColorClasses, 'segment-activated', this.activated), _defineProperty(_createColorClasses, 'segment-disabled', this.disabled), _defineProperty(_createColorClasses, 'segment-scrollable', this.scrollable), _createColorClasses))\n      }, h(\"slot\", null));\n    }\n  }, {\n    key: \"el\",\n    get: function get() {\n      return this;\n    }\n  }], [{\n    key: \"watchers\",\n    get: function get() {\n      return {\n        \"color\": [\"colorChanged\"],\n        \"swipeGesture\": [\"swipeGestureChanged\"],\n        \"value\": [\"valueChanged\"],\n        \"disabled\": [\"disabledChanged\"]\n      };\n    }\n  }, {\n    key: \"style\",\n    get: function get() {\n      return {\n        ios: segmentIosCss,\n        md: segmentMdCss\n      };\n    }\n  }]);\n  return _class;\n}(HTMLElement), [33, \"ion-segment\", {\n  \"color\": [513],\n  \"disabled\": [4],\n  \"scrollable\": [4],\n  \"swipeGesture\": [4, \"swipe-gesture\"],\n  \"value\": [1025],\n  \"selectOnFocus\": [4, \"select-on-focus\"],\n  \"activated\": [32]\n}, [[0, \"keydown\", \"onKeyDown\"]]]);\nfunction defineCustomElement$1() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n  var components = [\"ion-segment\"];\n  components.forEach(function (tagName) {\n    switch (tagName) {\n      case \"ion-segment\":\n        if (!customElements.get(tagName)) {\n          customElements.define(tagName, Segment);\n        }\n        break;\n    }\n  });\n}\nvar IonSegment = Segment;\nvar defineCustomElement = defineCustomElement$1;\nexport { IonSegment, defineCustomElement };","map":null,"metadata":{},"sourceType":"module"}