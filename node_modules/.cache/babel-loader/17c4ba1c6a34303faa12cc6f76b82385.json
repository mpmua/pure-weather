{"ast":null,"code":"import _asyncToGenerator from \"/Users/mvp/Documents/Projects/pure-weather-capacitor---v2.0.0/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == typeof h && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator.return && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(typeof e + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { g as getScrollElement, c as scrollByPoint, a as findClosestIonContent } from './index8.js';\nimport { a as addEventListener, b as removeEventListener, r as raf, p as pointerCoord, c as componentOnReady } from './helpers.js';\nvar cloneMap = new WeakMap();\nvar relocateInput = function relocateInput(componentEl, inputEl, shouldRelocate) {\n  var inputRelativeY = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n  var disabledClonedInput = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  if (cloneMap.has(componentEl) === shouldRelocate) {\n    return;\n  }\n  if (shouldRelocate) {\n    addClone(componentEl, inputEl, inputRelativeY, disabledClonedInput);\n  } else {\n    removeClone(componentEl, inputEl);\n  }\n};\n// TODO(FW-2832): type\nvar isFocused = function isFocused(input) {\n  return input === input.getRootNode().activeElement;\n};\nvar addClone = function addClone(componentEl, inputEl, inputRelativeY) {\n  var disabledClonedInput = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  // this allows for the actual input to receive the focus from\n  // the user's touch event, but before it receives focus, it\n  // moves the actual input to a location that will not screw\n  // up the app's layout, and does not allow the native browser\n  // to attempt to scroll the input into place (messing up headers/footers)\n  // the cloned input fills the area of where native input should be\n  // while the native input fakes out the browser by relocating itself\n  // before it receives the actual focus event\n  // We hide the focused input (with the visible caret) invisible by making it scale(0),\n  var parentEl = inputEl.parentNode;\n  // DOM WRITES\n  var clonedEl = inputEl.cloneNode(false);\n  clonedEl.classList.add('cloned-input');\n  clonedEl.tabIndex = -1;\n  /**\n   * Making the cloned input disabled prevents\n   * Chrome for Android from still scrolling\n   * the entire page since this cloned input\n   * will briefly be hidden by the keyboard\n   * even though it is not focused.\n   *\n   * This is not needed on iOS. While this\n   * does not cause functional issues on iOS,\n   * the input still appears slightly dimmed even\n   * if we set opacity: 1.\n   */\n  if (disabledClonedInput) {\n    clonedEl.disabled = true;\n  }\n  parentEl.appendChild(clonedEl);\n  cloneMap.set(componentEl, clonedEl);\n  var doc = componentEl.ownerDocument;\n  var tx = doc.dir === 'rtl' ? 9999 : -9999;\n  componentEl.style.pointerEvents = 'none';\n  inputEl.style.transform = \"translate3d(\".concat(tx, \"px,\").concat(inputRelativeY, \"px,0) scale(0)\");\n};\nvar removeClone = function removeClone(componentEl, inputEl) {\n  var clone = cloneMap.get(componentEl);\n  if (clone) {\n    cloneMap.delete(componentEl);\n    clone.remove();\n  }\n  componentEl.style.pointerEvents = '';\n  inputEl.style.transform = '';\n};\nvar enableHideCaretOnScroll = function enableHideCaretOnScroll(componentEl, inputEl, scrollEl) {\n  if (!scrollEl || !inputEl) {\n    return function () {\n      return;\n    };\n  }\n  var scrollHideCaret = function scrollHideCaret(shouldHideCaret) {\n    if (isFocused(inputEl)) {\n      relocateInput(componentEl, inputEl, shouldHideCaret);\n    }\n  };\n  var onBlur = function onBlur() {\n    return relocateInput(componentEl, inputEl, false);\n  };\n  var hideCaret = function hideCaret() {\n    return scrollHideCaret(true);\n  };\n  var showCaret = function showCaret() {\n    return scrollHideCaret(false);\n  };\n  addEventListener(scrollEl, 'ionScrollStart', hideCaret);\n  addEventListener(scrollEl, 'ionScrollEnd', showCaret);\n  inputEl.addEventListener('blur', onBlur);\n  return function () {\n    removeEventListener(scrollEl, 'ionScrollStart', hideCaret);\n    removeEventListener(scrollEl, 'ionScrollEnd', showCaret);\n    inputEl.removeEventListener('blur', onBlur);\n  };\n};\nvar SKIP_SELECTOR = 'input, textarea, [no-blur], [contenteditable]';\nvar enableInputBlurring = function enableInputBlurring() {\n  var focused = true;\n  var didScroll = false;\n  var doc = document;\n  var onScroll = function onScroll() {\n    didScroll = true;\n  };\n  var onFocusin = function onFocusin() {\n    focused = true;\n  };\n  var onTouchend = function onTouchend(ev) {\n    // if app did scroll return early\n    if (didScroll) {\n      didScroll = false;\n      return;\n    }\n    var active = doc.activeElement;\n    if (!active) {\n      return;\n    }\n    // only blur if the active element is a text-input or a textarea\n    if (active.matches(SKIP_SELECTOR)) {\n      return;\n    }\n    // if the selected target is the active element, do not blur\n    var tapped = ev.target;\n    if (tapped === active) {\n      return;\n    }\n    if (tapped.matches(SKIP_SELECTOR) || tapped.closest(SKIP_SELECTOR)) {\n      return;\n    }\n    focused = false;\n    // TODO FW-2796: find a better way, why 50ms?\n    setTimeout(function () {\n      if (!focused) {\n        active.blur();\n      }\n    }, 50);\n  };\n  addEventListener(doc, 'ionScrollStart', onScroll);\n  doc.addEventListener('focusin', onFocusin, true);\n  doc.addEventListener('touchend', onTouchend, false);\n  return function () {\n    removeEventListener(doc, 'ionScrollStart', onScroll, true);\n    doc.removeEventListener('focusin', onFocusin, true);\n    doc.removeEventListener('touchend', onTouchend, false);\n  };\n};\nvar SCROLL_ASSIST_SPEED = 0.3;\nvar getScrollData = function getScrollData(componentEl, contentEl, keyboardHeight) {\n  var _a;\n  var itemEl = (_a = componentEl.closest('ion-item,[ion-item]')) !== null && _a !== void 0 ? _a : componentEl;\n  return calcScrollData(itemEl.getBoundingClientRect(), contentEl.getBoundingClientRect(), keyboardHeight, componentEl.ownerDocument.defaultView.innerHeight // TODO(FW-2832): type\n  );\n};\n\nvar calcScrollData = function calcScrollData(inputRect, contentRect, keyboardHeight, platformHeight) {\n  // compute input's Y values relative to the body\n  var inputTop = inputRect.top;\n  var inputBottom = inputRect.bottom;\n  // compute visible area\n  var visibleAreaTop = contentRect.top;\n  var visibleAreaBottom = Math.min(contentRect.bottom, platformHeight - keyboardHeight);\n  // compute safe area\n  var safeAreaTop = visibleAreaTop + 15;\n  var safeAreaBottom = visibleAreaBottom * 0.75;\n  // figure out if each edge of the input is within the safe area\n  var distanceToBottom = safeAreaBottom - inputBottom;\n  var distanceToTop = safeAreaTop - inputTop;\n  // desiredScrollAmount is the negated distance to the safe area according to our calculations.\n  var desiredScrollAmount = Math.round(distanceToBottom < 0 ? -distanceToBottom : distanceToTop > 0 ? -distanceToTop : 0);\n  // our calculations make some assumptions that aren't always true, like the keyboard being closed when an input\n  // gets focus, so make sure we don't scroll the input above the visible area\n  var scrollAmount = Math.min(desiredScrollAmount, inputTop - visibleAreaTop);\n  var distance = Math.abs(scrollAmount);\n  var duration = distance / SCROLL_ASSIST_SPEED;\n  var scrollDuration = Math.min(400, Math.max(150, duration));\n  return {\n    scrollAmount: scrollAmount,\n    scrollDuration: scrollDuration,\n    scrollPadding: keyboardHeight,\n    inputSafeY: -(inputTop - safeAreaTop) + 4\n  };\n};\nvar enableScrollAssist = function enableScrollAssist(componentEl, inputEl, contentEl, footerEl, keyboardHeight) {\n  var disableClonedInput = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n  var coord;\n  var touchStart = function touchStart(ev) {\n    coord = pointerCoord(ev);\n  };\n  var touchEnd = function touchEnd(ev) {\n    // input cover touchend/mouseup\n    if (!coord) {\n      return;\n    }\n    // get where the touchend/mouseup ended\n    var endCoord = pointerCoord(ev);\n    // focus this input if the pointer hasn't moved XX pixels\n    // and the input doesn't already have focus\n    if (!hasPointerMoved(6, coord, endCoord) && !isFocused(inputEl)) {\n      // begin the input focus process\n      jsSetFocus(componentEl, inputEl, contentEl, footerEl, keyboardHeight, disableClonedInput);\n    }\n  };\n  componentEl.addEventListener('touchstart', touchStart, {\n    capture: true,\n    passive: true\n  });\n  componentEl.addEventListener('touchend', touchEnd, true);\n  return function () {\n    componentEl.removeEventListener('touchstart', touchStart, true);\n    componentEl.removeEventListener('touchend', touchEnd, true);\n  };\n};\nvar jsSetFocus = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(componentEl, inputEl, contentEl, footerEl, keyboardHeight) {\n    var disableClonedInput,\n      scrollData,\n      scrollContentTimeout,\n      scrollContent,\n      doubleKeyboardEventListener,\n      scrollEl,\n      totalScrollAmount,\n      _args2 = arguments;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          disableClonedInput = _args2.length > 5 && _args2[5] !== undefined ? _args2[5] : false;\n          if (!(!contentEl && !footerEl)) {\n            _context2.next = 3;\n            break;\n          }\n          return _context2.abrupt(\"return\");\n        case 3:\n          scrollData = getScrollData(componentEl, contentEl || footerEl, keyboardHeight);\n          if (!(contentEl && Math.abs(scrollData.scrollAmount) < 4)) {\n            _context2.next = 7;\n            break;\n          }\n          // the text input is in a safe position that doesn't\n          // require it to be scrolled into view, just set focus now\n          inputEl.focus();\n          return _context2.abrupt(\"return\");\n        case 7:\n          // temporarily move the focus to the focus holder so the browser\n          // doesn't freak out while it's trying to get the input in place\n          // at this point the native text input still does not have focus\n          relocateInput(componentEl, inputEl, true, scrollData.inputSafeY, disableClonedInput);\n          inputEl.focus();\n          /**\n           * Relocating/Focusing input causes the\n           * click event to be cancelled, so\n           * manually fire one here.\n           */\n          raf(function () {\n            return componentEl.click();\n          });\n          if (!(typeof window !== 'undefined')) {\n            _context2.next = 23;\n            break;\n          }\n          scrollContent = /*#__PURE__*/function () {\n            var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n              return _regeneratorRuntime().wrap(function _callee$(_context) {\n                while (1) switch (_context.prev = _context.next) {\n                  case 0:\n                    // clean up listeners and timeouts\n                    if (scrollContentTimeout !== undefined) {\n                      clearTimeout(scrollContentTimeout);\n                    }\n                    window.removeEventListener('ionKeyboardDidShow', doubleKeyboardEventListener);\n                    window.removeEventListener('ionKeyboardDidShow', scrollContent);\n                    // scroll the input into place\n                    if (!contentEl) {\n                      _context.next = 6;\n                      break;\n                    }\n                    _context.next = 6;\n                    return scrollByPoint(contentEl, 0, scrollData.scrollAmount, scrollData.scrollDuration);\n                  case 6:\n                    // the scroll view is in the correct position now\n                    // give the native text input focus\n                    relocateInput(componentEl, inputEl, false, scrollData.inputSafeY);\n                    // ensure this is the focused input\n                    inputEl.focus();\n                  case 8:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }, _callee);\n            }));\n            return function scrollContent() {\n              return _ref2.apply(this, arguments);\n            };\n          }();\n          doubleKeyboardEventListener = function doubleKeyboardEventListener() {\n            window.removeEventListener('ionKeyboardDidShow', doubleKeyboardEventListener);\n            window.addEventListener('ionKeyboardDidShow', scrollContent);\n          };\n          if (!contentEl) {\n            _context2.next = 22;\n            break;\n          }\n          _context2.next = 16;\n          return getScrollElement(contentEl);\n        case 16:\n          scrollEl = _context2.sent;\n          /**\n           * scrollData will only consider the amount we need\n           * to scroll in order to properly bring the input\n           * into view. It will not consider the amount\n           * we can scroll in the content element.\n           * As a result, scrollData may request a greater\n           * scroll position than is currently available\n           * in the DOM. If this is the case, we need to\n           * wait for the webview to resize/the keyboard\n           * to show in order for additional scroll\n           * bandwidth to become available.\n           */\n          totalScrollAmount = scrollEl.scrollHeight - scrollEl.clientHeight;\n          if (!(scrollData.scrollAmount > totalScrollAmount - scrollEl.scrollTop)) {\n            _context2.next = 22;\n            break;\n          }\n          /**\n           * On iOS devices, the system will show a \"Passwords\" bar above the keyboard\n           * after the initial keyboard is shown. This prevents the webview from resizing\n           * until the \"Passwords\" bar is shown, so we need to wait for that to happen first.\n           */\n          if (inputEl.type === 'password') {\n            // Add 50px to account for the \"Passwords\" bar\n            scrollData.scrollAmount += 50;\n            window.addEventListener('ionKeyboardDidShow', doubleKeyboardEventListener);\n          } else {\n            window.addEventListener('ionKeyboardDidShow', scrollContent);\n          }\n          /**\n           * This should only fire in 2 instances:\n           * 1. The app is very slow.\n           * 2. The app is running in a browser on an old OS\n           * that does not support Ionic Keyboard Events\n           */\n          scrollContentTimeout = setTimeout(scrollContent, 1000);\n          return _context2.abrupt(\"return\");\n        case 22:\n          scrollContent();\n        case 23:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n  return function jsSetFocus(_x, _x2, _x3, _x4, _x5) {\n    return _ref.apply(this, arguments);\n  };\n}();\nvar hasPointerMoved = function hasPointerMoved(threshold, startCoord, endCoord) {\n  if (startCoord && endCoord) {\n    var deltaX = startCoord.x - endCoord.x;\n    var deltaY = startCoord.y - endCoord.y;\n    var distance = deltaX * deltaX + deltaY * deltaY;\n    return distance > threshold * threshold;\n  }\n  return false;\n};\nvar PADDING_TIMER_KEY = '$ionPaddingTimer';\nvar enableScrollPadding = function enableScrollPadding(keyboardHeight) {\n  var doc = document;\n  // TODO(FW-2832): types\n  var onFocusin = function onFocusin(ev) {\n    setScrollPadding(ev.target, keyboardHeight);\n  };\n  var onFocusout = function onFocusout(ev) {\n    setScrollPadding(ev.target, 0);\n  };\n  doc.addEventListener('focusin', onFocusin);\n  doc.addEventListener('focusout', onFocusout);\n  return function () {\n    doc.removeEventListener('focusin', onFocusin);\n    doc.removeEventListener('focusout', onFocusout);\n  };\n};\nvar setScrollPadding = function setScrollPadding(input, keyboardHeight) {\n  var _a, _b;\n  if (input.tagName !== 'INPUT') {\n    return;\n  }\n  if (input.parentElement && input.parentElement.tagName === 'ION-INPUT') {\n    return;\n  }\n  if (((_b = (_a = input.parentElement) === null || _a === void 0 ? void 0 : _a.parentElement) === null || _b === void 0 ? void 0 : _b.tagName) === 'ION-SEARCHBAR') {\n    return;\n  }\n  var el = findClosestIonContent(input);\n  if (el === null) {\n    return;\n  }\n  var timer = el[PADDING_TIMER_KEY];\n  if (timer) {\n    clearTimeout(timer);\n  }\n  if (keyboardHeight > 0) {\n    el.style.setProperty('--keyboard-offset', \"\".concat(keyboardHeight, \"px\"));\n  } else {\n    el[PADDING_TIMER_KEY] = setTimeout(function () {\n      el.style.setProperty('--keyboard-offset', '0px');\n    }, 120);\n  }\n};\nvar INPUT_BLURRING = true;\nvar SCROLL_PADDING = true;\nvar startInputShims = function startInputShims(config, platform) {\n  var doc = document;\n  var isIOS = platform === 'ios';\n  var isAndroid = platform === 'android';\n  /**\n   * Hide Caret and Input Blurring are needed on iOS.\n   * Scroll Assist and Scroll Padding are needed on iOS and Android\n   * with Chrome web browser (not Chrome webview).\n   */\n  var keyboardHeight = config.getNumber('keyboardHeight', 290);\n  var scrollAssist = config.getBoolean('scrollAssist', true);\n  var hideCaret = config.getBoolean('hideCaretOnScroll', isIOS);\n  var inputBlurring = config.getBoolean('inputBlurring', isIOS);\n  var scrollPadding = config.getBoolean('scrollPadding', true);\n  var inputs = Array.from(doc.querySelectorAll('ion-input, ion-textarea'));\n  var hideCaretMap = new WeakMap();\n  var scrollAssistMap = new WeakMap();\n  var registerInput = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(componentEl) {\n      var inputRoot, inputEl, scrollEl, footerEl, rmFn, isDateInput, _rmFn;\n      return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n        while (1) switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return new Promise(function (resolve) {\n              return componentOnReady(componentEl, resolve);\n            });\n          case 2:\n            inputRoot = componentEl.shadowRoot || componentEl;\n            inputEl = inputRoot.querySelector('input') || inputRoot.querySelector('textarea');\n            scrollEl = findClosestIonContent(componentEl);\n            footerEl = !scrollEl ? componentEl.closest('ion-footer') : null;\n            if (inputEl) {\n              _context3.next = 8;\n              break;\n            }\n            return _context3.abrupt(\"return\");\n          case 8:\n            if (!!scrollEl && hideCaret && !hideCaretMap.has(componentEl)) {\n              rmFn = enableHideCaretOnScroll(componentEl, inputEl, scrollEl);\n              hideCaretMap.set(componentEl, rmFn);\n            }\n            /**\n             * date/datetime-locale inputs on mobile devices show date picker\n             * overlays instead of keyboards. As a result, scroll assist is\n             * not needed. This also works around a bug in iOS <16 where\n             * scroll assist causes the browser to lock up. See FW-1997.\n             */\n            isDateInput = inputEl.type === 'date' || inputEl.type === 'datetime-local';\n            if (!isDateInput && (!!scrollEl || !!footerEl) && scrollAssist && !scrollAssistMap.has(componentEl)) {\n              _rmFn = enableScrollAssist(componentEl, inputEl, scrollEl, footerEl, keyboardHeight, isAndroid);\n              scrollAssistMap.set(componentEl, _rmFn);\n            }\n          case 11:\n          case \"end\":\n            return _context3.stop();\n        }\n      }, _callee3);\n    }));\n    return function registerInput(_x6) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  var unregisterInput = function unregisterInput(componentEl) {\n    if (hideCaret) {\n      var fn = hideCaretMap.get(componentEl);\n      if (fn) {\n        fn();\n      }\n      hideCaretMap.delete(componentEl);\n    }\n    if (scrollAssist) {\n      var _fn = scrollAssistMap.get(componentEl);\n      if (_fn) {\n        _fn();\n      }\n      scrollAssistMap.delete(componentEl);\n    }\n  };\n  if (inputBlurring && INPUT_BLURRING) {\n    enableInputBlurring();\n  }\n  if (scrollPadding && SCROLL_PADDING) {\n    enableScrollPadding(keyboardHeight);\n  }\n  // Input might be already loaded in the DOM before ion-device-hacks did.\n  // At this point we need to look for all of the inputs not registered yet\n  // and register them.\n  for (var _i = 0, _inputs = inputs; _i < _inputs.length; _i++) {\n    var input = _inputs[_i];\n    registerInput(input);\n  }\n  // TODO(FW-2832): types\n  doc.addEventListener('ionInputDidLoad', function (ev) {\n    registerInput(ev.detail);\n  });\n  doc.addEventListener('ionInputDidUnload', function (ev) {\n    unregisterInput(ev.detail);\n  });\n};\nexport { startInputShims };","map":null,"metadata":{},"sourceType":"module"}