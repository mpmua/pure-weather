{"ast":null,"code":"import _defineProperty from \"/Users/mvp/Documents/Projects/pure-weather-capacitor---v2.0.0/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/mvp/Documents/Projects/pure-weather-capacitor---v2.0.0/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/mvp/Documents/Projects/pure-weather-capacitor---v2.0.0/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/mvp/Documents/Projects/pure-weather-capacitor---v2.0.0/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/mvp/Documents/Projects/pure-weather-capacitor---v2.0.0/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/mvp/Documents/Projects/pure-weather-capacitor---v2.0.0/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/mvp/Documents/Projects/pure-weather-capacitor---v2.0.0/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _asyncToGenerator from \"/Users/mvp/Documents/Projects/pure-weather-capacitor---v2.0.0/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == typeof h && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator.return && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(typeof e + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { writeTask, proxyCustomElement, HTMLElement, createEvent, readTask, h, Host } from '@stencil/core/internal/client';\nimport { a as isPlatform, b as getIonMode } from './ionic-global.js';\nimport { g as getTimeGivenProgression } from './cubic-bezier.js';\nimport { I as ION_CONTENT_ELEMENT_SELECTOR, p as printIonContentErrorMsg, b as ION_CONTENT_CLASS_SELECTOR, g as getScrollElement } from './index8.js';\nimport { t as transitionEndAsync, c as componentOnReady, h as clamp, g as getElementRoot, r as raf } from './helpers.js';\nimport { h as hapticImpact } from './haptic.js';\nimport { c as createAnimation } from './animation.js';\nvar getRefresherAnimationType = function getRefresherAnimationType(contentEl) {\n  var previousSibling = contentEl.previousElementSibling;\n  var hasHeader = previousSibling !== null && previousSibling.tagName === 'ION-HEADER';\n  return hasHeader ? 'translate' : 'scale';\n};\nvar createPullingAnimation = function createPullingAnimation(type, pullingSpinner, refresherEl) {\n  return type === 'scale' ? createScaleAnimation(pullingSpinner, refresherEl) : createTranslateAnimation(pullingSpinner, refresherEl);\n};\nvar createBaseAnimation = function createBaseAnimation(pullingRefresherIcon) {\n  // TODO(FW-2832): add types/re-evaluate asserting so many things\n  var spinner = pullingRefresherIcon.querySelector('ion-spinner');\n  var circle = spinner.shadowRoot.querySelector('circle');\n  var spinnerArrowContainer = pullingRefresherIcon.querySelector('.spinner-arrow-container');\n  var arrowContainer = pullingRefresherIcon.querySelector('.arrow-container');\n  var arrow = arrowContainer ? arrowContainer.querySelector('ion-icon') : null;\n  var baseAnimation = createAnimation().duration(1000).easing('ease-out');\n  var spinnerArrowContainerAnimation = createAnimation().addElement(spinnerArrowContainer).keyframes([{\n    offset: 0,\n    opacity: '0.3'\n  }, {\n    offset: 0.45,\n    opacity: '0.3'\n  }, {\n    offset: 0.55,\n    opacity: '1'\n  }, {\n    offset: 1,\n    opacity: '1'\n  }]);\n  var circleInnerAnimation = createAnimation().addElement(circle).keyframes([{\n    offset: 0,\n    strokeDasharray: '1px, 200px'\n  }, {\n    offset: 0.2,\n    strokeDasharray: '1px, 200px'\n  }, {\n    offset: 0.55,\n    strokeDasharray: '100px, 200px'\n  }, {\n    offset: 1,\n    strokeDasharray: '100px, 200px'\n  }]);\n  var circleOuterAnimation = createAnimation().addElement(spinner).keyframes([{\n    offset: 0,\n    transform: 'rotate(-90deg)'\n  }, {\n    offset: 1,\n    transform: 'rotate(210deg)'\n  }]);\n  /**\n   * Only add arrow animation if present\n   * this allows users to customize the spinners\n   * without errors being thrown\n   */\n  if (arrowContainer && arrow) {\n    var arrowContainerAnimation = createAnimation().addElement(arrowContainer).keyframes([{\n      offset: 0,\n      transform: 'rotate(0deg)'\n    }, {\n      offset: 0.3,\n      transform: 'rotate(0deg)'\n    }, {\n      offset: 0.55,\n      transform: 'rotate(280deg)'\n    }, {\n      offset: 1,\n      transform: 'rotate(400deg)'\n    }]);\n    var arrowAnimation = createAnimation().addElement(arrow).keyframes([{\n      offset: 0,\n      transform: 'translateX(2px) scale(0)'\n    }, {\n      offset: 0.3,\n      transform: 'translateX(2px) scale(0)'\n    }, {\n      offset: 0.55,\n      transform: 'translateX(-1.5px) scale(1)'\n    }, {\n      offset: 1,\n      transform: 'translateX(-1.5px) scale(1)'\n    }]);\n    baseAnimation.addAnimation([arrowContainerAnimation, arrowAnimation]);\n  }\n  return baseAnimation.addAnimation([spinnerArrowContainerAnimation, circleInnerAnimation, circleOuterAnimation]);\n};\nvar createScaleAnimation = function createScaleAnimation(pullingRefresherIcon, refresherEl) {\n  /**\n   * Do not take the height of the refresher icon\n   * because at this point the DOM has not updated,\n   * so the refresher icon is still hidden with\n   * display: none.\n   * The `ion-refresher` container height\n   * is roughly the amount we need to offset\n   * the icon by when pulling down.\n   */\n  var height = refresherEl.clientHeight;\n  var spinnerAnimation = createAnimation().addElement(pullingRefresherIcon).keyframes([{\n    offset: 0,\n    transform: \"scale(0) translateY(-\".concat(height, \"px)\")\n  }, {\n    offset: 1,\n    transform: 'scale(1) translateY(100px)'\n  }]);\n  return createBaseAnimation(pullingRefresherIcon).addAnimation([spinnerAnimation]);\n};\nvar createTranslateAnimation = function createTranslateAnimation(pullingRefresherIcon, refresherEl) {\n  /**\n   * Do not take the height of the refresher icon\n   * because at this point the DOM has not updated,\n   * so the refresher icon is still hidden with\n   * display: none.\n   * The `ion-refresher` container height\n   * is roughly the amount we need to offset\n   * the icon by when pulling down.\n   */\n  var height = refresherEl.clientHeight;\n  var spinnerAnimation = createAnimation().addElement(pullingRefresherIcon).keyframes([{\n    offset: 0,\n    transform: \"translateY(-\".concat(height, \"px)\")\n  }, {\n    offset: 1,\n    transform: 'translateY(100px)'\n  }]);\n  return createBaseAnimation(pullingRefresherIcon).addAnimation([spinnerAnimation]);\n};\nvar createSnapBackAnimation = function createSnapBackAnimation(pullingRefresherIcon) {\n  return createAnimation().duration(125).addElement(pullingRefresherIcon).fromTo('transform', 'translateY(var(--ion-pulling-refresher-translate, 100px))', 'translateY(0px)');\n};\n// iOS Native Refresher\n// -----------------------------\nvar setSpinnerOpacity = function setSpinnerOpacity(spinner, opacity) {\n  spinner.style.setProperty('opacity', opacity.toString());\n};\nvar handleScrollWhilePulling = function handleScrollWhilePulling(ticks, numTicks, pullAmount) {\n  var max = 1;\n  writeTask(function () {\n    ticks.forEach(function (el, i) {\n      /**\n       * Compute the opacity of each tick\n       * mark as a percentage of the pullAmount\n       * offset by max / numTicks so\n       * the tick marks are shown staggered.\n       */\n      var min = i * (max / numTicks);\n      var range = max - min;\n      var start = pullAmount - min;\n      var progression = clamp(0, start / range, 1);\n      el.style.setProperty('opacity', progression.toString());\n    });\n  });\n};\nvar handleScrollWhileRefreshing = function handleScrollWhileRefreshing(spinner, lastVelocityY) {\n  writeTask(function () {\n    // If user pulls down quickly, the spinner should spin faster\n    spinner.style.setProperty('--refreshing-rotation-duration', lastVelocityY >= 1.0 ? '0.5s' : '2s');\n    spinner.style.setProperty('opacity', '1');\n  });\n};\nvar translateElement = function translateElement(el, value) {\n  var duration = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 200;\n  if (!el) {\n    return Promise.resolve();\n  }\n  var trans = transitionEndAsync(el, duration);\n  writeTask(function () {\n    el.style.setProperty('transition', \"\".concat(duration, \"ms all ease-out\"));\n    if (value === undefined) {\n      el.style.removeProperty('transform');\n    } else {\n      el.style.setProperty('transform', \"translate3d(0px, \".concat(value, \", 0px)\"));\n    }\n  });\n  return trans;\n};\n// Utils\n// -----------------------------\nvar shouldUseNativeRefresher = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(referenceEl, mode) {\n    var refresherContent, pullingSpinner, refreshingSpinner;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          refresherContent = referenceEl.querySelector('ion-refresher-content');\n          if (refresherContent) {\n            _context.next = 3;\n            break;\n          }\n          return _context.abrupt(\"return\", Promise.resolve(false));\n        case 3:\n          _context.next = 5;\n          return new Promise(function (resolve) {\n            return componentOnReady(refresherContent, resolve);\n          });\n        case 5:\n          pullingSpinner = referenceEl.querySelector('ion-refresher-content .refresher-pulling ion-spinner');\n          refreshingSpinner = referenceEl.querySelector('ion-refresher-content .refresher-refreshing ion-spinner');\n          return _context.abrupt(\"return\", pullingSpinner !== null && refreshingSpinner !== null && (mode === 'ios' && isPlatform('mobile') && referenceEl.style.webkitOverflowScrolling !== undefined || mode === 'md'));\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return function shouldUseNativeRefresher(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\nvar refresherIosCss = \"ion-refresher{left:0;top:0;display:none;position:absolute;width:100%;height:60px;pointer-events:none;z-index:-1}[dir=rtl] ion-refresher,:host-context([dir=rtl]) ion-refresher{left:unset;right:unset;right:0}ion-refresher.refresher-active{display:block}ion-refresher-content{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;height:100%}.refresher-pulling,.refresher-refreshing{display:none;width:100%}.refresher-pulling-icon,.refresher-refreshing-icon{-webkit-transform-origin:center;transform-origin:center;-webkit-transition:200ms;transition:200ms;font-size:30px;text-align:center}[dir=rtl] .refresher-pulling-icon,:host-context([dir=rtl]) .refresher-pulling-icon,[dir=rtl] .refresher-refreshing-icon,:host-context([dir=rtl]) .refresher-refreshing-icon{-webkit-transform-origin:calc(100% - center);transform-origin:calc(100% - center)}.refresher-pulling-text,.refresher-refreshing-text{font-size:16px;text-align:center}ion-refresher-content .arrow-container{display:none}.refresher-pulling ion-refresher-content .refresher-pulling{display:block}.refresher-ready ion-refresher-content .refresher-pulling{display:block}.refresher-ready ion-refresher-content .refresher-pulling-icon{-webkit-transform:rotate(180deg);transform:rotate(180deg)}.refresher-refreshing ion-refresher-content .refresher-refreshing{display:block}.refresher-cancelling ion-refresher-content .refresher-pulling{display:block}.refresher-cancelling ion-refresher-content .refresher-pulling-icon{-webkit-transform:scale(0);transform:scale(0)}.refresher-completing ion-refresher-content .refresher-refreshing{display:block}.refresher-completing ion-refresher-content .refresher-refreshing-icon{-webkit-transform:scale(0);transform:scale(0)}.refresher-native .refresher-pulling-text,.refresher-native .refresher-refreshing-text{display:none}.refresher-ios .refresher-pulling-icon,.refresher-ios .refresher-refreshing-icon{color:var(--ion-text-color, #000)}.refresher-ios .refresher-pulling-text,.refresher-ios .refresher-refreshing-text{color:var(--ion-text-color, #000)}.refresher-ios .refresher-refreshing .spinner-lines-ios line,.refresher-ios .refresher-refreshing .spinner-lines-small-ios line,.refresher-ios .refresher-refreshing .spinner-crescent circle{stroke:var(--ion-text-color, #000)}.refresher-ios .refresher-refreshing .spinner-bubbles circle,.refresher-ios .refresher-refreshing .spinner-circles circle,.refresher-ios .refresher-refreshing .spinner-dots circle{fill:var(--ion-text-color, #000)}ion-refresher.refresher-native{display:block;z-index:1}ion-refresher.refresher-native ion-spinner{margin-left:auto;margin-right:auto;margin-top:0;margin-bottom:0}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){ion-refresher.refresher-native ion-spinner{margin-left:unset;margin-right:unset;-webkit-margin-start:auto;margin-inline-start:auto;-webkit-margin-end:auto;margin-inline-end:auto}}.refresher-native .refresher-refreshing ion-spinner{--refreshing-rotation-duration:2s;display:none;-webkit-animation:var(--refreshing-rotation-duration) ease-out refresher-rotate forwards;animation:var(--refreshing-rotation-duration) ease-out refresher-rotate forwards}.refresher-native .refresher-refreshing{display:none;-webkit-animation:250ms linear refresher-pop forwards;animation:250ms linear refresher-pop forwards}.refresher-native ion-spinner{width:32px;height:32px;color:var(--ion-color-step-450, #747577)}.refresher-native.refresher-refreshing .refresher-pulling ion-spinner,.refresher-native.refresher-completing .refresher-pulling ion-spinner{display:none}.refresher-native.refresher-refreshing .refresher-refreshing ion-spinner,.refresher-native.refresher-completing .refresher-refreshing ion-spinner{display:block}.refresher-native.refresher-pulling .refresher-pulling ion-spinner{display:block}.refresher-native.refresher-pulling .refresher-refreshing ion-spinner{display:none}.refresher-native.refresher-completing ion-refresher-content .refresher-refreshing-icon{-webkit-transform:scale(0) rotate(180deg);transform:scale(0) rotate(180deg);-webkit-transition:300ms;transition:300ms}@-webkit-keyframes refresher-pop{0%{-webkit-transform:scale(1);transform:scale(1);-webkit-animation-timing-function:ease-in;animation-timing-function:ease-in}50%{-webkit-transform:scale(1.2);transform:scale(1.2);-webkit-animation-timing-function:ease-out;animation-timing-function:ease-out}100%{-webkit-transform:scale(1);transform:scale(1)}}@keyframes refresher-pop{0%{-webkit-transform:scale(1);transform:scale(1);-webkit-animation-timing-function:ease-in;animation-timing-function:ease-in}50%{-webkit-transform:scale(1.2);transform:scale(1.2);-webkit-animation-timing-function:ease-out;animation-timing-function:ease-out}100%{-webkit-transform:scale(1);transform:scale(1)}}@-webkit-keyframes refresher-rotate{from{-webkit-transform:rotate(0deg);transform:rotate(0deg)}to{-webkit-transform:rotate(180deg);transform:rotate(180deg)}}@keyframes refresher-rotate{from{-webkit-transform:rotate(0deg);transform:rotate(0deg)}to{-webkit-transform:rotate(180deg);transform:rotate(180deg)}}\";\nvar refresherMdCss = \"ion-refresher{left:0;top:0;display:none;position:absolute;width:100%;height:60px;pointer-events:none;z-index:-1}[dir=rtl] ion-refresher,:host-context([dir=rtl]) ion-refresher{left:unset;right:unset;right:0}ion-refresher.refresher-active{display:block}ion-refresher-content{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;height:100%}.refresher-pulling,.refresher-refreshing{display:none;width:100%}.refresher-pulling-icon,.refresher-refreshing-icon{-webkit-transform-origin:center;transform-origin:center;-webkit-transition:200ms;transition:200ms;font-size:30px;text-align:center}[dir=rtl] .refresher-pulling-icon,:host-context([dir=rtl]) .refresher-pulling-icon,[dir=rtl] .refresher-refreshing-icon,:host-context([dir=rtl]) .refresher-refreshing-icon{-webkit-transform-origin:calc(100% - center);transform-origin:calc(100% - center)}.refresher-pulling-text,.refresher-refreshing-text{font-size:16px;text-align:center}ion-refresher-content .arrow-container{display:none}.refresher-pulling ion-refresher-content .refresher-pulling{display:block}.refresher-ready ion-refresher-content .refresher-pulling{display:block}.refresher-ready ion-refresher-content .refresher-pulling-icon{-webkit-transform:rotate(180deg);transform:rotate(180deg)}.refresher-refreshing ion-refresher-content .refresher-refreshing{display:block}.refresher-cancelling ion-refresher-content .refresher-pulling{display:block}.refresher-cancelling ion-refresher-content .refresher-pulling-icon{-webkit-transform:scale(0);transform:scale(0)}.refresher-completing ion-refresher-content .refresher-refreshing{display:block}.refresher-completing ion-refresher-content .refresher-refreshing-icon{-webkit-transform:scale(0);transform:scale(0)}.refresher-native .refresher-pulling-text,.refresher-native .refresher-refreshing-text{display:none}.refresher-md .refresher-pulling-icon,.refresher-md .refresher-refreshing-icon{color:var(--ion-text-color, #000)}.refresher-md .refresher-pulling-text,.refresher-md .refresher-refreshing-text{color:var(--ion-text-color, #000)}.refresher-md .refresher-refreshing .spinner-lines-md line,.refresher-md .refresher-refreshing .spinner-lines-small-md line,.refresher-md .refresher-refreshing .spinner-crescent circle{stroke:var(--ion-text-color, #000)}.refresher-md .refresher-refreshing .spinner-bubbles circle,.refresher-md .refresher-refreshing .spinner-circles circle,.refresher-md .refresher-refreshing .spinner-dots circle{fill:var(--ion-text-color, #000)}ion-refresher.refresher-native{display:block;z-index:1}ion-refresher.refresher-native ion-spinner{margin-left:auto;margin-right:auto;margin-top:0;margin-bottom:0;width:24px;height:24px;color:var(--ion-color-primary, #3880ff)}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){ion-refresher.refresher-native ion-spinner{margin-left:unset;margin-right:unset;-webkit-margin-start:auto;margin-inline-start:auto;-webkit-margin-end:auto;margin-inline-end:auto}}ion-refresher.refresher-native .spinner-arrow-container{display:inherit}ion-refresher.refresher-native .arrow-container{display:block;position:absolute;width:24px;height:24px}ion-refresher.refresher-native .arrow-container ion-icon{margin-left:auto;margin-right:auto;margin-top:0;margin-bottom:0;left:0;right:0;bottom:-4px;position:absolute;color:var(--ion-color-primary, #3880ff);font-size:12px}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){ion-refresher.refresher-native .arrow-container ion-icon{margin-left:unset;margin-right:unset;-webkit-margin-start:auto;margin-inline-start:auto;-webkit-margin-end:auto;margin-inline-end:auto}}ion-refresher.refresher-native.refresher-pulling ion-refresher-content .refresher-pulling,ion-refresher.refresher-native.refresher-ready ion-refresher-content .refresher-pulling{display:-ms-flexbox;display:flex}ion-refresher.refresher-native.refresher-refreshing ion-refresher-content .refresher-refreshing,ion-refresher.refresher-native.refresher-completing ion-refresher-content .refresher-refreshing,ion-refresher.refresher-native.refresher-cancelling ion-refresher-content .refresher-refreshing{display:-ms-flexbox;display:flex}ion-refresher.refresher-native .refresher-pulling-icon{-webkit-transform:translateY(calc(-100% - 10px));transform:translateY(calc(-100% - 10px))}ion-refresher.refresher-native .refresher-pulling-icon,ion-refresher.refresher-native .refresher-refreshing-icon{margin-left:auto;margin-right:auto;margin-top:0;margin-bottom:0;border-radius:100%;padding-left:8px;padding-right:8px;padding-top:8px;padding-bottom:8px;display:-ms-flexbox;display:flex;border:1px solid var(--ion-color-step-200, #ececec);background:var(--ion-color-step-250, #ffffff);-webkit-box-shadow:0px 1px 6px rgba(0, 0, 0, 0.1);box-shadow:0px 1px 6px rgba(0, 0, 0, 0.1)}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){ion-refresher.refresher-native .refresher-pulling-icon,ion-refresher.refresher-native .refresher-refreshing-icon{margin-left:unset;margin-right:unset;-webkit-margin-start:auto;margin-inline-start:auto;-webkit-margin-end:auto;margin-inline-end:auto}}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){ion-refresher.refresher-native .refresher-pulling-icon,ion-refresher.refresher-native .refresher-refreshing-icon{padding-left:unset;padding-right:unset;-webkit-padding-start:8px;padding-inline-start:8px;-webkit-padding-end:8px;padding-inline-end:8px}}\";\nvar Refresher = /*@__PURE__*/proxyCustomElement( /*#__PURE__*/function (_HTMLElement) {\n  _inherits(_class, _HTMLElement);\n  function _class() {\n    var _this;\n    _classCallCheck(this, _class);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(_class).call(this));\n    _this.__registerHost();\n    _this.ionRefresh = createEvent(_assertThisInitialized(_assertThisInitialized(_this)), \"ionRefresh\", 7);\n    _this.ionPull = createEvent(_assertThisInitialized(_assertThisInitialized(_this)), \"ionPull\", 7);\n    _this.ionStart = createEvent(_assertThisInitialized(_assertThisInitialized(_this)), \"ionStart\", 7);\n    _this.appliedStyles = false;\n    _this.didStart = false;\n    _this.progress = 0;\n    _this.pointerDown = false;\n    _this.needsCompletion = false;\n    _this.didRefresh = false;\n    _this.lastVelocityY = 0;\n    _this.animations = [];\n    _this.nativeRefresher = false;\n    /**\n     * The current state which the refresher is in. The refresher's states include:\n     *\n     * - `inactive` - The refresher is not being pulled down or refreshing and is currently hidden.\n     * - `pulling` - The user is actively pulling down the refresher, but has not reached the point yet that if the user lets go, it'll refresh.\n     * - `cancelling` - The user pulled down the refresher and let go, but did not pull down far enough to kick off the `refreshing` state. After letting go, the refresher is in the `cancelling` state while it is closing, and will go back to the `inactive` state once closed.\n     * - `ready` - The user has pulled down the refresher far enough that if they let go, it'll begin the `refreshing` state.\n     * - `refreshing` - The refresher is actively waiting on the async operation to end. Once the refresh handler calls `complete()` it will begin the `completing` state.\n     * - `completing` - The `refreshing` state has finished and the refresher is in the way of closing itself. Once closed, the refresher will go back to the `inactive` state.\n     */\n    _this.state = 1 /* RefresherState.Inactive */;\n    /**\n     * The minimum distance the user must pull down until the\n     * refresher will go into the `refreshing` state.\n     * Does not apply when the refresher content uses a spinner,\n     * enabling the native refresher.\n     */\n    _this.pullMin = 60;\n    /**\n     * The maximum distance of the pull until the refresher\n     * will automatically go into the `refreshing` state.\n     * Defaults to the result of `pullMin + 60`.\n     * Does not apply when  the refresher content uses a spinner,\n     * enabling the native refresher.\n     */\n    _this.pullMax = _this.pullMin + 60;\n    /**\n     * Time it takes to close the refresher.\n     * Does not apply when the refresher content uses a spinner,\n     * enabling the native refresher.\n     */\n    _this.closeDuration = '280ms';\n    /**\n     * Time it takes the refresher to snap back to the `refreshing` state.\n     * Does not apply when the refresher content uses a spinner,\n     * enabling the native refresher.\n     */\n    _this.snapbackDuration = '280ms';\n    /**\n     * How much to multiply the pull speed by. To slow the pull animation down,\n     * pass a number less than `1`. To speed up the pull, pass a number greater\n     * than `1`. The default value is `1` which is equal to the speed of the cursor.\n     * If a negative value is passed in, the factor will be `1` instead.\n     *\n     * For example: If the value passed is `1.2` and the content is dragged by\n     * `10` pixels, instead of `10` pixels the content will be pulled by `12` pixels\n     * (an increase of 20 percent). If the value passed is `0.8`, the dragged amount\n     * will be `8` pixels, less than the amount the cursor has moved.\n     *\n     * Does not apply when the refresher content uses a spinner,\n     * enabling the native refresher.\n     */\n    _this.pullFactor = 1;\n    /**\n     * If `true`, the refresher will be hidden.\n     */\n    _this.disabled = false;\n    return _this;\n  }\n  _createClass(_class, [{\n    key: \"disabledChanged\",\n    value: function disabledChanged() {\n      if (this.gesture) {\n        this.gesture.enable(!this.disabled);\n      }\n    }\n  }, {\n    key: \"checkNativeRefresher\",\n    value: function () {\n      var _checkNativeRefresher = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var useNativeRefresher, contentEl;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return shouldUseNativeRefresher(this.el, getIonMode(this));\n            case 2:\n              useNativeRefresher = _context2.sent;\n              if (useNativeRefresher && !this.nativeRefresher) {\n                contentEl = this.el.closest('ion-content');\n                this.setupNativeRefresher(contentEl);\n              } else if (!useNativeRefresher) {\n                this.destroyNativeRefresher();\n              }\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function checkNativeRefresher() {\n        return _checkNativeRefresher.apply(this, arguments);\n      }\n      return checkNativeRefresher;\n    }()\n  }, {\n    key: \"destroyNativeRefresher\",\n    value: function destroyNativeRefresher() {\n      if (this.scrollEl && this.scrollListenerCallback) {\n        this.scrollEl.removeEventListener('scroll', this.scrollListenerCallback);\n        this.scrollListenerCallback = undefined;\n      }\n      this.nativeRefresher = false;\n    }\n  }, {\n    key: \"resetNativeRefresher\",\n    value: function () {\n      var _resetNativeRefresher = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(el, state) {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              this.state = state;\n              if (!(getIonMode(this) === 'ios')) {\n                _context3.next = 6;\n                break;\n              }\n              _context3.next = 4;\n              return translateElement(el, undefined, 300);\n            case 4:\n              _context3.next = 8;\n              break;\n            case 6:\n              _context3.next = 8;\n              return transitionEndAsync(this.el.querySelector('.refresher-refreshing-icon'), 200);\n            case 8:\n              this.didRefresh = false;\n              this.needsCompletion = false;\n              this.pointerDown = false;\n              this.animations.forEach(function (ani) {\n                return ani.destroy();\n              });\n              this.animations = [];\n              this.progress = 0;\n              this.state = 1 /* RefresherState.Inactive */;\n            case 15:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function resetNativeRefresher(_x3, _x4) {\n        return _resetNativeRefresher.apply(this, arguments);\n      }\n      return resetNativeRefresher;\n    }()\n  }, {\n    key: \"setupiOSNativeRefresher\",\n    value: function () {\n      var _setupiOSNativeRefresher = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(pullingSpinner, refreshingSpinner) {\n        var _this2 = this;\n        var ticks, MAX_PULL, NUM_TICKS;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              this.elementToTransform = this.scrollEl;\n              ticks = pullingSpinner.shadowRoot.querySelectorAll('svg');\n              MAX_PULL = this.scrollEl.clientHeight * 0.16;\n              NUM_TICKS = ticks.length;\n              writeTask(function () {\n                return ticks.forEach(function (el) {\n                  return el.style.setProperty('animation', 'none');\n                });\n              });\n              this.scrollListenerCallback = function () {\n                // If pointer is not on screen or refresher is not active, ignore scroll\n                if (!_this2.pointerDown && _this2.state === 1 /* RefresherState.Inactive */) {\n                  return;\n                }\n                readTask(function () {\n                  // PTR should only be active when overflow scrolling at the top\n                  var scrollTop = _this2.scrollEl.scrollTop;\n                  var refresherHeight = _this2.el.clientHeight;\n                  if (scrollTop > 0) {\n                    /**\n                     * If refresher is refreshing and user tries to scroll\n                     * progressively fade refresher out/in\n                     */\n                    if (_this2.state === 8 /* RefresherState.Refreshing */) {\n                      var ratio = clamp(0, scrollTop / (refresherHeight * 0.5), 1);\n                      writeTask(function () {\n                        return setSpinnerOpacity(refreshingSpinner, 1 - ratio);\n                      });\n                      return;\n                    }\n                    return;\n                  }\n                  if (_this2.pointerDown) {\n                    if (!_this2.didStart) {\n                      _this2.didStart = true;\n                      _this2.ionStart.emit();\n                    }\n                    // emit \"pulling\" on every move\n                    if (_this2.pointerDown) {\n                      _this2.ionPull.emit();\n                    }\n                  }\n                  /**\n                   * We want to delay the start of this gesture by ~30px\n                   * when initially pulling down so the refresher does not\n                   * overlap with the content. But when letting go of the\n                   * gesture before the refresher completes, we want the\n                   * refresher tick marks to quickly fade out.\n                   */\n                  var offset = _this2.didStart ? 30 : 0;\n                  var pullAmount = _this2.progress = clamp(0, (Math.abs(scrollTop) - offset) / MAX_PULL, 1);\n                  var shouldShowRefreshingSpinner = _this2.state === 8 /* RefresherState.Refreshing */ || pullAmount === 1;\n                  if (shouldShowRefreshingSpinner) {\n                    if (_this2.pointerDown) {\n                      handleScrollWhileRefreshing(refreshingSpinner, _this2.lastVelocityY);\n                    }\n                    if (!_this2.didRefresh) {\n                      _this2.beginRefresh();\n                      _this2.didRefresh = true;\n                      hapticImpact({\n                        style: 'light'\n                      });\n                      /**\n                       * Translate the content element otherwise when pointer is removed\n                       * from screen the scroll content will bounce back over the refresher\n                       */\n                      if (!_this2.pointerDown) {\n                        translateElement(_this2.elementToTransform, \"\".concat(refresherHeight, \"px\"));\n                      }\n                    }\n                  } else {\n                    _this2.state = 2 /* RefresherState.Pulling */;\n                    handleScrollWhilePulling(ticks, NUM_TICKS, pullAmount);\n                  }\n                });\n              };\n              this.scrollEl.addEventListener('scroll', this.scrollListenerCallback);\n              _context4.next = 9;\n              return import('./index2.js');\n            case 9:\n              this.gesture = _context4.sent.createGesture({\n                el: this.scrollEl,\n                gestureName: 'refresher',\n                gesturePriority: 31,\n                direction: 'y',\n                threshold: 5,\n                onStart: function onStart() {\n                  _this2.pointerDown = true;\n                  if (!_this2.didRefresh) {\n                    translateElement(_this2.elementToTransform, '0px');\n                  }\n                  /**\n                   * If the content had `display: none` when\n                   * the refresher was initialized, its clientHeight\n                   * will be 0. When the gesture starts, the content\n                   * will be visible, so try to get the correct\n                   * client height again. This is most common when\n                   * using the refresher in an ion-menu.\n                   */\n                  if (MAX_PULL === 0) {\n                    MAX_PULL = _this2.scrollEl.clientHeight * 0.16;\n                  }\n                },\n                onMove: function onMove(ev) {\n                  _this2.lastVelocityY = ev.velocityY;\n                },\n                onEnd: function onEnd() {\n                  _this2.pointerDown = false;\n                  _this2.didStart = false;\n                  if (_this2.needsCompletion) {\n                    _this2.resetNativeRefresher(_this2.elementToTransform, 32 /* RefresherState.Completing */);\n                    _this2.needsCompletion = false;\n                  } else if (_this2.didRefresh) {\n                    readTask(function () {\n                      return translateElement(_this2.elementToTransform, \"\".concat(_this2.el.clientHeight, \"px\"));\n                    });\n                  }\n                }\n              });\n              this.disabledChanged();\n            case 11:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }));\n      function setupiOSNativeRefresher(_x5, _x6) {\n        return _setupiOSNativeRefresher.apply(this, arguments);\n      }\n      return setupiOSNativeRefresher;\n    }()\n  }, {\n    key: \"setupMDNativeRefresher\",\n    value: function () {\n      var _setupMDNativeRefresher = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(contentEl, pullingSpinner, refreshingSpinner) {\n        var _this3 = this;\n        var circle, pullingRefresherIcon, refreshingCircle;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              circle = getElementRoot(pullingSpinner).querySelector('circle');\n              pullingRefresherIcon = this.el.querySelector('ion-refresher-content .refresher-pulling-icon');\n              refreshingCircle = getElementRoot(refreshingSpinner).querySelector('circle');\n              if (circle !== null && refreshingCircle !== null) {\n                writeTask(function () {\n                  circle.style.setProperty('animation', 'none');\n                  // This lines up the animation on the refreshing spinner with the pulling spinner\n                  refreshingSpinner.style.setProperty('animation-delay', '-655ms');\n                  refreshingCircle.style.setProperty('animation-delay', '-655ms');\n                });\n              }\n              _context6.next = 6;\n              return import('./index2.js');\n            case 6:\n              this.gesture = _context6.sent.createGesture({\n                el: this.scrollEl,\n                gestureName: 'refresher',\n                gesturePriority: 31,\n                direction: 'y',\n                threshold: 5,\n                canStart: function canStart() {\n                  return _this3.state !== 8 /* RefresherState.Refreshing */ && _this3.state !== 32 /* RefresherState.Completing */ && _this3.scrollEl.scrollTop === 0;\n                },\n                onStart: function onStart(ev) {\n                  _this3.progress = 0;\n                  ev.data = {\n                    animation: undefined,\n                    didStart: false,\n                    cancelled: false\n                  };\n                },\n                onMove: function onMove(ev) {\n                  if (ev.velocityY < 0 && _this3.progress === 0 && !ev.data.didStart || ev.data.cancelled) {\n                    ev.data.cancelled = true;\n                    return;\n                  }\n                  if (!ev.data.didStart) {\n                    ev.data.didStart = true;\n                    _this3.state = 2 /* RefresherState.Pulling */;\n                    writeTask(function () {\n                      return _this3.scrollEl.style.setProperty('--overflow', 'hidden');\n                    });\n                    var animationType = getRefresherAnimationType(contentEl);\n                    var animation = createPullingAnimation(animationType, pullingRefresherIcon, _this3.el);\n                    ev.data.animation = animation;\n                    animation.progressStart(false, 0);\n                    _this3.ionStart.emit();\n                    _this3.animations.push(animation);\n                    return;\n                  }\n                  // Since we are using an easing curve, slow the gesture tracking down a bit\n                  _this3.progress = clamp(0, ev.deltaY / 180 * 0.5, 1);\n                  ev.data.animation.progressStep(_this3.progress);\n                  _this3.ionPull.emit();\n                },\n                onEnd: function onEnd(ev) {\n                  if (!ev.data.didStart) {\n                    return;\n                  }\n                  _this3.gesture.enable(false);\n                  writeTask(function () {\n                    return _this3.scrollEl.style.removeProperty('--overflow');\n                  });\n                  if (_this3.progress <= 0.4) {\n                    ev.data.animation.progressEnd(0, _this3.progress, 500).onFinish(function () {\n                      _this3.animations.forEach(function (ani) {\n                        return ani.destroy();\n                      });\n                      _this3.animations = [];\n                      _this3.gesture.enable(true);\n                      _this3.state = 1 /* RefresherState.Inactive */;\n                    });\n\n                    return;\n                  }\n                  var progress = getTimeGivenProgression([0, 0], [0, 0], [1, 1], [1, 1], _this3.progress)[0];\n                  var snapBackAnimation = createSnapBackAnimation(pullingRefresherIcon);\n                  _this3.animations.push(snapBackAnimation);\n                  writeTask( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n                    return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n                      while (1) switch (_context5.prev = _context5.next) {\n                        case 0:\n                          pullingRefresherIcon.style.setProperty('--ion-pulling-refresher-translate', \"\".concat(progress * 100, \"px\"));\n                          ev.data.animation.progressEnd();\n                          _context5.next = 4;\n                          return snapBackAnimation.play();\n                        case 4:\n                          _this3.beginRefresh();\n                          ev.data.animation.destroy();\n                          _this3.gesture.enable(true);\n                        case 7:\n                        case \"end\":\n                          return _context5.stop();\n                      }\n                    }, _callee5);\n                  })));\n                }\n              });\n              this.disabledChanged();\n            case 8:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6, this);\n      }));\n      function setupMDNativeRefresher(_x7, _x8, _x9) {\n        return _setupMDNativeRefresher.apply(this, arguments);\n      }\n      return setupMDNativeRefresher;\n    }()\n  }, {\n    key: \"setupNativeRefresher\",\n    value: function () {\n      var _setupNativeRefresher = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(contentEl) {\n        var pullingSpinner, refreshingSpinner;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              if (!(this.scrollListenerCallback || !contentEl || this.nativeRefresher || !this.scrollEl)) {\n                _context7.next = 2;\n                break;\n              }\n              return _context7.abrupt(\"return\");\n            case 2:\n              /**\n               * If using non-native refresher before make sure\n               * we clean up any old CSS. This can happen when\n               * a user manually calls the refresh method in a\n               * component create callback before the native\n               * refresher is setup.\n               */\n              this.setCss(0, '', false, '');\n              this.nativeRefresher = true;\n              pullingSpinner = this.el.querySelector('ion-refresher-content .refresher-pulling ion-spinner');\n              refreshingSpinner = this.el.querySelector('ion-refresher-content .refresher-refreshing ion-spinner');\n              if (getIonMode(this) === 'ios') {\n                this.setupiOSNativeRefresher(pullingSpinner, refreshingSpinner);\n              } else {\n                this.setupMDNativeRefresher(contentEl, pullingSpinner, refreshingSpinner);\n              }\n            case 7:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee7, this);\n      }));\n      function setupNativeRefresher(_x10) {\n        return _setupNativeRefresher.apply(this, arguments);\n      }\n      return setupNativeRefresher;\n    }()\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.checkNativeRefresher();\n    }\n  }, {\n    key: \"connectedCallback\",\n    value: function () {\n      var _connectedCallback = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {\n        var _this4 = this;\n        var contentEl;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) switch (_context9.prev = _context9.next) {\n            case 0:\n              if (!(this.el.getAttribute('slot') !== 'fixed')) {\n                _context9.next = 3;\n                break;\n              }\n              console.error('Make sure you use: <ion-refresher slot=\"fixed\">');\n              return _context9.abrupt(\"return\");\n            case 3:\n              contentEl = this.el.closest(ION_CONTENT_ELEMENT_SELECTOR);\n              if (contentEl) {\n                _context9.next = 7;\n                break;\n              }\n              printIonContentErrorMsg(this.el);\n              return _context9.abrupt(\"return\");\n            case 7:\n              /**\n               * Waits for the content to be ready before querying the scroll\n               * or the background content element.\n               */\n              componentOnReady(contentEl, /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n                var customScrollTarget;\n                return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n                  while (1) switch (_context8.prev = _context8.next) {\n                    case 0:\n                      customScrollTarget = contentEl.querySelector(ION_CONTENT_CLASS_SELECTOR);\n                      /**\n                       * Query the custom scroll target (if available), first. In refresher implementations,\n                       * the ion-refresher element will always be a direct child of ion-content (slot=\"fixed\"). By\n                       * querying the custom scroll target first and falling back to the ion-content element,\n                       * the correct scroll element will be returned by the implementation.\n                       */\n                      _context8.next = 3;\n                      return getScrollElement(customScrollTarget !== null && customScrollTarget !== void 0 ? customScrollTarget : contentEl);\n                    case 3:\n                      _this4.scrollEl = _context8.sent;\n                      _context8.next = 6;\n                      return contentEl.getBackgroundElement();\n                    case 6:\n                      _this4.backgroundContentEl = _context8.sent;\n                      _context8.next = 9;\n                      return shouldUseNativeRefresher(_this4.el, getIonMode(_this4));\n                    case 9:\n                      if (!_context8.sent) {\n                        _context8.next = 13;\n                        break;\n                      }\n                      _this4.setupNativeRefresher(contentEl);\n                      _context8.next = 17;\n                      break;\n                    case 13:\n                      _context8.next = 15;\n                      return import('./index2.js');\n                    case 15:\n                      _this4.gesture = _context8.sent.createGesture({\n                        el: contentEl,\n                        gestureName: 'refresher',\n                        gesturePriority: 31,\n                        direction: 'y',\n                        threshold: 20,\n                        passive: false,\n                        canStart: function canStart() {\n                          return _this4.canStart();\n                        },\n                        onStart: function onStart() {\n                          return _this4.onStart();\n                        },\n                        onMove: function onMove(ev) {\n                          return _this4.onMove(ev);\n                        },\n                        onEnd: function onEnd() {\n                          return _this4.onEnd();\n                        }\n                      });\n                      _this4.disabledChanged();\n                    case 17:\n                    case \"end\":\n                      return _context8.stop();\n                  }\n                }, _callee8);\n              })));\n            case 8:\n            case \"end\":\n              return _context9.stop();\n          }\n        }, _callee9, this);\n      }));\n      function connectedCallback() {\n        return _connectedCallback.apply(this, arguments);\n      }\n      return connectedCallback;\n    }()\n  }, {\n    key: \"disconnectedCallback\",\n    value: function disconnectedCallback() {\n      this.destroyNativeRefresher();\n      this.scrollEl = undefined;\n      if (this.gesture) {\n        this.gesture.destroy();\n        this.gesture = undefined;\n      }\n    }\n    /**\n     * Call `complete()` when your async operation has completed.\n     * For example, the `refreshing` state is while the app is performing\n     * an asynchronous operation, such as receiving more data from an\n     * AJAX request. Once the data has been received, you then call this\n     * method to signify that the refreshing has completed and to close\n     * the refresher. This method also changes the refresher's state from\n     * `refreshing` to `completing`.\n     */\n  }, {\n    key: \"complete\",\n    value: function () {\n      var _complete = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {\n        var _this5 = this;\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) switch (_context10.prev = _context10.next) {\n            case 0:\n              if (this.nativeRefresher) {\n                this.needsCompletion = true;\n                // Do not reset scroll el until user removes pointer from screen\n                if (!this.pointerDown) {\n                  raf(function () {\n                    return raf(function () {\n                      return _this5.resetNativeRefresher(_this5.elementToTransform, 32 /* RefresherState.Completing */);\n                    });\n                  });\n                }\n              } else {\n                this.close(32 /* RefresherState.Completing */, '120ms');\n              }\n            case 1:\n            case \"end\":\n              return _context10.stop();\n          }\n        }, _callee10, this);\n      }));\n      function complete() {\n        return _complete.apply(this, arguments);\n      }\n      return complete;\n    }()\n    /**\n     * Changes the refresher's state from `refreshing` to `cancelling`.\n     */\n  }, {\n    key: \"cancel\",\n    value: function () {\n      var _cancel = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {\n        var _this6 = this;\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) switch (_context11.prev = _context11.next) {\n            case 0:\n              if (this.nativeRefresher) {\n                // Do not reset scroll el until user removes pointer from screen\n                if (!this.pointerDown) {\n                  raf(function () {\n                    return raf(function () {\n                      return _this6.resetNativeRefresher(_this6.elementToTransform, 16 /* RefresherState.Cancelling */);\n                    });\n                  });\n                }\n              } else {\n                this.close(16 /* RefresherState.Cancelling */, '');\n              }\n            case 1:\n            case \"end\":\n              return _context11.stop();\n          }\n        }, _callee11, this);\n      }));\n      function cancel() {\n        return _cancel.apply(this, arguments);\n      }\n      return cancel;\n    }()\n    /**\n     * A number representing how far down the user has pulled.\n     * The number `0` represents the user hasn't pulled down at all. The\n     * number `1`, and anything greater than `1`, represents that the user\n     * has pulled far enough down that when they let go then the refresh will\n     * happen. If they let go and the number is less than `1`, then the\n     * refresh will not happen, and the content will return to it's original\n     * position.\n     */\n  }, {\n    key: \"getProgress\",\n    value: function getProgress() {\n      return Promise.resolve(this.progress);\n    }\n  }, {\n    key: \"canStart\",\n    value: function canStart() {\n      if (!this.scrollEl) {\n        return false;\n      }\n      if (this.state !== 1 /* RefresherState.Inactive */) {\n        return false;\n      }\n      // if the scrollTop is greater than zero then it's\n      // not possible to pull the content down yet\n      if (this.scrollEl.scrollTop > 0) {\n        return false;\n      }\n      return true;\n    }\n  }, {\n    key: \"onStart\",\n    value: function onStart() {\n      this.progress = 0;\n      this.state = 1 /* RefresherState.Inactive */;\n      this.memoizeOverflowStyle();\n    }\n  }, {\n    key: \"onMove\",\n    value: function onMove(detail) {\n      if (!this.scrollEl) {\n        return;\n      }\n      // this method can get called like a bazillion times per second,\n      // so it's built to be as efficient as possible, and does its\n      // best to do any DOM read/writes only when absolutely necessary\n      // if multi-touch then get out immediately\n      var ev = detail.event;\n      if (ev.touches !== undefined && ev.touches.length > 1) {\n        return;\n      }\n      // do nothing if it's actively refreshing\n      // or it's in the way of closing\n      // or this was never a startY\n      if ((this.state & 56 /* RefresherState._BUSY_ */) !== 0) {\n        return;\n      }\n      var pullFactor = Number.isNaN(this.pullFactor) || this.pullFactor < 0 ? 1 : this.pullFactor;\n      var deltaY = detail.deltaY * pullFactor;\n      // don't bother if they're scrolling up\n      // and have not already started dragging\n      if (deltaY <= 0) {\n        // the current Y is higher than the starting Y\n        // so they scrolled up enough to be ignored\n        this.progress = 0;\n        this.state = 1 /* RefresherState.Inactive */;\n        if (this.appliedStyles) {\n          // reset the styles only if they were applied\n          this.setCss(0, '', false, '');\n          return;\n        }\n        return;\n      }\n      if (this.state === 1 /* RefresherState.Inactive */) {\n        // this refresh is not already actively pulling down\n        // get the content's scrollTop\n        var scrollHostScrollTop = this.scrollEl.scrollTop;\n        // if the scrollTop is greater than zero then it's\n        // not possible to pull the content down yet\n        if (scrollHostScrollTop > 0) {\n          this.progress = 0;\n          return;\n        }\n        // content scrolled all the way to the top, and dragging down\n        this.state = 2 /* RefresherState.Pulling */;\n      }\n      // prevent native scroll events\n      if (ev.cancelable) {\n        ev.preventDefault();\n      }\n      // the refresher is actively pulling at this point\n      // move the scroll element within the content element\n      this.setCss(deltaY, '0ms', true, '');\n      if (deltaY === 0) {\n        // don't continue if there's no delta yet\n        this.progress = 0;\n        return;\n      }\n      var pullMin = this.pullMin;\n      // set pull progress\n      this.progress = deltaY / pullMin;\n      // emit \"start\" if it hasn't started yet\n      if (!this.didStart) {\n        this.didStart = true;\n        this.ionStart.emit();\n      }\n      // emit \"pulling\" on every move\n      this.ionPull.emit();\n      // do nothing if the delta is less than the pull threshold\n      if (deltaY < pullMin) {\n        // ensure it stays in the pulling state, cuz its not ready yet\n        this.state = 2 /* RefresherState.Pulling */;\n        return;\n      }\n      if (deltaY > this.pullMax) {\n        // they pulled farther than the max, so kick off the refresh\n        this.beginRefresh();\n        return;\n      }\n      // pulled farther than the pull min!!\n      // it is now in the `ready` state!!\n      // if they let go then it'll refresh, kerpow!!\n      this.state = 4 /* RefresherState.Ready */;\n      return;\n    }\n  }, {\n    key: \"onEnd\",\n    value: function onEnd() {\n      // only run in a zone when absolutely necessary\n      if (this.state === 4 /* RefresherState.Ready */) {\n        // they pulled down far enough, so it's ready to refresh\n        this.beginRefresh();\n      } else if (this.state === 2 /* RefresherState.Pulling */) {\n        // they were pulling down, but didn't pull down far enough\n        // set the content back to it's original location\n        // and close the refresher\n        // set that the refresh is actively cancelling\n        this.cancel();\n      } else if (this.state === 1 /* RefresherState.Inactive */) {\n        /**\n         * The pull to refresh gesture was aborted\n         * so we should immediately restore any overflow styles\n         * that have been modified. Do not call this.cancel\n         * because the styles will only be reset after a timeout.\n         * If the gesture is aborted then scrolling should be\n         * available right away.\n         */\n        this.restoreOverflowStyle();\n      }\n    }\n  }, {\n    key: \"beginRefresh\",\n    value: function beginRefresh() {\n      // assumes we're already back in a zone\n      // they pulled down far enough, so it's ready to refresh\n      this.state = 8 /* RefresherState.Refreshing */;\n      // place the content in a hangout position while it thinks\n      this.setCss(this.pullMin, this.snapbackDuration, true, '');\n      // emit \"refresh\" because it was pulled down far enough\n      // and they let go to begin refreshing\n      this.ionRefresh.emit({\n        complete: this.complete.bind(this)\n      });\n    }\n  }, {\n    key: \"close\",\n    value: function close(state, delay) {\n      var _this7 = this;\n      // create fallback timer incase something goes wrong with transitionEnd event\n      setTimeout(function () {\n        _this7.state = 1 /* RefresherState.Inactive */;\n        _this7.progress = 0;\n        _this7.didStart = false;\n        /**\n         * Reset any overflow styles so the\n         * user can scroll again.\n         */\n        _this7.setCss(0, '0ms', false, '', true);\n      }, 600);\n      // reset the styles on the scroll element\n      // set that the refresh is actively cancelling/completing\n      this.state = state;\n      this.setCss(0, this.closeDuration, true, delay);\n    }\n  }, {\n    key: \"setCss\",\n    value: function setCss(y, duration, overflowVisible, delay) {\n      var _this8 = this;\n      var shouldRestoreOverflowStyle = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n      if (this.nativeRefresher) {\n        return;\n      }\n      this.appliedStyles = y > 0;\n      writeTask(function () {\n        if (_this8.scrollEl && _this8.backgroundContentEl) {\n          var scrollStyle = _this8.scrollEl.style;\n          var backgroundStyle = _this8.backgroundContentEl.style;\n          scrollStyle.transform = backgroundStyle.transform = y > 0 ? \"translateY(\".concat(y, \"px) translateZ(0px)\") : '';\n          scrollStyle.transitionDuration = backgroundStyle.transitionDuration = duration;\n          scrollStyle.transitionDelay = backgroundStyle.transitionDelay = delay;\n          scrollStyle.overflow = overflowVisible ? 'hidden' : '';\n        }\n        /**\n         * Reset the overflow styles only once\n         * the pull to refresh effect has been closed.\n         * This ensures that the gesture is done\n         * and the refresh operation has either\n         * been aborted or has completed.\n         */\n        if (shouldRestoreOverflowStyle) {\n          _this8.restoreOverflowStyle();\n        }\n      });\n    }\n  }, {\n    key: \"memoizeOverflowStyle\",\n    value: function memoizeOverflowStyle() {\n      if (this.scrollEl) {\n        var _this$scrollEl$style = this.scrollEl.style,\n          overflow = _this$scrollEl$style.overflow,\n          overflowX = _this$scrollEl$style.overflowX,\n          overflowY = _this$scrollEl$style.overflowY;\n        this.overflowStyles = {\n          overflow: overflow !== null && overflow !== void 0 ? overflow : '',\n          overflowX: overflowX !== null && overflowX !== void 0 ? overflowX : '',\n          overflowY: overflowY !== null && overflowY !== void 0 ? overflowY : ''\n        };\n      }\n    }\n  }, {\n    key: \"restoreOverflowStyle\",\n    value: function restoreOverflowStyle() {\n      if (this.overflowStyles !== undefined && this.scrollEl !== undefined) {\n        var _this$overflowStyles = this.overflowStyles,\n          overflow = _this$overflowStyles.overflow,\n          overflowX = _this$overflowStyles.overflowX,\n          overflowY = _this$overflowStyles.overflowY;\n        this.scrollEl.style.overflow = overflow;\n        this.scrollEl.style.overflowX = overflowX;\n        this.scrollEl.style.overflowY = overflowY;\n        this.overflowStyles = undefined;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _class2;\n      var mode = getIonMode(this);\n      return h(Host, {\n        slot: \"fixed\",\n        class: (_class2 = {}, _defineProperty(_class2, mode, true), _defineProperty(_class2, \"refresher-\".concat(mode), true), _defineProperty(_class2, 'refresher-native', this.nativeRefresher), _defineProperty(_class2, 'refresher-active', this.state !== 1), _defineProperty(_class2, 'refresher-pulling', this.state === 2), _defineProperty(_class2, 'refresher-ready', this.state === 4), _defineProperty(_class2, 'refresher-refreshing', this.state === 8), _defineProperty(_class2, 'refresher-cancelling', this.state === 16), _defineProperty(_class2, 'refresher-completing', this.state === 32), _class2)\n      });\n    }\n  }, {\n    key: \"el\",\n    get: function get() {\n      return this;\n    }\n  }], [{\n    key: \"watchers\",\n    get: function get() {\n      return {\n        \"disabled\": [\"disabledChanged\"]\n      };\n    }\n  }, {\n    key: \"style\",\n    get: function get() {\n      return {\n        ios: refresherIosCss,\n        md: refresherMdCss\n      };\n    }\n  }]);\n  return _class;\n}(HTMLElement), [32, \"ion-refresher\", {\n  \"pullMin\": [2, \"pull-min\"],\n  \"pullMax\": [2, \"pull-max\"],\n  \"closeDuration\": [1, \"close-duration\"],\n  \"snapbackDuration\": [1, \"snapback-duration\"],\n  \"pullFactor\": [2, \"pull-factor\"],\n  \"disabled\": [4],\n  \"nativeRefresher\": [32],\n  \"state\": [32],\n  \"complete\": [64],\n  \"cancel\": [64],\n  \"getProgress\": [64]\n}]);\nfunction defineCustomElement$1() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n  var components = [\"ion-refresher\"];\n  components.forEach(function (tagName) {\n    switch (tagName) {\n      case \"ion-refresher\":\n        if (!customElements.get(tagName)) {\n          customElements.define(tagName, Refresher);\n        }\n        break;\n    }\n  });\n}\nvar IonRefresher = Refresher;\nvar defineCustomElement = defineCustomElement$1;\nexport { IonRefresher, defineCustomElement };","map":null,"metadata":{},"sourceType":"module"}