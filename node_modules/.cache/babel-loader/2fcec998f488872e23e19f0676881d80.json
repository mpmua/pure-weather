{"ast":null,"code":"/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nvar HapticEngine = {\n  getEngine: function getEngine() {\n    var _a;\n    var win = window;\n    return win.TapticEngine || ((_a = win.Capacitor) === null || _a === void 0 ? void 0 : _a.isPluginAvailable('Haptics')) && win.Capacitor.Plugins.Haptics;\n  },\n  available: function available() {\n    var _a;\n    var win = window;\n    var engine = this.getEngine();\n    if (!engine) {\n      return false;\n    }\n    /**\n     * Developers can manually import the\n     * Haptics plugin in their app which will cause\n     * getEngine to return the Haptics engine. However,\n     * the Haptics engine will throw an error if\n     * used in a web browser that does not support\n     * the Vibrate API. This check avoids that error\n     * if the browser does not support the Vibrate API.\n     */\n    if (((_a = win.Capacitor) === null || _a === void 0 ? void 0 : _a.getPlatform()) === 'web') {\n      return typeof navigator !== 'undefined' && navigator.vibrate !== undefined;\n    }\n    return true;\n  },\n  isCordova: function isCordova() {\n    return !!window.TapticEngine;\n  },\n  isCapacitor: function isCapacitor() {\n    var win = window;\n    return !!win.Capacitor;\n  },\n  impact: function impact(options) {\n    var engine = this.getEngine();\n    if (!engine) {\n      return;\n    }\n    var style = this.isCapacitor() ? options.style.toUpperCase() : options.style;\n    engine.impact({\n      style: style\n    });\n  },\n  notification: function notification(options) {\n    var engine = this.getEngine();\n    if (!engine) {\n      return;\n    }\n    var style = this.isCapacitor() ? options.style.toUpperCase() : options.style;\n    engine.notification({\n      style: style\n    });\n  },\n  selection: function selection() {\n    this.impact({\n      style: 'light'\n    });\n  },\n  selectionStart: function selectionStart() {\n    var engine = this.getEngine();\n    if (!engine) {\n      return;\n    }\n    if (this.isCapacitor()) {\n      engine.selectionStart();\n    } else {\n      engine.gestureSelectionStart();\n    }\n  },\n  selectionChanged: function selectionChanged() {\n    var engine = this.getEngine();\n    if (!engine) {\n      return;\n    }\n    if (this.isCapacitor()) {\n      engine.selectionChanged();\n    } else {\n      engine.gestureSelectionChanged();\n    }\n  },\n  selectionEnd: function selectionEnd() {\n    var engine = this.getEngine();\n    if (!engine) {\n      return;\n    }\n    if (this.isCapacitor()) {\n      engine.selectionEnd();\n    } else {\n      engine.gestureSelectionEnd();\n    }\n  }\n};\n/**\n * Check to see if the Haptic Plugin is available\n * @return Returns `true` or false if the plugin is available\n */\nvar hapticAvailable = function hapticAvailable() {\n  return HapticEngine.available();\n};\n/**\n * Trigger a selection changed haptic event. Good for one-time events\n * (not for gestures)\n */\nvar hapticSelection = function hapticSelection() {\n  hapticAvailable() && HapticEngine.selection();\n};\n/**\n * Tell the haptic engine that a gesture for a selection change is starting.\n */\nvar hapticSelectionStart = function hapticSelectionStart() {\n  hapticAvailable() && HapticEngine.selectionStart();\n};\n/**\n * Tell the haptic engine that a selection changed during a gesture.\n */\nvar hapticSelectionChanged = function hapticSelectionChanged() {\n  hapticAvailable() && HapticEngine.selectionChanged();\n};\n/**\n * Tell the haptic engine we are done with a gesture. This needs to be\n * called lest resources are not properly recycled.\n */\nvar hapticSelectionEnd = function hapticSelectionEnd() {\n  hapticAvailable() && HapticEngine.selectionEnd();\n};\n/**\n * Use this to indicate success/failure/warning to the user.\n * options should be of the type `{ style: 'light' }` (or `medium`/`heavy`)\n */\nvar hapticImpact = function hapticImpact(options) {\n  hapticAvailable() && HapticEngine.impact(options);\n};\nexport { hapticSelectionStart as a, hapticSelectionChanged as b, hapticSelectionEnd as c, hapticSelection as d, hapticImpact as h };","map":null,"metadata":{},"sourceType":"module"}